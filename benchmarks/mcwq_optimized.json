[
  {
    "CFQquestionIdx": 63797,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 a screenwriter",
    "questionPatternModEntities_he": "האם M0 היה תסריטאי",
    "questionPatternModEntities_kn": "M0 ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionPatternModEntities_zh": "M0是编剧吗？",
    "questionTemplate": "Was [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was [Hans Ertl] a screenwriter",
    "questionWithBrackets_he": "האם [הנס ארטל] היה תסריטאי",
    "questionWithBrackets_kn": "[Hans Ertl] ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionWithBrackets_zh": "[Hans Ertl] 是编剧吗？",
    "recursionDepth": 10,
    "sparql": "ASK WHERE { wd:Q103013 wdt:P106 wd:Q69423232 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q69423232 }",
    "id": 63797,
    "split": "gold_test",
    "en": "Was Hans Ertl a screenwriter",
    "optimized": "Did Hans Ertl work as a screenwriter?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Hans Ertl\nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter",
    "masks": [
      {
        "uri": "wd:Q103013",
        "mask": "kg:8329"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:1788"
      },
      {
        "uri": "wd:Q69423232",
        "mask": "kg:7660"
      }
    ],
    "masked": "Translate the question “Did Hans Ertl work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8329 is Hans Ertl\nkg:1788 is occupation\nkg:7660 is film screenwriter"
  },
  {
    "CFQquestionIdx": 108918,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a composer M0",
    "questionPatternModEntities_he": "האם מלחין היה M0",
    "questionPatternModEntities_kn": "ಸಂಯೋಜಕ M0 ಆಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "是作曲家M0吗？",
    "questionTemplate": "Was a [NP_SIMPLE] [entity]",
    "questionWithBrackets": "Was a composer [Bob Dylan]",
    "questionWithBrackets_he": "האם היה מלחין [בוב דילן]",
    "questionWithBrackets_kn": "ಸಂಯೋಜಕ [ಬಾಬ್ ಡೈಲನ್]",
    "questionWithBrackets_zh": "是作曲家[鲍勃·迪伦]吗？",
    "recursionDepth": 10,
    "sparql": "ASK WHERE { wd:Q392 wdt:P106 wd:Q36834 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q36834 }",
    "id": 108918,
    "split": "gold_test",
    "en": "Was a composer Bob Dylan",
    "optimized": "Is Bob Dylan a composer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q36834 is composer\nwd:Q392 is Bob Dylan",
    "masks": [
      {
        "uri": "wd:Q392",
        "mask": "kg:6401"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:1483"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:9590"
      }
    ],
    "masked": "Translate the question “Is Bob Dylan a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1483 is occupation\nkg:9590 is composer\nkg:6401 is Bob Dylan"
  },
  {
    "CFQquestionIdx": 144115,
    "expectedResponse": [
      "L'Harmonie",
      "Waterloo Gardens Inc.",
      "Mevrex",
      "Zale Media LLC",
      "Werlein's for Music"
    ],
    "questionPatternModEntities": "What did M0 found",
    "questionPatternModEntities_he": "מה M0 מצא",
    "questionPatternModEntities_kn": "M0 ಏನು ಕಂಡುಹಿಡಿದಿದೆ",
    "questionPatternModEntities_zh": "M0发现了什么？",
    "questionTemplate": "What did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What did [human] found",
    "questionWithBrackets_he": "מה [אדם] מצא",
    "questionWithBrackets_kn": "[ಮಾನವ] ಏನು ಕಂಡುಹಿಡಿದನು",
    "questionWithBrackets_zh": "[人类]发现了什么？",
    "recursionDepth": 10,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P112 wd:Q5 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 M0\n}",
    "id": 144115,
    "split": "gold_test",
    "en": "What did human found",
    "results": [
      [
        "wd:Q120053021"
      ],
      [
        "wd:Q20475006"
      ],
      [
        "wd:Q105946422"
      ],
      [
        "wd:Q113071363"
      ],
      [
        "wd:Q69997240"
      ]
    ]
  },
  {
    "CFQquestionIdx": 145327,
    "expectedResponse": [
      "The Sacrifice"
    ],
    "questionPatternModEntities": "What did M0 edit",
    "questionPatternModEntities_he": "מה M0 ערך",
    "questionPatternModEntities_kn": "M0 ಏನು ಸಂಪಾದಿಸಿದೆ",
    "questionPatternModEntities_zh": "M0编辑了什么？",
    "questionTemplate": "What did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What did [Andrei Tarkovsky] edit",
    "questionWithBrackets_he": "מה ערך [אנדרי טרקובסקי]",
    "questionWithBrackets_kn": "[ಆಂಡ್ರೇ ತಾರ್ಕೋವ್ಸ್ಕಿ] ಏನು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[安德烈·塔可夫斯基] 编辑了什么？",
    "recursionDepth": 10,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q853 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0\n}",
    "id": 145327,
    "split": "gold_test",
    "en": "What did Andrei Tarkovsky edit",
    "optimized": "What films did Andrei Tarkovsky edit?",
    "results": [
      [
        "wd:Q281988"
      ]
    ],
    "direct": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q853 is Andrei Tarkovsky\nwdt:P1040 is film editor",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:5311"
      },
      {
        "uri": "wd:Q853",
        "mask": "kg:7776"
      }
    ],
    "masked": "Translate the question “What films did Andrei Tarkovsky edit?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7776 is Andrei Tarkovsky\nkg:5311 is film editor"
  },
  {
    "CFQquestionIdx": 48730,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 M1 's sequel",
    "questionPatternModEntities_he": "האם היה סרט ההמשך של M0 M1",
    "questionPatternModEntities_kn": "M0 M1 ನ ಮುಂದುವರಿದ ಭಾಗವೇ",
    "questionPatternModEntities_zh": "M0是M1的续集吗？",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was [So Long, and Thanks for All the Fish] [Life, the Universe and Everything] 's sequel",
    "questionWithBrackets_he": "האם [כל כך ארוך, ותודה על כל הדגים] [החיים, היקום והכל] היה ההמשך של",
    "questionWithBrackets_kn": "[ಇಷ್ಟು ದೀರ್ಘ ಮತ್ತು ಎಲ್ಲಾ ಮೀನುಗಳಿಗೆ ಧನ್ಯವಾದಗಳು] [ಲೈಫ್, ಯೂನಿವರ್ಸ್ ಮತ್ತು ಎವೆರಿಥಿಂಗ್] ನ ಉತ್ತರಭಾಗವೇ",
    "questionWithBrackets_zh": "[这么久，感谢所有的鱼] [生命、宇宙和一切] 的续集吗？",
    "recursionDepth": 11,
    "sparql": "ASK WHERE { wd:Q1042294 wdt:P155 wd:Q721 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P155 M1\n}",
    "id": 48730,
    "split": "gold_test",
    "en": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel",
    "optimized": "Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is follows\nwd:Q721 is Life, the Universe and Everything\nwd:Q1042294 is So Long, and Thanks for All the Fish",
    "masks": [
      {
        "uri": "wd:Q1042294",
        "mask": "kg:4904"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:5330"
      },
      {
        "uri": "wd:Q721",
        "mask": "kg:7972"
      }
    ],
    "masked": "Translate the question “Is \"So Long, and Thanks for All the Fish\" the sequel to \"Life, the Universe and Everything\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5330 is follows\nkg:7972 is Life, the Universe and Everything\nkg:4904 is So Long, and Thanks for All the Fish"
  },
  {
    "CFQquestionIdx": 49221,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's sequel M0",
    "questionPatternModEntities_he": "האם סרט ההמשך של M1 היה M0",
    "questionPatternModEntities_kn": "M1 ನ ಉತ್ತರಭಾಗ M0 ಆಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M1的续集是M0吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
    "questionWithBrackets": "Was [Π] 's sequel [san]",
    "questionWithBrackets_he": "האם ההמשך של [Π] היה [סן]",
    "questionWithBrackets_kn": "[Π] ನ ಉತ್ತರಭಾಗ [ಸ್ಯಾನ್] ಆಗಿದೆಯೇ",
    "questionWithBrackets_zh": "是 [Π] 的续集 [san] 吗？",
    "recursionDepth": 11,
    "sparql": "ASK WHERE { wd:Q131593 wdt:P155 wd:Q168 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P155 M1\n}",
    "id": 49221,
    "split": "gold_test",
    "en": "Was Π 's sequel san",
    "results": [
      true
    ]
  },
  {
    "CFQquestionIdx": 167428,
    "expectedResponse": [
      "Jacques Champollion"
    ],
    "questionPatternModEntities": "What was M0 's parent",
    "questionPatternModEntities_he": "מה היה ההורה של M0",
    "questionPatternModEntities_kn": "M0 ನ ಪೋಷಕ ಯಾವುದು",
    "questionPatternModEntities_zh": "M0 的父母是什么人？",
    "questionTemplate": "What was [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What was [Jean-François Champollion] 's parent",
    "questionWithBrackets_he": "מה היה ההורה של [ז&#39;אן פרנסואה שמפוליון]",
    "questionWithBrackets_kn": "[ಜೀನ್-ಫ್ರಾಂಕೋಯಿಸ್ ಚಾಂಪೋಲಿಯನ್] ಅವರ ಪೋಷಕ ಯಾವುದು",
    "questionWithBrackets_zh": "[Jean-François Champollion] 的父母是谁？",
    "recursionDepth": 11,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P40|wdt:P355 wd:Q260 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 M0\n}",
    "id": 167428,
    "split": "gold_test",
    "en": "What was Jean-François Champollion 's parent",
    "optimized": "Who were Jean-François Champollion's parents?",
    "results": [
      [
        "wd:Q66305710"
      ]
    ],
    "direct": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q260 is Jean-François Champollion",
    "masks": [
      {
        "uri": "wdt:P40",
        "mask": "kg:9549"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:2137"
      },
      {
        "uri": "wd:Q260",
        "mask": "kg:5475"
      }
    ],
    "masked": "Translate the question “Who were Jean-François Champollion's parents?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9549 is child\nkg:2137 is has subsidiary\nkg:5475 is Jean-François Champollion"
  },
  {
    "CFQquestionIdx": 184847,
    "expectedResponse": [
      "The Pirate Planet",
      "The Hitchhiker's Guide to the Galaxy",
      "The Five Doctors",
      "Shada",
      "City of Death",
      "Hyperland"
    ],
    "questionPatternModEntities": "What was written by M0",
    "questionPatternModEntities_he": "מה נכתב על ידי M0",
    "questionPatternModEntities_kn": "M0 ಏನು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0写了什么？",
    "questionTemplate": "What was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written by [Douglas Adams]",
    "questionWithBrackets_he": "מה נכתב על ידי [דאגלס אדמס]",
    "questionWithBrackets_kn": "[ಡೌಗ್ಲಾಸ್ ಆಡಮ್ಸ್] ಏನು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[道格拉斯·亚当斯] 写了什么？",
    "recursionDepth": 11,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P58 wd:Q42 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 M0\n}",
    "id": 184847,
    "split": "gold_test",
    "en": "What was written by Douglas Adams",
    "optimized": "What are the works authored by Douglas Adams?",
    "results": [
      [
        "wd:Q1768713"
      ],
      [
        "wd:Q513589"
      ],
      [
        "wd:Q3470527"
      ],
      [
        "wd:Q5123647"
      ],
      [
        "wd:Q836821"
      ],
      [
        "wd:Q12858529"
      ]
    ],
    "direct": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q42 is Douglas Adams\nwdt:P58 is screenwriter",
    "masks": [
      {
        "uri": "wdt:P58",
        "mask": "kg:2274"
      },
      {
        "uri": "wd:Q42",
        "mask": "kg:5621"
      }
    ],
    "masked": "Translate the question “What are the works authored by Douglas Adams?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5621 is Douglas Adams\nkg:2274 is screenwriter"
  },
  {
    "CFQquestionIdx": 62531,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 employed by M1",
    "questionPatternModEntities_he": "האם M0 הועסק על ידי M1",
    "questionPatternModEntities_kn": "M1 ನಿಂದ M0 ಅನ್ನು ಬಳಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是 M1 雇佣的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [Max Margules] employed by [Austria]",
    "questionWithBrackets_he": "האם [מקס מרגולס] הועסק על ידי [אוסטריה]",
    "questionWithBrackets_kn": "[ಮ್ಯಾಕ್ಸ್ ಮಾರ್ಗುಲ್ಸ್] ಅವರನ್ನು [ಆಸ್ಟ್ರಿಯಾ] ನೇಮಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[Max Margules] 是否受雇于 [奥地利]？",
    "recursionDepth": 12,
    "sparql": "ASK WHERE { wd:Q79070 wdt:P108 wd:Q40 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P108 M1\n}",
    "id": 62531,
    "split": "gold_test",
    "en": "Was Max Margules employed by Austria",
    "optimized": "Did Austria employ Max Margules?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q40 is Austria\nwd:Q79070 is Max Margules",
    "masks": [
      {
        "uri": "wd:Q79070",
        "mask": "kg:6895"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5735"
      },
      {
        "uri": "wd:Q40",
        "mask": "kg:0040"
      }
    ],
    "masked": "Translate the question “Did Austria employ Max Margules?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5735 is employer\nkg:0040 is Austria\nkg:6895 is Max Margules"
  },
  {
    "CFQquestionIdx": 64272,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by M1",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי M1",
    "questionPatternModEntities_kn": "M0 ಅನ್ನು M1 ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0是M1写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] written by [J. R. R. Tolkien]",
    "questionWithBrackets_he": "האם [The Hobbit: An Unexpected Journey] נכתב על ידי [J. ר.ר. טולקין]",
    "questionWithBrackets_kn": "ವಾಸ್ [ದಿ ಹಾಬಿಟ್: ಆನ್ ಎಕ್ಸ್‌ಪೆಕ್ಟೆಡ್ ಜರ್ನಿ] ಬರೆದವರು [ಜೆ. R. R. ಟೋಲ್ಕಿನ್]",
    "questionWithBrackets_zh": "[霍比特人：意外之旅] 是由 [J. R.R.托尔金]？",
    "recursionDepth": 12,
    "sparql": "ASK WHERE { wd:Q80379 wdt:P58 wd:Q892 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P58 M1\n}",
    "id": 64272,
    "split": "gold_test",
    "en": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien",
    "optimized": "Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is The Hobbit: An Unexpected Journey\nwd:Q892 is J. R. R. Tolkien\nwdt:P58 is screenwriter",
    "masks": [
      {
        "uri": "wd:Q80379",
        "mask": "kg:1098"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1037"
      },
      {
        "uri": "wd:Q892",
        "mask": "kg:4332"
      }
    ],
    "masked": "Translate the question “Did J. R. R. Tolkien write The Hobbit: An Unexpected Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1098 is The Hobbit: An Unexpected Journey\nkg:4332 is J. R. R. Tolkien\nkg:1037 is screenwriter"
  },
  {
    "CFQquestionIdx": 69534,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 executive produced by M1",
    "questionPatternModEntities_he": "האם מנהל M0 הופק על ידי M1",
    "questionPatternModEntities_kn": "M0 ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಅನ್ನು M1 ನಿಂದ ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0执行官是M1出品的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [A Good Day to Die Hard] executive produced by [Bruce Willis]",
    "questionWithBrackets_he": "האם [A Good Day to Die Hard] הופק על ידי [ברוס וויליס]",
    "questionWithBrackets_kn": "[ಎ ಗುಡ್ ಡೇ ಟು ಡೈ ಹಾರ್ಡ್] ಕಾರ್ಯನಿರ್ವಾಹಕ [ಬ್ರೂಸ್ ವಿಲ್ಲೀಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[A Good Day to Die Hard] 是由 [Bruce Willis] 制作的吗？",
    "recursionDepth": 13,
    "sparql": "ASK WHERE { wd:Q72276 wdt:P1431 wd:Q2680 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1431 M1\n}",
    "id": 69534,
    "split": "gold_test",
    "en": "Was A Good Day to Die Hard executive produced by Bruce Willis",
    "optimized": "Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is executive producer\nwd:Q72276 is A Good Day to Die Hard\nwd:Q2680 is Bruce Willis",
    "masks": [
      {
        "uri": "wd:Q72276",
        "mask": "kg:5777"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0925"
      },
      {
        "uri": "wd:Q2680",
        "mask": "kg:2143"
      }
    ],
    "masked": "Translate the question “Did Bruce Willis serve as an executive producer for the movie \"A Good Day to Die Hard\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0925 is executive producer\nkg:5777 is A Good Day to Die Hard\nkg:2143 is Bruce Willis"
  },
  {
    "CFQquestionIdx": 50653,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's costume designer a composer",
    "questionPatternModEntities_he": "האם מעצב התלבושות של M1 היה מלחין",
    "questionPatternModEntities_kn": "M1 ನ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು ಸಂಯೋಜಕರೇ",
    "questionPatternModEntities_zh": "M1的服装设计师是作曲家吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE]",
    "questionWithBrackets": "Was [White Diamond: A Personal Portrait of Kylie Minogue] 's costume designer a composer",
    "questionWithBrackets_he": "האם מעצב התלבושות של [White Diamond: A Personal Portrait of Kylie Minogue] היה מלחין",
    "questionWithBrackets_kn": "[ವೈಟ್ ಡೈಮಂಡ್: ಕೈಲಿ ಮಿನೋಗ್ ಅವರ ವೈಯಕ್ತಿಕ ಭಾವಚಿತ್ರ] ಅವರ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು ಸಂಯೋಜಕರೇ",
    "questionWithBrackets_zh": "[白钻：凯莉·米洛的个人肖像]的服装设计师是作曲家吗？",
    "recursionDepth": 14,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q36834 . wd:Q2733930 wdt:P2515 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q36834 .\nM1 wdt:P2515 ?x0\n}",
    "id": 50653,
    "split": "gold_test",
    "en": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer",
    "optimized": "Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q2733930 is White Diamond: A Personal Portrait of Kylie Minogue\nwd:Q36834 is composer\nwdt:P2515 is costume designer",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5123"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:9266"
      },
      {
        "uri": "wd:Q2733930",
        "mask": "kg:1786"
      },
      {
        "uri": "wdt:P2515",
        "mask": "kg:1651"
      }
    ],
    "masked": "Translate the question “Did the costume designer of \"White Diamond: A Personal Portrait of Kylie Minogue\" also work as a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5123 is occupation\nkg:1786 is White Diamond: A Personal Portrait of Kylie Minogue\nkg:9266 is composer\nkg:1651 is costume designer"
  },
  {
    "CFQquestionIdx": 50798,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's cinematographer a screenwriter",
    "questionPatternModEntities_he": "האם צלם הקולנוע של M1 היה תסריטאי",
    "questionPatternModEntities_kn": "M1 ನ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionPatternModEntities_zh": "M1的摄影师是编剧吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE]",
    "questionWithBrackets": "Was [Olympia] 's cinematographer a screenwriter",
    "questionWithBrackets_he": "האם צלם הקולנוע של [אולימפיה] היה תסריטאי",
    "questionWithBrackets_kn": "[ಒಲಿಂಪಿಯಾ] ನ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionWithBrackets_zh": "[奥林匹亚]的摄影师是编剧吗？",
    "recursionDepth": 14,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q69423232 . wd:Q158069 wdt:P344 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q69423232 .\nM1 wdt:P344 ?x0\n}",
    "id": 50798,
    "split": "gold_test",
    "en": "Was Olympia 's cinematographer a screenwriter",
    "optimized": "Did the cinematographer of Olympia also work as a screenwriter?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q158069 is Olympia\nwd:Q69423232 is film screenwriter\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5717"
      },
      {
        "uri": "wd:Q69423232",
        "mask": "kg:3042"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:3806"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6330"
      }
    ],
    "masked": "Translate the question “Did the cinematographer of Olympia also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5717 is occupation\nkg:3806 is Olympia\nkg:3042 is film screenwriter\nkg:6330 is director of photography"
  },
  {
    "CFQquestionIdx": 49488,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M1 's spouse M0 's employee",
    "questionPatternModEntities_he": "האם בן הזוג של M1 היה עובד של M0",
    "questionPatternModEntities_kn": "M1 ರ ಸಂಗಾತಿ M0 ರ ಉದ್ಯೋಗಿಯೇ",
    "questionPatternModEntities_zh": "M1 的配偶是 M0 的雇员吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was [Erich Honecker] 's spouse [Free German Youth] 's employee",
    "questionWithBrackets_he": "האם בן זוגו של [אריך הונקר] היה עובד של [נוער גרמני חופשי]",
    "questionWithBrackets_kn": "[ಎರಿಕ್ ಹೊನೆಕರ್] ಅವರ ಸಂಗಾತಿಯ [ಫ್ರೀ ಜರ್ಮನ್ ಯೂತ್] ಅವರ ಉದ್ಯೋಗಿಯೇ",
    "questionWithBrackets_zh": "[Erich Honecker] 的配偶 [Free German Youth] 是雇员吗？",
    "recursionDepth": 15,
    "sparql": "ASK WHERE { ?x0 wdt:P108 wd:Q76845 . ?x0 wdt:P26 wd:Q2607 . FILTER ( ?x0 != wd:Q2607 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P108 M0 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M1 )\n}",
    "id": 49488,
    "split": "gold_test",
    "en": "Was Erich Honecker 's spouse Free German Youth 's employee",
    "optimized": "Did Erich Honecker's spouse work for the Free German Youth organization?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q2607 is Erich Honecker\nwdt:P26 is spouse\nwd:Q76845 is Free German Youth",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:9306"
      },
      {
        "uri": "wd:Q76845",
        "mask": "kg:7601"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:7581"
      },
      {
        "uri": "wd:Q2607",
        "mask": "kg:0722"
      },
      {
        "uri": "wd:Q2607",
        "mask": "kg:8368"
      }
    ],
    "masked": "Translate the question “Did Erich Honecker's spouse work for the Free German Youth organization?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9306 is employer\nkg:8368 is Erich Honecker\nkg:7581 is spouse\nkg:7601 is Free German Youth"
  },
  {
    "CFQquestionIdx": 64281,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 produced by a composer",
    "questionPatternModEntities_he": "האם M1 הופק על ידי מלחין",
    "questionPatternModEntities_kn": "M1 ಅನ್ನು ಸಂಯೋಜಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1是作曲家制作的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "questionWithBrackets": "Was [1999] produced by a composer",
    "questionWithBrackets_he": "האם [1999] הופק על ידי מלחין",
    "questionWithBrackets_kn": "ಸಂಯೋಜಕರಿಂದ [1999] ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[1999] 是作曲家制作的吗？",
    "recursionDepth": 15,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q36834 . wd:Q208824 wdt:P162|wdt:P272 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q36834 .\nM1 wdt:P162|wdt:P272 ?x0\n}",
    "id": 64281,
    "split": "gold_test",
    "en": "Was 1999 produced by a composer",
    "optimized": "Was \"1999\" produced by a composer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q208824 is 1999\nwd:Q36834 is composer\nwdt:P162 is producer\nwdt:P106 is occupation\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0847"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:5578"
      },
      {
        "uri": "wd:Q208824",
        "mask": "kg:0923"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5188"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3182"
      }
    ],
    "masked": "Translate the question “Was \"1999\" produced by a composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is 1999\nkg:5578 is composer\nkg:5188 is producer\nkg:0847 is occupation\nkg:3182 is production company"
  },
  {
    "CFQquestionIdx": 109257,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M1 a screenwriter",
    "questionPatternModEntities_he": "האם מלחין של M1 היה תסריטאי",
    "questionPatternModEntities_kn": "M1 ರ ಸಂಯೋಜಕರು ಚಿತ್ರಕಥೆಗಾರರೇ",
    "questionPatternModEntities_zh": "M1的作曲家是编剧吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was a composer of [Al Compás de tu Mentira] a screenwriter",
    "questionWithBrackets_he": "האם מלחין [Al Compás de tu Mentira] היה תסריטאי",
    "questionWithBrackets_kn": "[Al Compás de tu Mentira] ಸಂಯೋಜಕರು ಚಿತ್ರಕಥೆಗಾರರೇ",
    "questionWithBrackets_zh": "[Al Compás de tu Mentira] 的作曲家是编剧吗？",
    "recursionDepth": 16,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q69423232 . wd:Q577126 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q69423232 .\nM1 wdt:P86 ?x0\n}",
    "id": 109257,
    "split": "gold_test",
    "en": "Was a composer of Al Compás de tu Mentira a screenwriter",
    "optimized": "Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q69423232 is film screenwriter\nwdt:P86 is composer\nwd:Q577126 is Al Compás de tu Mentira",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0046"
      },
      {
        "uri": "wd:Q69423232",
        "mask": "kg:8622"
      },
      {
        "uri": "wd:Q577126",
        "mask": "kg:6046"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:6677"
      }
    ],
    "masked": "Translate the question “Did the composer of \"Al Compás de tu Mentira\" also work as a screenwriter?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0046 is occupation\nkg:8622 is film screenwriter\nkg:6677 is composer\nkg:6046 is Al Compás de tu Mentira"
  },
  {
    "CFQquestionIdx": 109298,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M1 a cinematographer",
    "questionPatternModEntities_he": "האם מלחין של M1 היה צלם קולנוע",
    "questionPatternModEntities_kn": "M1 ರ ಸಂಯೋಜಕರು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M1的作曲家是摄影师吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was a composer of [The Chess Players] a cinematographer",
    "questionWithBrackets_he": "האם מלחין של [שחקני השחמט] היה צלם קולנוע",
    "questionWithBrackets_kn": "[ದಿ ಚೆಸ್ ಪ್ಲೇಯರ್ಸ್] ನ ಸಂಯೋಜಕರು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "[The Chess Players] 的作曲家是摄影师吗？",
    "recursionDepth": 16,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . wd:Q76582 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\nM1 wdt:P86 ?x0\n}",
    "id": 109298,
    "split": "gold_test",
    "en": "Was a composer of The Chess Players a cinematographer",
    "optimized": "Did the composer of \"The Chess Players\" also work as a cinematographer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is occupation\nwd:Q76582 is The Chess Players\nwdt:P86 is composer\nwd:Q222344 is cinematographer",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8613"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:6161"
      },
      {
        "uri": "wd:Q76582",
        "mask": "kg:5470"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:7873"
      }
    ],
    "masked": "Translate the question “Did the composer of \"The Chess Players\" also work as a cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8613 is occupation\nkg:5470 is The Chess Players\nkg:7873 is composer\nkg:6161 is cinematographer"
  },
  {
    "CFQquestionIdx": 165018,
    "expectedResponse": [],
    "questionPatternModEntities": "What sequel of M1 did M0 distribute",
    "questionPatternModEntities_he": "איזה המשך של M1 הפיץ M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಉತ್ತರಭಾಗವನ್ನು M0 ವಿತರಿಸಿದೆ",
    "questionPatternModEntities_zh": "M0发行了M1的什么续集？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What sequel of [Microsoft Flight Simulator 2004: A Century of Flight] did [Microsoft] distribute",
    "questionWithBrackets_he": "איזה סרט המשך של [Microsoft Flight Simulator 2004: A Century of Flight] הפיצה [Microsoft]",
    "questionWithBrackets_kn": "[ಮೈಕ್ರೋಸಾಫ್ಟ್ ಫ್ಲೈಟ್ ಸಿಮ್ಯುಲೇಟರ್ 2004: ಎ ಸೆಂಚುರಿ ಆಫ್ ಫ್ಲೈಟ್] ಯಾವ ಉತ್ತರಭಾಗವನ್ನು [ಮೈಕ್ರೋಸಾಫ್ಟ್] ವಿತರಿಸಿದೆ",
    "questionWithBrackets_zh": "[Microsoft] 发布了 [Microsoft Flight Simulator 2004: A Century of Flight] 的什么续集？",
    "recursionDepth": 16,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P750 wd:Q2283 . ?x0 wdt:P155 wd:Q4348691 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 M0 .\n?x0 wdt:P155 M1\n}",
    "id": 165018,
    "split": "gold_test",
    "en": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute",
    "optimized": "Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?",
    "results": [],
    "direct": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4348691 is Microsoft Flight Simulator 2004: A Century of Flight\nwdt:P750 is distributed by\nwd:Q2283 is Microsoft\nwdt:P155 is follows",
    "masks": [
      {
        "uri": "wdt:P750",
        "mask": "kg:6754"
      },
      {
        "uri": "wd:Q2283",
        "mask": "kg:8500"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:7747"
      },
      {
        "uri": "wd:Q4348691",
        "mask": "kg:2698"
      }
    ],
    "masked": "Translate the question “Which version of Microsoft Flight Simulator was released after Microsoft Flight Simulator 2004: A Century of Flight?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2698 is Microsoft Flight Simulator 2004: A Century of Flight\nkg:6754 is distributed by\nkg:8500 is Microsoft\nkg:7747 is follows"
  },
  {
    "CFQquestionIdx": 165191,
    "expectedResponse": [
      "Twin Peaks: Fire Walk with Me"
    ],
    "questionPatternModEntities": "What sequel of M1 starred M0",
    "questionPatternModEntities_he": "באיזה סרט המשך של M1 כיכב M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಸೀಕ್ವೆಲ್ M0 ನಟಿಸಿದೆ",
    "questionPatternModEntities_zh": "M1的什么续集主演了M0？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What sequel of [Twin Peaks] starred [James Parks]",
    "questionWithBrackets_he": "באיזה סרט המשך של [טווין פיקס] כיכב [ג&#39;יימס פארקס]",
    "questionWithBrackets_kn": "[ಜೇಮ್ಸ್ ಪಾರ್ಕ್ಸ್] ನಟಿಸಿದ [ಟ್ವಿನ್ ಪೀಕ್ಸ್] ಯಾವ ಸೀಕ್ವೆಲ್",
    "questionWithBrackets_zh": "[双峰]的哪部续集由[詹姆斯·帕克斯]主演？",
    "recursionDepth": 16,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P155 wd:Q2085 . ?x0 wdt:P161 wd:Q967797 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 M1 .\n?x0 wdt:P161 M0\n}",
    "id": 165191,
    "split": "gold_test",
    "en": "What sequel of Twin Peaks starred James Parks",
    "optimized": "Which Twin Peaks sequel featured actor James Parks?",
    "results": [],
    "direct": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q967797 is James Parks\nwdt:P161 is cast member\nwd:Q2085 is Twin Peaks\nwdt:P155 is follows",
    "masks": [
      {
        "uri": "wdt:P155",
        "mask": "kg:9528"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:2642"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8519"
      },
      {
        "uri": "wd:Q967797",
        "mask": "kg:9033"
      }
    ],
    "masked": "Translate the question “Which Twin Peaks sequel featured actor James Parks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9033 is James Parks\nkg:8519 is cast member\nkg:2642 is Twin Peaks\nkg:9528 is follows"
  },
  {
    "CFQquestionIdx": 49041,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 's founder a parent of M1",
    "questionPatternModEntities_he": "האם מייסד M0 היה הורה של M1",
    "questionPatternModEntities_kn": "M0 ನ ಸಂಸ್ಥಾಪಕರು M1 ನ ಪೋಷಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0 的创始人是 M1 的父母吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was [Higher Ground Productions] 's founder a parent of [Malia Obama]",
    "questionWithBrackets_he": "האם מייסד [Higher Ground Productions] היה הורה של [מליה אובמה]",
    "questionWithBrackets_kn": "[ಹೈಯರ್ ಗ್ರೌಂಡ್ ಪ್ರೊಡಕ್ಷನ್ಸ್] ಸಂಸ್ಥಾಪಕರು [ಮಾಲಿಯಾ ಒಬಾಮಾ] ಅವರ ಪೋಷಕರಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Higher Ground Productions] 的创始人是 [Malia Obama] 的父母吗？",
    "recursionDepth": 17,
    "sparql": "ASK WHERE { wd:Q81950264 wdt:P112 ?x0 . ?x0 wdt:P40|wdt:P355 wd:Q15070044 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P40|wdt:P355 M1\n}",
    "id": 49041,
    "split": "gold_test",
    "en": "Was Higher Ground Productions 's founder a parent of Malia Obama",
    "optimized": "Is the founder of Higher Ground Productions a parent of Malia Obama?",
    "results": [
      true
    ],
    "direct": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Higher Ground Productions\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama\nwdt:P112 is founded by",
    "masks": [
      {
        "uri": "wd:Q81950264",
        "mask": "kg:0861"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:5288"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:0988"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:8328"
      },
      {
        "uri": "wd:Q15070044",
        "mask": "kg:5964"
      }
    ],
    "masked": "Translate the question “Is the founder of Higher Ground Productions a parent of Malia Obama?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0861 is Higher Ground Productions\nkg:8328 is has subsidiary\nkg:0988 is child\nkg:5964 is Malia Obama\nkg:5288 is founded by"
  },
  {
    "CFQquestionIdx": 64041,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 's sibling a employee of M1",
    "questionPatternModEntities_he": "האם אח של M0 היה עובד של M1",
    "questionPatternModEntities_kn": "M0 ನ ಒಡಹುಟ್ಟಿದವರು M1 ನ ಉದ್ಯೋಗಿಯೇ",
    "questionPatternModEntities_zh": "M0 的兄弟姐妹是 M1 的雇员吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was [Adolf Hitler] 's sibling a employee of [Uniqa Insurance Group]",
    "questionWithBrackets_he": "האם אחיו של [אדולף היטלר] היה עובד של [קבוצת הביטוח יוניקה]",
    "questionWithBrackets_kn": "[ಅಡಾಲ್ಫ್ ಹಿಟ್ಲರ್] ಅವರ ಒಡಹುಟ್ಟಿದವರು [ಯುನಿಕಾ ಇನ್ಶುರೆನ್ಸ್ ಗ್ರೂಪ್] ಉದ್ಯೋಗಿಯೇ",
    "questionWithBrackets_zh": "[阿道夫希特勒]的兄弟姐妹是[优衣库保险集团]的雇员吗？",
    "recursionDepth": 17,
    "sparql": "ASK WHERE { ?x0 wdt:P108 wd:Q1022419 . ?x0 wdt:P3373 wd:Q352 . FILTER ( ?x0 != wd:Q352 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P108 M1 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 64041,
    "split": "gold_test",
    "en": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group",
    "optimized": "Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P3373 is sibling\nwd:Q1022419 is Uniqa Insurance Group\nwd:Q352 is Adolf Hitler",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:6233"
      },
      {
        "uri": "wd:Q1022419",
        "mask": "kg:3300"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:2023"
      },
      {
        "uri": "wd:Q352",
        "mask": "kg:9617"
      },
      {
        "uri": "wd:Q352",
        "mask": "kg:9755"
      }
    ],
    "masked": "Translate the question “Did any of Adolf Hitler's siblings work for Uniqa Insurance Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6233 is employer\nkg:2023 is sibling\nkg:3300 is Uniqa Insurance Group\nkg:9755 is Adolf Hitler"
  },
  {
    "CFQquestionIdx": 153352,
    "expectedResponse": [
      "Apple Inc."
    ],
    "questionPatternModEntities": "What employer of M0 was M1 's distributor",
    "questionPatternModEntities_he": "איזה מעסיק של M0 היה המפיץ של M1",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು M1 ನ ವಿತರಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个雇主是 M1 的经销商？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Dr. Dre] was [Animal Crossing: Pocket Camp] 's distributor",
    "questionWithBrackets_he": "איזה מעסיק של [Dr. דרה] היה המפיץ של [Animal Crossing: Pocket Camp]",
    "questionWithBrackets_kn": "ಯಾವ ಉದ್ಯೋಗದಾತ [ಡಾ. ಡ್ರೆ] [ಅನಿಮಲ್ ಕ್ರಾಸಿಂಗ್: ಪಾಕೆಟ್ ಕ್ಯಾಂಪ್] ನ ವಿತರಕರೇ",
    "questionWithBrackets_zh": "[博士的雇主] Dre] 是 [Animal Crossing: Pocket Camp] 的经销商吗？",
    "recursionDepth": 17,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q6078 wdt:P108 ?x0 . wd:Q42310881 wdt:P750 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P108 ?x0 .\nM1 wdt:P750 ?x0\n}",
    "id": 153352,
    "split": "gold_test",
    "en": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor",
    "optimized": "Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?",
    "results": [
      [
        "wd:Q312"
      ]
    ],
    "direct": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q6078 is Dr. Dre\nwdt:P750 is distributed by\nwd:Q42310881 is Animal Crossing: Pocket Camp",
    "masks": [
      {
        "uri": "wd:Q6078",
        "mask": "kg:2257"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7506"
      },
      {
        "uri": "wd:Q42310881",
        "mask": "kg:5400"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:6968"
      }
    ],
    "masked": "Translate the question “Who was Dr. Dre's employer that also distributed Animal Crossing: Pocket Camp?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7506 is employer\nkg:2257 is Dr. Dre\nkg:6968 is distributed by\nkg:5400 is Animal Crossing: Pocket Camp"
  },
  {
    "CFQquestionIdx": 153369,
    "expectedResponse": [
      "Barack Obama"
    ],
    "questionPatternModEntities": "What employer of M1 was M0 's parent",
    "questionPatternModEntities_he": "איזה מעסיק של M1 היה ההורה של M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು M0 ನ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M1 的哪个雇主是 M0 的父母？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Ben LaBolt] was [Malia Obama] 's parent",
    "questionWithBrackets_he": "איזה מעסיק של [בן לבולט] היה ההורה של [מליה אובמה]",
    "questionWithBrackets_kn": "[ಬೆನ್ ಲಾಬೋಲ್ಟ್] ಯಾವ ಉದ್ಯೋಗದಾತರು [ಮಾಲಿಯಾ ಒಬಾಮಾ] ಅವರ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Ben LaBolt] 的哪个雇主是 [Malia Obama] 的父母？",
    "recursionDepth": 17,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q103941992 wdt:P108 ?x0 . ?x0 wdt:P40|wdt:P355 wd:Q15070044 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P108 ?x0 .\n?x0 wdt:P40|wdt:P355 M0\n}",
    "id": 153369,
    "split": "gold_test",
    "en": "What employer of Ben LaBolt was Malia Obama 's parent",
    "optimized": "Who was Malia Obama's parent and Ben LaBolt's employer?",
    "results": [
      [
        "wd:Q76"
      ]
    ],
    "direct": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q103941992 is Ben LaBolt\nwdt:P355 is has subsidiary\nwdt:P40 is child\nwd:Q15070044 is Malia Obama",
    "masks": [
      {
        "uri": "wd:Q103941992",
        "mask": "kg:8530"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7837"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:4636"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:8887"
      },
      {
        "uri": "wd:Q15070044",
        "mask": "kg:4784"
      }
    ],
    "masked": "Translate the question “Who was Malia Obama's parent and Ben LaBolt's employer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7837 is employer\nkg:8530 is Ben LaBolt\nkg:8887 is has subsidiary\nkg:4636 is child\nkg:4784 is Malia Obama"
  },
  {
    "CFQquestionIdx": 94799,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer 's spouse M0 's sibling",
    "questionPatternModEntities_he": "האם בן זוגה של מעצבת תלבושות היה אח של M0",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಸಂಗಾತಿ M0 ಅವರ ಒಡಹುಟ್ಟಿದವರೇ",
    "questionPatternModEntities_zh": "服装设计师的配偶是M0的兄弟姐妹吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer 's spouse [Pierre Van Dormael] 's sibling",
    "questionWithBrackets_he": "האם בן זוגו של מעצב תלבושות [פייר ואן דורמאל] היה אח של",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಸಂಗಾತಿ [ಪಿಯರ್ ವ್ಯಾನ್ ಡೋರ್ಮೇಲ್] ಅವರ ಒಡಹುಟ್ಟಿದವರು",
    "questionWithBrackets_zh": "服装设计师的配偶 [Pierre Van Dormael] 是兄弟姐妹吗？",
    "recursionDepth": 18,
    "sparql": "ASK WHERE { ?x0 wdt:P3373 wd:Q730300 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P106 wd:Q1323191 . FILTER ( ?x0 != ?x1 ) . FILTER ( ?x0 != wd:Q730300 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P106 wd:Q1323191 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "id": 94799,
    "split": "gold_test",
    "en": "Was a costume designer 's spouse Pierre Van Dormael 's sibling",
    "optimized": "Did a costume designer marry a sibling of Pierre Van Dormael?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwd:Q730300 is Pierre Van Dormael",
    "masks": [
      {
        "uri": "wdt:P3373",
        "mask": "kg:1214"
      },
      {
        "uri": "wd:Q730300",
        "mask": "kg:9893"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4927"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:7103"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:3209"
      },
      {
        "uri": "wd:Q730300",
        "mask": "kg:1510"
      }
    ],
    "masked": "Translate the question “Did a costume designer marry a sibling of Pierre Van Dormael?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4927 is spouse\nkg:1214 is sibling\nkg:3209 is costume designer\nkg:7103 is occupation\nkg:1510 is Pierre Van Dormael"
  },
  {
    "CFQquestionIdx": 94801,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a costume designer 's spouse M0 's founder",
    "questionPatternModEntities_he": "האם בן הזוג של מעצב תלבושות היה המייסד של M0",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಸಂಗಾತಿ M0 ಸ್ಥಾಪಕರೇ",
    "questionPatternModEntities_zh": "服装设计师的配偶是M0的创始人吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer 's spouse [ClubJenna] 's founder",
    "questionWithBrackets_he": "האם בן זוגה של מעצבת תלבושות [ClubJenna] היה המייסד של מעצבת התלבושות",
    "questionWithBrackets_kn": "ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರ ಸಂಗಾತಿಯ [ಕ್ಲಬ್‌ಜೆನ್ನಾ] ಸಂಸ್ಥಾಪಕರೇ",
    "questionWithBrackets_zh": "是服装设计师的配偶 [ClubJenna] 的创始人吗？",
    "recursionDepth": 18,
    "sparql": "ASK WHERE { wd:Q1102919 wdt:P112 ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P106 wd:Q1323191 . FILTER ( ?x0 != ?x1 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P106 wd:Q1323191 .\nFILTER ( ?x0 != ?x1 )\n}",
    "id": 94801,
    "split": "gold_test",
    "en": "Was a costume designer 's spouse ClubJenna 's founder",
    "optimized": "Is the spouse of a costume designer the founder of ClubJenna?",
    "results": [
      true
    ],
    "direct": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is ClubJenna\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P112 is founded by\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wd:Q1102919",
        "mask": "kg:4748"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:7898"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1045"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:3163"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:0196"
      }
    ],
    "masked": "Translate the question “Is the spouse of a costume designer the founder of ClubJenna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4748 is ClubJenna\nkg:1045 is spouse\nkg:0196 is costume designer\nkg:7898 is founded by\nkg:3163 is occupation"
  },
  {
    "CFQquestionIdx": 183804,
    "expectedResponse": [
      "Magical Mystery Tour"
    ],
    "questionPatternModEntities": "What was written and directed by M0",
    "questionPatternModEntities_he": "מה נכתב וביים M0",
    "questionPatternModEntities_kn": "M0 ಏನು ಬರೆದು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 编剧和导演了什么？",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written and directed by [George Harrison]",
    "questionWithBrackets_he": "מה נכתב וביים על ידי [ג&#39;ורג&#39; הריסון]",
    "questionWithBrackets_kn": "[ಜಾರ್ಜ್ ಹ್ಯಾರಿಸನ್] ಏನು ಬರೆದು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[乔治·哈里森] 编剧和导演了什么？",
    "recursionDepth": 18,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q2643 . ?x0 wdt:P58 wd:Q2643 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 183804,
    "split": "gold_test",
    "en": "What was written and directed by George Harrison",
    "optimized": "What were written and directed by George Harrison?",
    "results": [
      [
        "wd:Q901203"
      ]
    ],
    "direct": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2643 is George Harrison\nwdt:P57 is director\nwdt:P58 is screenwriter",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:6881"
      },
      {
        "uri": "wd:Q2643",
        "mask": "kg:7908"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7204"
      },
      {
        "uri": "wd:Q2643",
        "mask": "kg:1544"
      }
    ],
    "masked": "Translate the question “What were written and directed by George Harrison?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1544 is George Harrison\nkg:6881 is director\nkg:7204 is screenwriter"
  },
  {
    "CFQquestionIdx": 183840,
    "expectedResponse": [
      "In Daddy's Pocket",
      "No label defined",
      "No label defined"
    ],
    "questionPatternModEntities": "What was written and edited by M0",
    "questionPatternModEntities_he": "מה נכתב ונערך על ידי M0",
    "questionPatternModEntities_kn": "M0 ಅವರು ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 编写和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written and edited by [Anker Sørensen]",
    "questionWithBrackets_he": "מה נכתב וערך על ידי [אנקר סורסן]",
    "questionWithBrackets_kn": "[ಆಂಕರ್ ಸೊರೆನ್ಸೆನ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Anker Sørensen] 编写和编辑了什么？",
    "recursionDepth": 18,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q24907 . ?x0 wdt:P58 wd:Q24907 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 183840,
    "split": "gold_test",
    "en": "What was written and edited by Anker Sørensen",
    "optimized": "What was written and edited by Anker Sørensen?",
    "results": [
      [
        "wd:Q12317972"
      ],
      [
        "wd:Q20729292"
      ],
      [
        "wd:Q33540390"
      ]
    ],
    "direct": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q24907 is Anker Sørensen\nwdt:P1040 is film editor",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:8734"
      },
      {
        "uri": "wd:Q24907",
        "mask": "kg:9087"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3303"
      },
      {
        "uri": "wd:Q24907",
        "mask": "kg:8976"
      }
    ],
    "masked": "Translate the question “What was written and edited by Anker Sørensen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3303 is screenwriter\nkg:8976 is Anker Sørensen\nkg:8734 is film editor"
  },
  {
    "CFQquestionIdx": 93962,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer M2 's Swedish parent",
    "questionPatternModEntities_he": "האם היה הורה השוודי של מעצבת התלבושות M2",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ M2 ನ ಸ್ವೀಡಿಷ್ ಪೋಷಕರೇ",
    "questionPatternModEntities_zh": "是服装设计师 M2 的瑞典父母吗？",
    "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer [Nadja Weiss] 's Swedish parent",
    "questionWithBrackets_he": "האם היה הורה השוודי של מעצבת תלבושות [נאדג&#39;ה וייס]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ನಾಡ್ಜಾ ವೈಸ್] ಅವರ ಸ್ವೀಡಿಷ್ ಪೋಷಕರೇ",
    "questionWithBrackets_zh": "是服装设计师 [Nadja Weiss] 的瑞典父母吗？",
    "recursionDepth": 19,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . ?x0 wdt:P40|wdt:P355 wd:Q4990261 . ?x0 wdt:P27 wd:Q34 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\n?x0 wdt:P40|wdt:P355 M2 .\n?x0 wdt:P27 wd:Q34\n}",
    "id": 93962,
    "split": "gold_test",
    "en": "Was a costume designer Nadja Weiss 's Swedish parent",
    "optimized": "Did a costume designer named Nadja Weiss have a Swedish parent?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4990261 is Nadja Weiss\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q1323191 is costume designer\nwdt:P27 is country of citizenship\nwd:Q34 is Sweden\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2768"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:9889"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:0132"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:6915"
      },
      {
        "uri": "wd:Q4990261",
        "mask": "kg:7100"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:2071"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:2270"
      }
    ],
    "masked": "Translate the question “Did a costume designer named Nadja Weiss have a Swedish parent?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7100 is Nadja Weiss\nkg:0132 is child\nkg:6915 is has subsidiary\nkg:9889 is costume designer\nkg:2071 is country of citizenship\nkg:2270 is Sweden\nkg:2768 is occupation"
  },
  {
    "CFQquestionIdx": 50441,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M2 's spouse a Japanese cinematographer",
    "questionPatternModEntities_he": "האם בן הזוג של M2 היה צלם קולנוע יפני",
    "questionPatternModEntities_kn": "M2 ನ ಸಂಗಾತಿಯು ಜಪಾನಿನ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದಾರಾ",
    "questionPatternModEntities_zh": "M2的配偶是日本摄影师吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "questionWithBrackets": "Was [Takenori Sentō] 's spouse a Japanese cinematographer",
    "questionWithBrackets_he": "האם בן זוגו של [Takenori Sentō] היה צלם קולנוע יפני",
    "questionWithBrackets_kn": "[ಟಕೆನೋರಿ ಸೆಂಟೊ] ಅವರ ಸಂಗಾತಿಯು ಜಪಾನೀಸ್ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "[仙藤武则]的配偶是日本摄影师吗？",
    "recursionDepth": 19,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . ?x0 wdt:P27 wd:Q17 . ?x0 wdt:P26 wd:Q3514303 . FILTER ( ?x0 != wd:Q3514303 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M2 )\n}",
    "id": 50441,
    "split": "gold_test",
    "en": "Was Takenori Sentō 's spouse a Japanese cinematographer",
    "optimized": "Is Takenori Sentō's spouse a Japanese cinematographer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17 is Japan\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q3514303 is Takenori Sentō",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:6350"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:7805"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:8642"
      },
      {
        "uri": "wd:Q17",
        "mask": "kg:3620"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:6852"
      },
      {
        "uri": "wd:Q3514303",
        "mask": "kg:1200"
      },
      {
        "uri": "wd:Q3514303",
        "mask": "kg:3458"
      }
    ],
    "masked": "Translate the question “Is Takenori Sentō's spouse a Japanese cinematographer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3620 is Japan\nkg:6852 is spouse\nkg:7805 is cinematographer\nkg:8642 is country of citizenship\nkg:6350 is occupation\nkg:3458 is Takenori Sentō"
  },
  {
    "CFQquestionIdx": 153523,
    "expectedResponse": [
      "United Nations"
    ],
    "questionPatternModEntities": "What employer of a film director did M0 found",
    "questionPatternModEntities_he": "איזה מעסיק של במאי קולנוע מצא M0",
    "questionPatternModEntities_kn": "M0 ಯಾವ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರ ಉದ್ಯೋಗದಾತರನ್ನು ಕಂಡುಕೊಂಡರು",
    "questionPatternModEntities_zh": "M0找到了哪个电影导演的雇主？",
    "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What employer of a film director did [Canada] found",
    "questionWithBrackets_he": "איזה מעסיק של במאי קולנוע מצא [קנדה]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರ ಯಾವ ಉದ್ಯೋಗದಾತರು [ಕೆನಡಾ] ಕಂಡುಕೊಂಡರು",
    "questionWithBrackets_zh": "[加拿大] 找到了哪个电影导演的雇主？",
    "recursionDepth": 19,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x1 wdt:P108 ?x0 . ?x0 wdt:P112 wd:Q16 . ?x1 wdt:P106 wd:Q2526255 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x1 wdt:P108 ?x0 .\n?x0 wdt:P112 M0 .\n?x1 wdt:P106 wd:Q2526255 }",
    "id": 153523,
    "split": "gold_test",
    "en": "What employer of a film director did Canada found",
    "results": [
      [
        "wd:Q1065"
      ]
    ]
  },
  {
    "CFQquestionIdx": 185751,
    "expectedResponse": [
      "I Am Because We Are"
    ],
    "questionPatternModEntities": "What was written by and produced by M0",
    "questionPatternModEntities_he": "מה נכתב והפיק על ידי M0",
    "questionPatternModEntities_kn": "M0 ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 写了什么，由 M0 制作了什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written by and produced by [Madonna]",
    "questionWithBrackets_he": "מה נכתב על ידי והפיק [מדונה]",
    "questionWithBrackets_kn": "[ಮಡೋನಾ] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是由[麦当娜]编写和制作的？",
    "recursionDepth": 19,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P162|wdt:P272 wd:Q1744 . ?x0 wdt:P58 wd:Q1744 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 185751,
    "split": "gold_test",
    "en": "What was written by and produced by Madonna",
    "optimized": "Which works were both written and produced by Madonna?",
    "results": [
      [
        "wd:Q15847069"
      ],
      [
        "wd:Q2662913"
      ]
    ],
    "direct": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is producer\nwd:Q1744 is Madonna\nwdt:P272 is production company\nwdt:P58 is screenwriter",
    "masks": [
      {
        "uri": "wdt:P162",
        "mask": "kg:3610"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2777"
      },
      {
        "uri": "wd:Q1744",
        "mask": "kg:3786"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1354"
      },
      {
        "uri": "wd:Q1744",
        "mask": "kg:7549"
      }
    ],
    "masked": "Translate the question “Which works were both written and produced by Madonna?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3610 is producer\nkg:7549 is Madonna\nkg:2777 is production company\nkg:1354 is screenwriter"
  },
  {
    "CFQquestionIdx": 94691,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a costume designer 's employer a producer of M0",
    "questionPatternModEntities_he": "האם מעסיקו של מעצב תלבושות היה מפיק של M0",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಉದ್ಯೋಗದಾತರು M0 ನ ನಿರ್ಮಾಪಕರೇ",
    "questionPatternModEntities_zh": "服装设计师的雇主是 M0 的制作人吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a costume designer 's employer a producer of [Joe's Bed-Stuy Barbershop: We Cut Heads]",
    "questionWithBrackets_he": "האם מעסיקו של מעצב תלבושות היה מפיק של [מספרה של ג&#39;ו מיט-סטוי: We Cut Heads]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಉದ್ಯೋಗದಾತರು [ಜೋಸ್ ಬೆಡ್-ಸ್ಟೂಯ್ ಬಾರ್ಬರ್‌ಶಾಪ್: ವಿ ಕಟ್ ಹೆಡ್ಸ್] ನಿರ್ಮಾಪಕರೇ",
    "questionWithBrackets_zh": "服装设计师的雇主是 [Joe&#39;s Bed-Stuy Barbershop: We Cut Heads] 的制作人吗？",
    "recursionDepth": 20,
    "sparql": "ASK WHERE { ?x1 wdt:P108 ?x0 . wd:Q1141467 wdt:P272 ?x0 . ?x1 wdt:P106 wd:Q1323191 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x1 wdt:P108 ?x0 .\nM0 wdt:P272 ?x0 .\n?x1 wdt:P106 wd:Q1323191 }",
    "id": 94691,
    "split": "gold_test",
    "en": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads",
    "results": [
      true
    ]
  },
  {
    "CFQquestionIdx": 94779,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer 's sibling a spouse of M0",
    "questionPatternModEntities_he": "האם אח של מעצבת תלבושות היה בן זוג של M0",
    "questionPatternModEntities_kn": "ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರ ಒಡಹುಟ್ಟಿದವರು M0 ಅವರ ಸಂಗಾತಿಯೇ",
    "questionPatternModEntities_zh": "服装设计师的兄弟姐妹是M0的配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a costume designer 's sibling a spouse of [Nadia Cassini]",
    "questionWithBrackets_he": "האם אח של מעצבת תלבושות היה בן זוג של [נדיה קאסיני]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಒಡಹುಟ್ಟಿದವರು [ನಾಡಿಯಾ ಕ್ಯಾಸಿನಿ] ಅವರ ಸಂಗಾತಿಯೇ",
    "questionWithBrackets_zh": "服装设计师的兄弟姐妹是 [Nadia Cassini] 的配偶吗？",
    "recursionDepth": 20,
    "sparql": "ASK WHERE { ?x0 wdt:P3373 ?x1 . ?x0 wdt:P26 wd:Q461354 . ?x1 wdt:P106 wd:Q1323191 . FILTER ( ?x0 != ?x1 ) . FILTER ( ?x0 != wd:Q461354 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 M0 .\n?x1 wdt:P106 wd:Q1323191 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "id": 94779,
    "split": "gold_test",
    "en": "Was a costume designer 's sibling a spouse of Nadia Cassini",
    "optimized": "Did a sibling of a costume designer marry Nadia Cassini?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P3373 is sibling\nwd:Q1323191 is costume designer\nwd:Q461354 is Nadia Cassini\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P3373",
        "mask": "kg:4029"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:8992"
      },
      {
        "uri": "wd:Q461354",
        "mask": "kg:0226"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:1730"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:3578"
      },
      {
        "uri": "wd:Q461354",
        "mask": "kg:3091"
      }
    ],
    "masked": "Translate the question “Did a sibling of a costume designer marry Nadia Cassini?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8992 is spouse\nkg:4029 is sibling\nkg:3578 is costume designer\nkg:3091 is Nadia Cassini\nkg:1730 is occupation"
  },
  {
    "CFQquestionIdx": 153331,
    "expectedResponse": [
      "Audi"
    ],
    "questionPatternModEntities": "What employer of M0 was a company 's parent",
    "questionPatternModEntities_he": "איזה מעסיק של M0 היה הורה של חברה",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು ಕಂಪನಿಯ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个雇主是公司的母公司？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Christian Abt] was a company 's parent",
    "questionWithBrackets_he": "איזה מעסיק של [Christian Abt] היה הורה של חברה",
    "questionWithBrackets_kn": "[ಕ್ರಿಶ್ಚಿಯನ್ ಆಬ್ಟ್] ಯಾವ ಉದ್ಯೋಗದಾತರು ಕಂಪನಿಯ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Christian Abt] 的哪个雇主是公司的母公司？",
    "recursionDepth": 20,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q67134 wdt:P108 ?x0 . ?x0 wdt:P40|wdt:P355 ?x1 . ?x1 wdt:P31 wd:Q4830453 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P108 ?x0 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P31 wd:Q4830453 }",
    "id": 153331,
    "split": "gold_test",
    "en": "What employer of Christian Abt was a company 's parent",
    "optimized": "Which parent company employed Christian Abt?",
    "results": [
      [
        "wd:Q23317"
      ]
    ],
    "direct": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P355 is has subsidiary\nwdt:P31 is instance of\nwd:Q67134 is Christian Abt\nwdt:P40 is child\nwd:Q4830453 is business",
    "masks": [
      {
        "uri": "wd:Q67134",
        "mask": "kg:5190"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3218"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:8237"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:2352"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:4418"
      },
      {
        "uri": "wd:Q4830453",
        "mask": "kg:2729"
      }
    ],
    "masked": "Translate the question “Which parent company employed Christian Abt?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is employer\nkg:2352 is has subsidiary\nkg:4418 is instance of\nkg:5190 is Christian Abt\nkg:8237 is child\nkg:2729 is business"
  },
  {
    "CFQquestionIdx": 153446,
    "expectedResponse": [
      "Arte"
    ],
    "questionPatternModEntities": "What employer of M0 was a film 's distributor",
    "questionPatternModEntities_he": "איזה מעסיק של M0 היה מפיץ סרט",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು ಚಲನಚಿತ್ರದ ವಿತರಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个雇主是电影发行商？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Claire Doutriaux] was a film 's distributor",
    "questionWithBrackets_he": "איזה מעסיק של [קלייר דוטריאו] היה מפיץ סרט",
    "questionWithBrackets_kn": "[ಕ್ಲೇರ್ ಡೌಟ್ರಿಯಾಕ್ಸ್] ಯಾವ ಉದ್ಯೋಗದಾತರು ಚಲನಚಿತ್ರದ ವಿತರಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Claire Doutriaux] 的哪个雇主是电影的发行商？",
    "recursionDepth": 20,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1094792 wdt:P108 ?x0 . ?x1 wdt:P750 ?x0 . ?x1 wdt:P31 wd:Q11424 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P108 ?x0 .\n?x1 wdt:P750 ?x0 .\n?x1 wdt:P31 wd:Q11424 }",
    "id": 153446,
    "split": "gold_test",
    "en": "What employer of Claire Doutriaux was a film 's distributor",
    "optimized": "Which film distributor company has Claire Doutriaux worked for?",
    "results": [
      [
        "wd:Q8073"
      ]
    ],
    "direct": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Claire Doutriaux\nwdt:P108 is employer\nwdt:P750 is distributed by\nwd:Q11424 is film\nwdt:P31 is instance of",
    "masks": [
      {
        "uri": "wd:Q1094792",
        "mask": "kg:0153"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1212"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:9508"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:2896"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:2961"
      }
    ],
    "masked": "Translate the question “Which film distributor company has Claire Doutriaux worked for?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0153 is Claire Doutriaux\nkg:1212 is employer\nkg:9508 is distributed by\nkg:2961 is film\nkg:2896 is instance of"
  },
  {
    "CFQquestionIdx": 78404,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's producer and distributor founded by M0",
    "questionPatternModEntities_he": "האם המפיק והמפיץ של M1 הוקם על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ನಿರ್ಮಾಪಕ ಮತ್ತು ವಿತರಕರು M0 ನಿಂದ ಸ್ಥಾಪಿಸಲ್ಪಟ್ಟಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1的生产商和分销商是M0创立的吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [The Magic Flute] 's producer and distributor founded by [Sweden]",
    "questionWithBrackets_he": "האם המפיק והמפיץ של [חליל הקסם] הוקם על ידי [שבדיה]",
    "questionWithBrackets_kn": "[ದಿ ಮ್ಯಾಜಿಕ್ ಕೊಳಲು] ನಿರ್ಮಾಪಕರು ಮತ್ತು ವಿತರಕರು [ಸ್ವೀಡನ್] ಸ್ಥಾಪಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[魔笛]的制作人和发行人是[瑞典]创办的吗？",
    "recursionDepth": 21,
    "sparql": "ASK WHERE { wd:Q1651543 wdt:P750 ?x0 . wd:Q1651543 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q34 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 78404,
    "split": "gold_test",
    "en": "Was The Magic Flute 's producer and distributor founded by Sweden",
    "optimized": "Was the producer and distributor of The Magic Flute founded in Sweden?",
    "results": [
      true
    ],
    "direct": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q1651543",
        "mask": "kg:0611"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:2381"
      },
      {
        "uri": "wd:Q1651543",
        "mask": "kg:4138"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:1692"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:7764"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:6323"
      }
    ],
    "masked": "Translate the question “Was the producer and distributor of The Magic Flute founded in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7764 is founded by\nkg:2381 is distributed by\nkg:6323 is Sweden\nkg:4138 is The Magic Flute\nkg:1692 is production company"
  },
  {
    "CFQquestionIdx": 94044,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer a Swedish spouse of M2",
    "questionPatternModEntities_he": "האם מעצב תלבושות היה בן זוג שבדי של M2",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ M2 ರ ಸ್ವೀಡಿಷ್ ಸಂಗಾತಿಯೇ",
    "questionPatternModEntities_zh": "服装设计师是 M2 的瑞典配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a costume designer a Swedish spouse of [Mark Sylwan]",
    "questionWithBrackets_he": "האם מעצב תלבושות היה בן זוג שוודי של [מארק סילוואן]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ಮಾರ್ಕ್ ಸಿಲ್ವಾನ್] ಅವರ ಸ್ವೀಡಿಷ್ ಸಂಗಾತಿಯಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "服装设计师是 [Mark Sylwan] 的瑞典配偶吗？",
    "recursionDepth": 21,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . ?x0 wdt:P27 wd:Q34 . ?x0 wdt:P26 wd:Q6200573 . FILTER ( ?x0 != wd:Q6200573 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M2 )\n}",
    "id": 94044,
    "split": "gold_test",
    "en": "Was a costume designer a Swedish spouse of Mark Sylwan",
    "optimized": "Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P27 is country of citizenship\nwd:Q1323191 is costume designer\nwd:Q34 is Sweden\nwd:Q6200573 is Mark Sylwan\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:9940"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:2334"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:6742"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:7953"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:7345"
      },
      {
        "uri": "wd:Q6200573",
        "mask": "kg:9538"
      },
      {
        "uri": "wd:Q6200573",
        "mask": "kg:2873"
      }
    ],
    "masked": "Translate the question “Did the spouse of Mark Sylwan, who is from Sweden, work as a costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7345 is spouse\nkg:6742 is country of citizenship\nkg:2334 is costume designer\nkg:7953 is Sweden\nkg:2873 is Mark Sylwan\nkg:9940 is occupation"
  },
  {
    "CFQquestionIdx": 165870,
    "expectedResponse": [
      "Laodice IV"
    ],
    "questionPatternModEntities": "What spouse and sibling of M0 married M1",
    "questionPatternModEntities_he": "איזה בן זוג ואח של M0 התחתנו עם M1",
    "questionPatternModEntities_kn": "M0 ರ ಯಾವ ಸಂಗಾತಿ ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು M1 ಅನ್ನು ಮದುವೆಯಾದರು",
    "questionPatternModEntities_zh": "M0 的哪个配偶和兄弟姐妹嫁给了 M1？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What spouse and sibling of [Antiochus IV Epiphanes] married [Antiochus]",
    "questionWithBrackets_he": "איזה בן זוג ואחיו של [אנטיוכוס הרביעי אפיפנס] התחתנו עם [אנטיוכוס]",
    "questionWithBrackets_kn": "[ಆಂಟಿಯೋಕಸ್ IV ಎಪಿಫೇನ್ಸ್] ಯಾವ ಸಂಗಾತಿ ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು [ಆಂಟಿಯೋಕಸ್] ವಿವಾಹವಾದರು",
    "questionWithBrackets_zh": "[Antiochus IV Epiphanes] 的哪位配偶和兄弟姐妹嫁给了 [Antiochus]？",
    "recursionDepth": 21,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P3373 wd:Q3356 . ?x0 wdt:P26 wd:Q3356 . ?x0 wdt:P26 wd:Q2045778 . FILTER ( ?x0 != wd:Q3356 ) . FILTER ( ?x0 != wd:Q3356 ) . FILTER ( ?x0 != wd:Q2045778 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 M0 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
    "id": 165870,
    "split": "gold_test",
    "en": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus",
    "optimized": "Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?",
    "results": [
      [
        "wd:Q451082"
      ]
    ],
    "direct": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwd:Q3356 is Antiochus IV Epiphanes\nwdt:P3373 is sibling\nwd:Q2045778 is Antiochus",
    "masks": [
      {
        "uri": "wdt:P3373",
        "mask": "kg:2140"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:7992"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:6019"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:4933"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9111"
      },
      {
        "uri": "wd:Q2045778",
        "mask": "kg:6010"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:2188"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:0966"
      },
      {
        "uri": "wd:Q2045778",
        "mask": "kg:4202"
      }
    ],
    "masked": "Translate the question “Who, among the spouse and sibling of Antiochus IV Epiphanes, married Antiochus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9111 is spouse\nkg:0966 is Antiochus IV Epiphanes\nkg:2140 is sibling\nkg:4202 is Antiochus"
  },
  {
    "CFQquestionIdx": 198562,
    "expectedResponse": [
      "Sveriges Radio"
    ],
    "questionPatternModEntities": "Which distributor and producer of M1 did M0 found",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M1 מצא M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು M0 ಅನ್ನು ಕಂಡುಕೊಂಡಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 找到了 M1 的哪个经销商和生产商？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "Which distributor and producer of [The Magic Flute] did [Sweden] found",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [חליל הקסם] מצאה [שבדיה]",
    "questionWithBrackets_kn": "[ಸ್ವೀಡನ್] ಯಾವ ವಿತರಕರು ಮತ್ತು [ದಿ ಮ್ಯಾಜಿಕ್ ಕೊಳಲು] ನಿರ್ಮಾಪಕರು ಕಂಡುಕೊಂಡರು",
    "questionWithBrackets_zh": "[瑞典] 找到了[魔笛] 的哪家经销商和生产商？",
    "recursionDepth": 21,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1651543 wdt:P750 ?x0 . wd:Q1651543 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q34 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 198562,
    "split": "gold_test",
    "en": "Which distributor and producer of The Magic Flute did Sweden found",
    "optimized": "What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?",
    "results": [
      [
        "wd:Q1543058"
      ]
    ],
    "direct": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q1651543",
        "mask": "kg:1544"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:2736"
      },
      {
        "uri": "wd:Q1651543",
        "mask": "kg:6852"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0937"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:2428"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:2665"
      }
    ],
    "masked": "Translate the question “What is the name of the distributor and producer of 'The Magic Flute' that was established in Sweden?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2428 is founded by\nkg:2736 is distributed by\nkg:2665 is Sweden\nkg:6852 is The Magic Flute\nkg:0937 is production company"
  },
  {
    "CFQquestionIdx": 46428,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M1 's founder a Dutch sibling of M0",
    "questionPatternModEntities_he": "האם מייסד M1 היה אח הולנדי של M0",
    "questionPatternModEntities_kn": "M1 ನ ಸ್ಥಾಪಕರು M0 ನ ಡಚ್ ಸಹೋದರರೇ",
    "questionPatternModEntities_zh": "M1的创始人是M0的荷兰兄弟吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was [World Wide Fund for Nature] 's founder a Dutch sibling of [Prince Aschwin of Lippe-Biesterfeld]",
    "questionWithBrackets_he": "האם מייסד [הקרן העולמית לטבע] היה אח הולנדי של [הנסיך אשווין מליפה-ביסטרפלד]",
    "questionWithBrackets_kn": "[ವರ್ಲ್ಡ್ ವೈಡ್ ಫಂಡ್ ಫಾರ್ ನೇಚರ್] ಸ್ಥಾಪಕರು [ಲಿಪ್ಪೆ-ಬೈಸ್ಟರ್‌ಫೆಲ್ಡ್‌ನ ಪ್ರಿನ್ಸ್ ಆಶ್ವಿನ್] ಅವರ ಡಚ್ ಸಹೋದರರೇ",
    "questionWithBrackets_zh": "[世界自然基金会]的创始人是[Lippe-Biesterfeld的阿施温王子]的荷兰兄弟姐妹吗？",
    "recursionDepth": 22,
    "sparql": "ASK WHERE { wd:Q117892 wdt:P112 ?x0 . ?x0 wdt:P27 wd:Q29999 . ?x0 wdt:P3373 wd:Q2336212 . FILTER ( ?x0 != wd:Q2336212 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM1 wdt:P112 ?x0 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 46428,
    "split": "gold_test",
    "en": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld",
    "optimized": "Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2336212 is Prince Aschwin of Lippe-Biesterfeld\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q117892 is World Wide Fund for Nature\nwdt:P112 is founded by\nwd:Q29999 is Kingdom of the Netherlands",
    "masks": [
      {
        "uri": "wd:Q117892",
        "mask": "kg:9039"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:6101"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:3182"
      },
      {
        "uri": "wd:Q29999",
        "mask": "kg:0127"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:9358"
      },
      {
        "uri": "wd:Q2336212",
        "mask": "kg:4603"
      },
      {
        "uri": "wd:Q2336212",
        "mask": "kg:8984"
      }
    ],
    "masked": "Translate the question “Did a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld found the World Wide Fund for Nature?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8984 is Prince Aschwin of Lippe-Biesterfeld\nkg:9358 is sibling\nkg:3182 is country of citizenship\nkg:9039 is World Wide Fund for Nature\nkg:6101 is founded by\nkg:0127 is Kingdom of the Netherlands"
  },
  {
    "CFQquestionIdx": 90036,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a German sibling of M0 M1 's employee",
    "questionPatternModEntities_he": "האם היה אח גרמני של העובד של M0 M1",
    "questionPatternModEntities_kn": "M0 M1 ನ ಉದ್ಯೋಗಿಯ ಜರ್ಮನ್ ಒಡಹುಟ್ಟಿದವರು",
    "questionPatternModEntities_zh": "是 M0 M1 雇员的德国兄弟姐妹吗？",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a German sibling of [Dieter Hoeneß] [FC Bayern Munich] 's employee",
    "questionWithBrackets_he": "מהו אח גרמני של העובד של [Dieter Hoeneß] [FC באיירן מינכן]",
    "questionWithBrackets_kn": "[Dieter Hoeneß] [FC ಬೇಯರ್ನ್ ಮ್ಯೂನಿಚ್] ನ ಉದ್ಯೋಗಿಯ ಜರ್ಮನ್ ಒಡಹುಟ್ಟಿದವರು ಏನು",
    "questionWithBrackets_zh": "[Dieter Hoeneß] [FC Bayern Munich] 的雇员的德国兄弟姐妹是什么？",
    "recursionDepth": 22,
    "sparql": "ASK WHERE { ?x0 wdt:P108 wd:Q15789 . ?x0 wdt:P27 wd:Q183 . ?x0 wdt:P3373 wd:Q60414 . FILTER ( ?x0 != wd:Q60414 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P108 M1 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 90036,
    "split": "gold_test",
    "en": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee",
    "optimized": "Did Dieter Hoeneß's German sibling work for FC Bayern Munich?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q60414 is Dieter Hoeneß\nwdt:P3373 is sibling\nwd:Q15789 is FC Bayern Munich\nwdt:P27 is country of citizenship\nwd:Q183 is Germany",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:1789"
      },
      {
        "uri": "wd:Q15789",
        "mask": "kg:3247"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:9584"
      },
      {
        "uri": "wd:Q183",
        "mask": "kg:1462"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:6028"
      },
      {
        "uri": "wd:Q60414",
        "mask": "kg:8928"
      },
      {
        "uri": "wd:Q60414",
        "mask": "kg:1887"
      }
    ],
    "masked": "Translate the question “Did Dieter Hoeneß's German sibling work for FC Bayern Munich?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1789 is employer\nkg:1887 is Dieter Hoeneß\nkg:6028 is sibling\nkg:3247 is FC Bayern Munich\nkg:9584 is country of citizenship\nkg:1462 is Germany"
  },
  {
    "CFQquestionIdx": 152348,
    "expectedResponse": [
      "United Artists Corporation"
    ],
    "questionPatternModEntities": "What distributor and producer of M1 was founded by M0",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M1 הוקם על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು M0 ನಿಂದ ಸ್ಥಾಪಿಸಲ್ಪಟ್ಟರು",
    "questionPatternModEntities_zh": "M0创立了M1的哪家经销商和生产商？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What distributor and producer of [Drums of Love] was founded by [Charlie Chaplin]",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [תופים של אהבה] הוקם על ידי [צ&#39;רלי צ&#39;פלין]",
    "questionWithBrackets_kn": "[ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಸ್ಥಾಪಿಸಿದ [ಡ್ರಮ್ಸ್ ಆಫ್ ಲವ್] ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು",
    "questionWithBrackets_zh": "[查理卓别林]创立了[爱之鼓]的哪家发行商和制作人？",
    "recursionDepth": 22,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q3715556 wdt:P750 ?x0 . wd:Q3715556 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q882 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 152348,
    "split": "gold_test",
    "en": "What distributor and producer of Drums of Love was founded by Charlie Chaplin",
    "optimized": "Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?",
    "results": [
      [
        "wd:Q219400"
      ]
    ],
    "direct": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Drums of Love\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwdt:P112 is founded by\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q3715556",
        "mask": "kg:7261"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:4037"
      },
      {
        "uri": "wd:Q3715556",
        "mask": "kg:3603"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9985"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:6240"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:3206"
      }
    ],
    "masked": "Translate the question “Which company, founded by Charlie Chaplin, distributed and produced Drums of Love?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3603 is Drums of Love\nkg:3206 is Charlie Chaplin\nkg:4037 is distributed by\nkg:6240 is founded by\nkg:9985 is production company"
  },
  {
    "CFQquestionIdx": 184773,
    "expectedResponse": [
      "Pulse"
    ],
    "questionPatternModEntities": "What was written by M0 and produced by M1",
    "questionPatternModEntities_he": "מה נכתב על ידי M0 והפיק על ידי M1",
    "questionPatternModEntities_kn": "M0 ಅವರು ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು M1 ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "什么是M0写的，M1生产的？",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written by [Vince Gilligan] and produced by [Bob Weinstein]",
    "questionWithBrackets_he": "מה נכתב על ידי [וינס גיליגן] והפיק [בוב ויינשטיין]",
    "questionWithBrackets_kn": "[ವಿನ್ಸ್ ಗಿಲ್ಲಿಗನ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು [ಬಾಬ್ ವೈನ್ಸ್ಟೈನ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是[文斯·吉利根]写的，[鲍勃·韦恩斯坦]制作的？",
    "recursionDepth": 22,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P162|wdt:P272 wd:Q888311 . ?x0 wdt:P58 wd:Q4500 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P58 M0\n}",
    "id": 184773,
    "split": "gold_test",
    "en": "What was written by Vince Gilligan and produced by Bob Weinstein",
    "optimized": "Which works were written by Vince Gilligan and produced by Bob Weinstein?",
    "results": [
      [
        "wd:Q744911"
      ]
    ],
    "direct": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q888311 is Bob Weinstein\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P162",
        "mask": "kg:1093"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6307"
      },
      {
        "uri": "wd:Q888311",
        "mask": "kg:4570"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8692"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:0278"
      }
    ],
    "masked": "Translate the question “Which works were written by Vince Gilligan and produced by Bob Weinstein?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is screenwriter\nkg:0278 is Vince Gilligan\nkg:1093 is producer\nkg:4570 is Bob Weinstein\nkg:6307 is production company"
  },
  {
    "CFQquestionIdx": 93828,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a company 's founder M0 's French sibling",
    "questionPatternModEntities_he": "האם M0 מייסד חברה היה אח צרפתי",
    "questionPatternModEntities_kn": "ಕಂಪನಿಯ ಸಂಸ್ಥಾಪಕ M0 ನ ಫ್ರೆಂಚ್ ಸಹೋದರರೇ",
    "questionPatternModEntities_zh": "公司创始人 M0 是法国兄弟吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a company 's founder [Alphonse-Louis du Plessis de Richelieu] 's French sibling",
    "questionWithBrackets_he": "האם מייסד חברה [אלפונס-לואי דו פלסיס דה רישליו] היה אח של צרפתי",
    "questionWithBrackets_kn": "ಕಂಪನಿಯ ಸಂಸ್ಥಾಪಕ [ಅಲ್ಫೋನ್ಸ್-ಲೂಯಿಸ್ ಡು ಪ್ಲೆಸಿಸ್ ಡಿ ರಿಚೆಲಿಯು] ಅವರ ಫ್ರೆಂಚ್ ಒಡಹುಟ್ಟಿದವರು",
    "questionWithBrackets_zh": "公司创始人 [Alphonse-Louis du Plessis de Richelieu] 是法国兄弟吗？",
    "recursionDepth": 23,
    "sparql": "ASK WHERE { ?x1 wdt:P112 ?x0 . ?x0 wdt:P27 wd:Q142 . ?x0 wdt:P3373 wd:Q1079409 . ?x1 wdt:P31 wd:Q4830453 . FILTER ( ?x0 != wd:Q1079409 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x1 wdt:P112 ?x0 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 M0 .\n?x1 wdt:P31 wd:Q4830453 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 93828,
    "split": "gold_test",
    "en": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling",
    "optimized": "Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?",
    "results": [
      false
    ],
    "direct": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079409 is Alphonse-Louis du Plessis de Richelieu\nwd:Q142 is France\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwd:Q4830453 is business\nwdt:P112 is founded by",
    "masks": [
      {
        "uri": "wdt:P112",
        "mask": "kg:7798"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:7731"
      },
      {
        "uri": "wd:Q142",
        "mask": "kg:3096"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:8395"
      },
      {
        "uri": "wd:Q1079409",
        "mask": "kg:1827"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:7995"
      },
      {
        "uri": "wd:Q4830453",
        "mask": "kg:8661"
      },
      {
        "uri": "wd:Q1079409",
        "mask": "kg:5754"
      }
    ],
    "masked": "Translate the question “Did Alphonse-Louis du Plessis de Richelieu, a company founder, have a sibling from France?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5754 is Alphonse-Louis du Plessis de Richelieu\nkg:3096 is France\nkg:7995 is instance of\nkg:8395 is sibling\nkg:7731 is country of citizenship\nkg:8661 is business\nkg:7798 is founded by"
  },
  {
    "CFQquestionIdx": 65034,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced by M2 and written by M1",
    "questionPatternModEntities_he": "האם M0 הופק על ידי M2 ונכתב על ידי M1",
    "questionPatternModEntities_kn": "M2 ನಿಂದ M0 ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ ಮತ್ತು M1 ನಿಂದ ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0是M2生产的，M1写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [Michael Jackson's Ghosts] produced by [Stan Winston] and written by [Michael Jackson]",
    "questionWithBrackets_he": "האם [הרוחות של מייקל ג&#39;קסון] הופק על ידי [סטן ווינסטון] ונכתב על ידי [מייקל ג&#39;קסון]",
    "questionWithBrackets_kn": "[ಮೈಕೆಲ್ ಜಾಕ್ಸನ್ ಅವರ ಘೋಸ್ಟ್ಸ್] ಅನ್ನು [ಸ್ಟಾನ್ ವಿನ್‌ಸ್ಟನ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು [ಮೈಕೆಲ್ ಜಾಕ್ಸನ್] ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[迈克尔杰克逊的鬼魂]是由[斯坦温斯顿]制作并由[迈克尔杰克逊]编写的吗？",
    "recursionDepth": 23,
    "sparql": "ASK WHERE { wd:Q44477 wdt:P162|wdt:P272 wd:Q320211 . wd:Q44477 wdt:P58 wd:Q2831 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P58 M1\n}",
    "id": 65034,
    "split": "gold_test",
    "en": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson",
    "optimized": "Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwd:Q320211 is Stan Winston\nwdt:P162 is producer\nwd:Q2831 is Michael Jackson\nwd:Q44477 is Michael Jackson's Ghosts\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q44477",
        "mask": "kg:0965"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0935"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9519"
      },
      {
        "uri": "wd:Q320211",
        "mask": "kg:7229"
      },
      {
        "uri": "wd:Q44477",
        "mask": "kg:8034"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4319"
      },
      {
        "uri": "wd:Q2831",
        "mask": "kg:0963"
      }
    ],
    "masked": "Translate the question “Did Stan Winston produce, and Michael Jackson write, the film \"Ghosts\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4319 is screenwriter\nkg:7229 is Stan Winston\nkg:0935 is producer\nkg:0963 is Michael Jackson\nkg:8034 is Michael Jackson's Ghosts\nkg:9519 is production company"
  },
  {
    "CFQquestionIdx": 176408,
    "expectedResponse": [
      "Gremlins",
      "The Goonies"
    ],
    "questionPatternModEntities": "What was executive produced by M0 and written by M1",
    "questionPatternModEntities_he": "מה הופק מנהל על ידי M0 ונכתב על ידי M1",
    "questionPatternModEntities_kn": "M0 ನಿಂದ ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಏನನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು M1 ನಿಂದ ಬರೆಯಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 的执行程序是什么，M1 写的是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was executive produced by [Steven Spielberg] and written by [Chris Columbus]",
    "questionWithBrackets_he": "מה הופק על ידי [סטיבן ספילברג] ונכתב על ידי [כריס קולומבוס]",
    "questionWithBrackets_kn": "[ಸ್ಟೀವನ್ ಸ್ಪೀಲ್ಬರ್ಗ್] ಮತ್ತು [ಕ್ರಿಸ್ ಕೊಲಂಬಸ್] ಬರೆದ ಕಾರ್ಯನಿರ್ವಾಹಕ ಏನು",
    "questionWithBrackets_zh": "[史蒂文·斯皮尔伯格] 出品、[克里斯·哥伦布] 编剧的是什么？",
    "recursionDepth": 23,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1431 wd:Q8877 . ?x0 wdt:P58 wd:Q75079 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 M0 .\n?x0 wdt:P58 M1\n}",
    "id": 176408,
    "split": "gold_test",
    "en": "What was executive produced by Steven Spielberg and written by Chris Columbus",
    "optimized": "Which project was executive produced by Steven Spielberg and written by Chris Columbus?",
    "results": [
      [
        "wd:Q636043"
      ],
      [
        "wd:Q241958"
      ]
    ],
    "direct": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q8877 is Steven Spielberg\nwdt:P1431 is executive producer\nwd:Q75079 is Chris Columbus\nwdt:P58 is screenwriter",
    "masks": [
      {
        "uri": "wdt:P1431",
        "mask": "kg:6915"
      },
      {
        "uri": "wd:Q8877",
        "mask": "kg:6102"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9189"
      },
      {
        "uri": "wd:Q75079",
        "mask": "kg:3512"
      }
    ],
    "masked": "Translate the question “Which project was executive produced by Steven Spielberg and written by Chris Columbus?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6102 is Steven Spielberg\nkg:6915 is executive producer\nkg:3512 is Chris Columbus\nkg:9189 is screenwriter"
  },
  {
    "CFQquestionIdx": 198593,
    "expectedResponse": [
      "Sveriges Radio"
    ],
    "questionPatternModEntities": "Which distributor and producer of M1 was founded by M0",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M1 הוקם על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು M0 ನಿಂದ ಸ್ಥಾಪಿಸಲ್ಪಟ್ಟರು",
    "questionPatternModEntities_zh": "M1 的哪家经销商和生产商是 M0 创立的？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Which distributor and producer of [The Magic Flute] was founded by [Sweden]",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [חליל הקסם] הוקם על ידי [שבדיה]",
    "questionWithBrackets_kn": "[ಸ್ವೀಡನ್] ಸ್ಥಾಪಿಸಿದ [ದಿ ಮ್ಯಾಜಿಕ್ ಕೊಳಲು] ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು",
    "questionWithBrackets_zh": "[The Magic Flute] 的哪家分销商和生产商是 [瑞典] 创立的？",
    "recursionDepth": 23,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1651543 wdt:P750 ?x0 . wd:Q1651543 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q34 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 198593,
    "split": "gold_test",
    "en": "Which distributor and producer of The Magic Flute was founded by Sweden",
    "optimized": "Which Swedish company both produced and distributed The Magic Flute?",
    "results": [
      [
        "wd:Q1543058"
      ]
    ],
    "direct": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is founded by\nwdt:P750 is distributed by\nwd:Q34 is Sweden\nwd:Q1651543 is The Magic Flute\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q1651543",
        "mask": "kg:1907"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:5954"
      },
      {
        "uri": "wd:Q1651543",
        "mask": "kg:6963"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4053"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:5731"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:6379"
      }
    ],
    "masked": "Translate the question “Which Swedish company both produced and distributed The Magic Flute?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5731 is founded by\nkg:5954 is distributed by\nkg:6379 is Sweden\nkg:6963 is The Magic Flute\nkg:4053 is production company"
  },
  {
    "CFQquestionIdx": 15858,
    "expectedResponse": false,
    "questionPatternModEntities": "Did M0 's parent , spouse , and sibling marry M1",
    "questionPatternModEntities_he": "האם ההורה, בן הזוג והאח של M0 התחתנו עם M1",
    "questionPatternModEntities_kn": "M0 ರ ಪೋಷಕರು, ಸಂಗಾತಿಗಳು ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು M1 ರನ್ನು ಮದುವೆಯಾದರೇ",
    "questionPatternModEntities_zh": "M0 的父母、配偶和兄弟姐妹是否与 M1 结婚？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did [Henutmire] 's parent , spouse , and sibling marry [Nefertarilllala]",
    "questionWithBrackets_he": "האם ההורה, בן הזוג ואחיו של [הנוטמיר] התחתנו עם [Nefertarilllala]",
    "questionWithBrackets_kn": "[ಹೆನುಟ್‌ಮೈರ್] ಅವರ ಪೋಷಕರು, ಸಂಗಾತಿಗಳು ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು [ನೆಫೆರ್ಟಾರಿಲ್ಲಾಲಾ] ಅವರನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Henutmire] 的父母、配偶和兄弟姐妹与 [Nefertarillalla] 结婚了吗？",
    "recursionDepth": 24,
    "sparql": "ASK WHERE { ?x0 wdt:P40|wdt:P355 wd:Q443473 . ?x0 wdt:P3373 wd:Q443473 . ?x0 wdt:P26 wd:Q443473 . ?x0 wdt:P26 wd:Q210535 . FILTER ( ?x0 != wd:Q443473 ) . FILTER ( ?x0 != wd:Q443473 ) . FILTER ( ?x0 != wd:Q210535 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P40|wdt:P355 M0 .\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 M0 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
    "id": 15858,
    "split": "gold_test",
    "en": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala",
    "optimized": "Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P26 is spouse\nwdt:P40 is child\nwdt:P355 is has subsidiary\nwdt:P3373 is sibling\nwd:Q210535 is Nefertari\nwd:Q443473 is Henutmire",
    "masks": [
      {
        "uri": "wdt:P40",
        "mask": "kg:7411"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:1823"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:1878"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:0332"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:9281"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:8447"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:3470"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1451"
      },
      {
        "uri": "wd:Q210535",
        "mask": "kg:5054"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:3145"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:3170"
      },
      {
        "uri": "wd:Q210535",
        "mask": "kg:0454"
      }
    ],
    "masked": "Translate the question “Did Henutmire's parents, spouse, and siblings marry Nefertarilllala?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1451 is spouse\nkg:7411 is child\nkg:1823 is has subsidiary\nkg:0332 is sibling\nkg:0454 is Nefertari\nkg:3170 is Henutmire"
  },
  {
    "CFQquestionIdx": 94018,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer M3 's Canadian male spouse",
    "questionPatternModEntities_he": "האם היה בן הזוג הקנדי של מעצבת תלבושות M3",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ M3 ರ ಕೆನಡಾದ ಪುರುಷ ಸಂಗಾತಿಯೇ",
    "questionPatternModEntities_zh": "是服装设计师M3的加拿大男性配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer [Jessica Drake] 's Canadian male spouse",
    "questionWithBrackets_he": "האם היה בן הזוג הקנדי של מעצבת תלבושות [ג&#39;סיקה דרייק]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ಜೆಸ್ಸಿಕಾ ಡ್ರೇಕ್] ಅವರ ಕೆನಡಾದ ಪುರುಷ ಸಂಗಾತಿಯೇ",
    "questionWithBrackets_zh": "服装设计师[杰西卡·德雷克]是加拿大男性配偶吗？",
    "recursionDepth": 24,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . ?x0 wdt:P21 wd:Q6581097 . ?x0 wdt:P27 wd:Q16 . ?x0 wdt:P26 wd:Q233128 . FILTER ( ?x0 != wd:Q233128 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 94018,
    "split": "gold_test",
    "en": "Was a costume designer Jessica Drake 's Canadian male spouse",
    "optimized": "Was Jessica Drake's husband a Canadian costume designer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q16 is Canada\nwdt:P26 is spouse\nwd:Q1323191 is costume designer\nwdt:P21 is sex or gender\nwdt:P27 is country of citizenship\nwdt:P106 is occupation\nwd:Q6581097 is male\nwd:Q233128 is Jessica Drake",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5684"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:7920"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:0697"
      },
      {
        "uri": "wd:Q6581097",
        "mask": "kg:3644"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:9858"
      },
      {
        "uri": "wd:Q16",
        "mask": "kg:4339"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:6576"
      },
      {
        "uri": "wd:Q233128",
        "mask": "kg:5552"
      },
      {
        "uri": "wd:Q233128",
        "mask": "kg:8031"
      }
    ],
    "masked": "Translate the question “Was Jessica Drake's husband a Canadian costume designer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4339 is Canada\nkg:6576 is spouse\nkg:7920 is costume designer\nkg:0697 is sex or gender\nkg:9858 is country of citizenship\nkg:5684 is occupation\nkg:3644 is male\nkg:8031 is Jessica Drake"
  },
  {
    "CFQquestionIdx": 164815,
    "expectedResponse": [
      "Las Vías del Amor"
    ],
    "questionPatternModEntities": "What sequel of M1 was distributed and produced by M0",
    "questionPatternModEntities_he": "איזה סרט המשך של M1 הופץ והופק על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಉತ್ತರಭಾಗವನ್ನು M0 ವಿತರಿಸಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಿದೆ",
    "questionPatternModEntities_zh": "M0发行并制作了M1的什么续集？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What sequel of [Between Love and Hatred] was distributed and produced by [Televisa]",
    "questionWithBrackets_he": "איזה סרט המשך של [בין אהבה לשנאה] הופץ והופק על ידי [טלוויזה]",
    "questionWithBrackets_kn": "[ಟೆಲಿವಿಸಾ] ಮೂಲಕ [ಪ್ರೀತಿ ಮತ್ತು ದ್ವೇಷದ ನಡುವೆ] ಯಾವ ಉತ್ತರಭಾಗವನ್ನು ವಿತರಿಸಲಾಗಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಲಾಗಿದೆ",
    "questionWithBrackets_zh": "[Televisa]发行并制作了[爱与恨之间]的什么续集？",
    "recursionDepth": 24,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P750 wd:Q47099 . ?x0 wdt:P155 wd:Q115945 . ?x0 wdt:P162|wdt:P272 wd:Q47099 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 M0 .\n?x0 wdt:P155 M1 .\n?x0 wdt:P162|wdt:P272 M0\n}",
    "id": 164815,
    "split": "gold_test",
    "en": "What sequel of Between Love and Hatred was distributed and produced by Televisa",
    "optimized": "Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?",
    "results": [
      [
        "wd:Q471588"
      ]
    ],
    "direct": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q115945 is Between Love and Hatred\nwdt:P162 is producer\nwdt:P272 is production company\nwd:Q47099 is Grupo Televisa\nwdt:P155 is follows",
    "masks": [
      {
        "uri": "wdt:P750",
        "mask": "kg:9757"
      },
      {
        "uri": "wd:Q47099",
        "mask": "kg:0688"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:0304"
      },
      {
        "uri": "wd:Q115945",
        "mask": "kg:6712"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3056"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0989"
      },
      {
        "uri": "wd:Q47099",
        "mask": "kg:7511"
      }
    ],
    "masked": "Translate the question “Which sequel to \"Between Love and Hatred\" was produced and distributed by Televisa?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9757 is distributed by\nkg:6712 is Between Love and Hatred\nkg:3056 is producer\nkg:0989 is production company\nkg:7511 is Grupo Televisa\nkg:0304 is follows"
  },
  {
    "CFQquestionIdx": 138510,
    "expectedResponse": [
      "Verizon"
    ],
    "questionPatternModEntities": "What child and parent of a company did M0 acquire",
    "questionPatternModEntities_he": "איזה ילד והורה של חברה רכשה M0",
    "questionPatternModEntities_kn": "M0 ಕಂಪನಿಯ ಯಾವ ಮಗು ಮತ್ತು ಪೋಷಕರು ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡರು",
    "questionPatternModEntities_zh": "M0 收购了一家公司的哪个孩子和母公司？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What child and parent of a company did [Verizon] acquire",
    "questionWithBrackets_he": "איזה ילד והורה של חברה רכשה [Verizon]",
    "questionWithBrackets_kn": "ಕಂಪನಿಯ ಯಾವ ಮಗು ಮತ್ತು ಪೋಷಕರು [ವೆರಿಝೋನ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡರು",
    "questionWithBrackets_zh": "[Verizon] 收购了一家公司的哪个孩子和母公司？",
    "recursionDepth": 24,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P127 wd:Q467752 . ?x0 wdt:P40|wdt:P355 ?x1 . ?x0 wdt:P749 ?x1 . ?x1 wdt:P31 wd:Q4830453 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P127 M0 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P749 ?x1 .\n?x1 wdt:P31 wd:Q4830453 }",
    "id": 138510,
    "split": "gold_test",
    "en": "What child and parent of a company did Verizon acquire",
    "optimized": "Which company did Verizon acquire which are subsidiary and parent of the same company?",
    "results": [],
    "direct": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is child\nwdt:P355 is has subsidiary\nwd:Q467752 is Verizon Communications\nwdt:P31 is instance of\nwd:Q4830453 is business\nwdt:P127 is owned by\nwdt:P749 is parent organization",
    "masks": [
      {
        "uri": "wdt:P127",
        "mask": "kg:6888"
      },
      {
        "uri": "wd:Q467752",
        "mask": "kg:9680"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:7928"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:7293"
      },
      {
        "uri": "wdt:P749",
        "mask": "kg:7216"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:9267"
      },
      {
        "uri": "wd:Q4830453",
        "mask": "kg:7798"
      }
    ],
    "masked": "Translate the question “Which company did Verizon acquire which are subsidiary and parent of the same company?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7928 is child\nkg:7293 is has subsidiary\nkg:9680 is Verizon Communications\nkg:9267 is instance of\nkg:7798 is business\nkg:6888 is owned by\nkg:7216 is parent organization"
  },
  {
    "CFQquestionIdx": 77614,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M2 's producer and distributor founded by M0 and M1",
    "questionPatternModEntities_he": "האם המפיק והמפיץ של M2 הוקם על ידי M0 ו-M1",
    "questionPatternModEntities_kn": "M2 ನ ನಿರ್ಮಾಪಕ ಮತ್ತು ವಿತರಕರನ್ನು M0 ಮತ್ತು M1 ಸ್ಥಾಪಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M2的生产商和经销商是M0和M1创立的吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "Was [Barbary Coast] 's producer and distributor founded by [Mary Pickford] and [Charlie Chaplin]",
    "questionWithBrackets_he": "האם המפיק והמפיץ של [ברברי קוסט] הוקם על ידי [מרי פיקפורד] ו[צ&#39;רלי צ&#39;פלין]",
    "questionWithBrackets_kn": "[ಬಾರ್ಬರಿ ಕೋಸ್ಟ್] ನಿರ್ಮಾಪಕ ಮತ್ತು ವಿತರಕರನ್ನು [ಮೇರಿ ಪಿಕ್‌ಫೋರ್ಡ್] ಮತ್ತು [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಸ್ಥಾಪಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[巴巴里海岸] 的制作人和发行人是由 [玛丽·皮克福德] 和 [查理·卓别林] 创立的吗？",
    "recursionDepth": 25,
    "sparql": "ASK WHERE { wd:Q524849 wdt:P750 ?x0 . wd:Q524849 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q882 . ?x0 wdt:P112 wd:Q104109 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM2 wdt:P750 ?x0 .\nM2 wdt:P272 ?x0 .\n?x0 wdt:P112 M0 .\n?x0 wdt:P112 M1\n}",
    "id": 77614,
    "split": "gold_test",
    "en": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin",
    "optimized": "Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Barbary Coast\nwd:Q882 is Charlie Chaplin\nwdt:P750 is distributed by\nwd:Q104109 is Mary Pickford\nwdt:P112 is founded by\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q524849",
        "mask": "kg:3924"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:4546"
      },
      {
        "uri": "wd:Q524849",
        "mask": "kg:2454"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3706"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:4816"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:8165"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:6989"
      },
      {
        "uri": "wd:Q104109",
        "mask": "kg:4433"
      }
    ],
    "masked": "Translate the question “Did Mary Pickford and Charlie Chaplin found the producer and distributer of Barbary Coast?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2454 is Barbary Coast\nkg:8165 is Charlie Chaplin\nkg:4546 is distributed by\nkg:4433 is Mary Pickford\nkg:6989 is founded by\nkg:3706 is production company"
  },
  {
    "CFQquestionIdx": 108475,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a actor that M2 was influenced by M0 's sibling",
    "questionPatternModEntities_he": "האם היה שחקן ש-M2 הושפע מאחיו של M0",
    "questionPatternModEntities_kn": "M0 ನ ಒಡಹುಟ್ಟಿದವರಿಂದ M2 ಪ್ರಭಾವಿತರಾದ ನಟರೇ",
    "questionPatternModEntities_zh": "M2是受M0兄弟影响的演员吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a actor that [Pearl Jam] was influenced by [Astrid Young] 's sibling",
    "questionWithBrackets_he": "האם שחקן ש[פרל ג&#39;אם] הושפע מאחיו של [אסטריד יאנג]",
    "questionWithBrackets_kn": "[ಆಸ್ಟ್ರಿಡ್ ಯಂಗ್] ಅವರ ಒಡಹುಟ್ಟಿದವರಿಂದ [ಪರ್ಲ್ ಜಾಮ್] ಪ್ರಭಾವಿತರಾದ ನಟರೇ",
    "questionWithBrackets_zh": "[Pearl Jam] 是受[Astrid Young] 弟弟影响的演员吗？",
    "recursionDepth": 25,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q33999 . wd:Q142701 wdt:P737 ?x0 . ?x0 wdt:P3373 wd:Q4811453 . FILTER ( ?x0 != wd:Q4811453 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q33999 .\nM2 wdt:P737 ?x0 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 108475,
    "split": "gold_test",
    "en": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling",
    "optimized": "Did a sibling of Astrid Young influence the band Pearl Jam?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P737 is influenced by\nwd:Q33999 is actor\nwd:Q142701 is Pearl Jam\nwdt:P3373 is sibling\nwdt:P106 is occupation\nwd:Q4811453 is Astrid Young",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5993"
      },
      {
        "uri": "wd:Q33999",
        "mask": "kg:7108"
      },
      {
        "uri": "wd:Q142701",
        "mask": "kg:6082"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:0050"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:9947"
      },
      {
        "uri": "wd:Q4811453",
        "mask": "kg:4474"
      },
      {
        "uri": "wd:Q4811453",
        "mask": "kg:5840"
      }
    ],
    "masked": "Translate the question “Did a sibling of Astrid Young influence the band Pearl Jam?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0050 is influenced by\nkg:7108 is actor\nkg:6082 is Pearl Jam\nkg:9947 is sibling\nkg:5993 is occupation\nkg:5840 is Astrid Young"
  },
  {
    "CFQquestionIdx": 183833,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was written and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה נכתב ונערך על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರು ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 编写和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was written and edited by [Jens Jørgen Thorsen] , [Ole John] , and [Jørgen Leth]",
    "questionWithBrackets_he": "מה נכתב וערך על ידי [Jens Jørgen Thorsen], [Ole John], ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್], [ಓಲೆ ಜಾನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jens Jørgen Thorsen]、[Ole John] 和 [Jørgen Leth] 撰写和编辑了什么？",
    "recursionDepth": 25,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 183833,
    "split": "gold_test",
    "en": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth",
    "optimized": "What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:1536"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6085"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0789"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4909"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8021"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9813"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5549"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8392"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2422"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2939"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4955"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:5314"
      }
    ],
    "masked": "Translate the question “What are the works written and edited by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4955 is screenwriter\nkg:8021 is film editor\nkg:5314 is Ole John\nkg:2939 is Jens Jørgen Thorsen\nkg:8392 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 141096,
    "expectedResponse": [
      "Geli Albaladejo"
    ],
    "questionPatternModEntities": "What costume designer of a film was M0 's Spanish sibling",
    "questionPatternModEntities_he": "איזה מעצב תלבושות של סרט היה אחיו הספרדי של M0",
    "questionPatternModEntities_kn": "M0 ರ ಸ್ಪ್ಯಾನಿಷ್ ಒಡಹುಟ್ಟಿದ ಯಾವ ಚಲನಚಿತ್ರದ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು",
    "questionPatternModEntities_zh": "M0的西班牙兄弟是哪部电影的服装设计师？",
    "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "What costume designer of a film was [Miguel Albaladejo] 's Spanish sibling",
    "questionWithBrackets_he": "איזה מעצב תלבושות של סרט היה אחיו הספרדי של [מיגל אלבלדג&#39;ו]",
    "questionWithBrackets_kn": "[ಮಿಗುಯೆಲ್ ಅಲ್ಬಲಾಡೆಜೊ] ಅವರ ಸ್ಪ್ಯಾನಿಷ್ ಒಡಹುಟ್ಟಿದವರ ಚಲನಚಿತ್ರದ ಯಾವ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು",
    "questionWithBrackets_zh": "[Miguel Albaladejo] 的西班牙兄弟姐妹是哪部电影的服装设计师？",
    "recursionDepth": 25,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x1 wdt:P2515 ?x0 . ?x0 wdt:P27 wd:Q29 . ?x0 wdt:P3373 wd:Q3083718 . ?x1 wdt:P31 wd:Q11424 . FILTER ( ?x0 != wd:Q3083718 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x1 wdt:P2515 ?x0 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 M0 .\n?x1 wdt:P31 wd:Q11424 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 141096,
    "split": "gold_test",
    "en": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling",
    "optimized": "What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?",
    "results": [
      [
        "wd:Q5876635"
      ]
    ],
    "direct": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29 is Spain\nwd:Q11424 is film\nwd:Q3083718 is Miguel Albaladejo\nwdt:P31 is instance of\nwdt:P3373 is sibling\nwdt:P27 is country of citizenship\nwdt:P2515 is costume designer",
    "masks": [
      {
        "uri": "wdt:P2515",
        "mask": "kg:9566"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:3275"
      },
      {
        "uri": "wd:Q29",
        "mask": "kg:8085"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:3905"
      },
      {
        "uri": "wd:Q3083718",
        "mask": "kg:0134"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:8324"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:2186"
      },
      {
        "uri": "wd:Q3083718",
        "mask": "kg:1750"
      }
    ],
    "masked": "Translate the question “What is the name of the  Spanish costume designer who is the sibling of Miguel Albaladejo in a film?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8085 is Spain\nkg:2186 is film\nkg:1750 is Miguel Albaladejo\nkg:8324 is instance of\nkg:3905 is sibling\nkg:3275 is country of citizenship\nkg:9566 is costume designer"
  },
  {
    "CFQquestionIdx": 109001,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a composer a Swedish female spouse of M3",
    "questionPatternModEntities_he": "האם מלחין הייתה בת זוג שוודית של M3",
    "questionPatternModEntities_kn": "ಸಂಯೋಜಕರು M3 ನ ಸ್ವೀಡಿಷ್ ಸ್ತ್ರೀ ಸಂಗಾತಿಯಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "作曲家是 M3 的瑞典女性配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a composer a Swedish female spouse of [Mattias Järvinen Palme]",
    "questionWithBrackets_he": "האם מלחין היה בן זוג שוודית של [מתיאס ירווין פאלמה]",
    "questionWithBrackets_kn": "ಸಂಯೋಜಕರು [ಮಟ್ಟಿಯಾಸ್ ಜಾರ್ವಿನೆನ್ ಪಾಲ್ಮೆ] ಅವರ ಸ್ವೀಡಿಷ್ ಸ್ತ್ರೀ ಸಂಗಾತಿಯಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "作曲家是 [Mattias Järvinen Palme] 的瑞典女性配偶吗？",
    "recursionDepth": 26,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q36834 . ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P27 wd:Q34 . ?x0 wdt:P26 wd:Q96203723 . FILTER ( ?x0 != wd:Q96203723 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q36834 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 109001,
    "split": "gold_test",
    "en": "Was a composer a Swedish female spouse of Mattias Järvinen Palme",
    "optimized": "Was the wife of Mattias Järvinen Palme a Swedish composer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q36834 is composer\nwdt:P27 is country of citizenship\nwdt:P21 is sex or gender\nwd:Q34 is Sweden\nwd:Q96203723 is Mattias Järvinen Palme\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:9843"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:8357"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:3327"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:3915"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:7145"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:0427"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:8981"
      },
      {
        "uri": "wd:Q96203723",
        "mask": "kg:9950"
      },
      {
        "uri": "wd:Q96203723",
        "mask": "kg:3493"
      }
    ],
    "masked": "Translate the question “Was the wife of Mattias Järvinen Palme a Swedish composer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3915 is female\nkg:8981 is spouse\nkg:8357 is composer\nkg:7145 is country of citizenship\nkg:3327 is sex or gender\nkg:0427 is Sweden\nkg:3493 is Mattias Järvinen Palme\nkg:9843 is occupation"
  },
  {
    "CFQquestionIdx": 65399,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 הופק ונערך על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನಿಂದ M0 ಅನ್ನು ಉತ್ಪಾದಿಸಲಾಗಿದೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1 、 M2 和 M3 制作和编辑的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] produced and edited by [Jens Jørgen Thorsen] , [Ole John] , and [Jørgen Leth]",
    "questionWithBrackets_he": "האם [Stop for Bud] הופק ונערך על ידי [Jens Jørgen Thorsen], [Ole John], ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್], [ಓಲೆ ಜಾನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Jens Jørgen Thorsen]、[Ole John] 和 [Jørgen Leth] 制作和编辑的吗？",
    "recursionDepth": 26,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3\n}",
    "id": 65399,
    "split": "gold_test",
    "en": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth",
    "optimized": "Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:1259"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3661"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7422"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:9758"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1457"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7280"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:3373"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8419"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4990"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:1321"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8651"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5148"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4823"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8631"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1408"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2579"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0455"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4937"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1871"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5393"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:8729"
      }
    ],
    "masked": "Translate the question “Did Jens Jørgen Thorsen, Ole John, and Jørgen Leth produce and edit the film 'Stop for Bud'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4937 is Stop for Bud\nkg:8419 is film editor\nkg:8729 is Ole John\nkg:1871 is producer\nkg:0455 is Jens Jørgen Thorsen\nkg:4823 is Jørgen Leth\nkg:5393 is production company"
  },
  {
    "CFQquestionIdx": 154812,
    "expectedResponse": [
      "Cleopatra IV of Egypt",
      "Cleopatra Selene of Egypt and Syria"
    ],
    "questionPatternModEntities": "What female sibling and spouse of M0 did M2 marry",
    "questionPatternModEntities_he": "עם איזה אח ובן זוג של M0 נישאו M2",
    "questionPatternModEntities_kn": "M0 ರ ಯಾವ ಸ್ತ್ರೀ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯು M2 ಅನ್ನು ಮದುವೆಯಾದರು",
    "questionPatternModEntities_zh": "M2 嫁给了 M0 的哪个女性同胞和配偶？",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What female sibling and spouse of [Ptolemy IX Lathyros] did [Antiochus IX Cyzicenus] marry",
    "questionWithBrackets_he": "עם איזה אח ובן זוג של [תלמי התשיעי לתירוס] נישאו [אנטיוכוס התשיעי Cyzicenus]",
    "questionWithBrackets_kn": "[ಪ್ಟೋಲೆಮಿ IX ಲ್ಯಾಥಿರೋಸ್] ಯಾವ ಸ್ತ್ರೀ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯು [ಆಂಟಿಯೋಕಸ್ IX ಸಿಜಿಸೆನಸ್] ವಿವಾಹವಾದರು",
    "questionWithBrackets_zh": "[Antiochus IX Cyzicenus]娶了[托勒密九世拉希罗斯]的哪个兄弟姐妹和配偶？",
    "recursionDepth": 26,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P3373 wd:Q3340 . ?x0 wdt:P26 wd:Q296446 . ?x0 wdt:P26 wd:Q3340 . FILTER ( ?x0 != wd:Q296446 ) . FILTER ( ?x0 != wd:Q3340 ) . FILTER ( ?x0 != wd:Q3340 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 M0 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
    "id": 154812,
    "split": "gold_test",
    "en": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry",
    "optimized": "Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?",
    "results": [
      [
        "wd:Q40023"
      ],
      [
        "wd:Q40027"
      ]
    ],
    "direct": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwd:Q296446 is Antiochus IX Cyzicenus\nwdt:P3373 is sibling\nwdt:P21 is sex or gender",
    "masks": [
      {
        "uri": "wdt:P21",
        "mask": "kg:0357"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:8755"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:8490"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:4436"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1974"
      },
      {
        "uri": "wd:Q296446",
        "mask": "kg:5935"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4633"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:8659"
      },
      {
        "uri": "wd:Q296446",
        "mask": "kg:3391"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:5658"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:0538"
      }
    ],
    "masked": "Translate the question “Who did Antiochus IX Cyzicenus marry who was also a sister and wife of Ptolemy IX Lathyros?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8755 is female\nkg:4633 is spouse\nkg:0538 is Ptolemy IX Lathyros\nkg:3391 is Antiochus IX Cyzicenus\nkg:8490 is sibling\nkg:0357 is sex or gender"
  },
  {
    "CFQquestionIdx": 185610,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was written by and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה נכתב ונערך על ידי M0 , M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರಿಂದ ಏನು ಬರೆಯಲಾಗಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 编写和编辑的内容是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was written by and edited by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "מה נכתב על ידי ונערך על ידי [Jens Jørgen Thorsen], [Jørgen Leth], ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 撰写和编辑的内容是什么？",
    "recursionDepth": 26,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 185610,
    "split": "gold_test",
    "en": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "optimized": "What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:9608"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6530"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3288"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:8287"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4444"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1122"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0732"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5002"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9303"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1969"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1424"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4516"
      }
    ],
    "masked": "Translate the question “What are the works that were written and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1424 is screenwriter\nkg:4444 is film editor\nkg:4516 is Ole John\nkg:1969 is Jens Jørgen Thorsen\nkg:5002 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 79318,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב ונערך על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆಯಲಾಗಿದೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1 、 M2 和 M3 编写和编辑？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] written by and edited by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "האם [Stop for Bud] נכתב על ידי ונערך על ידי [Jens Jørgen Thorsen], [Jørgen Leth], ו-[Ole John]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 编写和编辑的吗？",
    "recursionDepth": 27,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 79318,
    "split": "gold_test",
    "en": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "optimized": "Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:7524"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2654"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7897"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:2685"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9931"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1783"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:6220"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4093"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4302"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:2990"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1468"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5506"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:1073"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0577"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7577"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:2364"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6557"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3159"
      }
    ],
    "masked": "Translate the question “Did Jens Jørgen Thorsen, Jørgen Leth, and Ole John write and edit the work, \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2364 is Stop for Bud\nkg:4093 is film editor\nkg:6557 is screenwriter\nkg:3159 is Ole John\nkg:7577 is Jens Jørgen Thorsen\nkg:5506 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 65400,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced by and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 הופק ונערך על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನಿಂದ M0 ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 制作和编辑？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] produced by and edited by [Ole John] , [Jørgen Leth] , and [Jens Jørgen Thorsen]",
    "questionWithBrackets_he": "האם [Stop for Bud] הופק ונערך על ידי [Ole John], [Jørgen Leth], ו-[Jens Jørgen Thorsen]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಓಲೆ ಜಾನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] ಅವರು ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Ole John]、[Jørgen Leth] 和 [Jens Jørgen Thorsen] 制作和编辑的吗？",
    "recursionDepth": 27,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3\n}",
    "id": 65400,
    "split": "gold_test",
    "en": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen",
    "optimized": "Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4479"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0460"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5814"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8235"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7250"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2385"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:1163"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5139"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0161"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:3228"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2651"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5337"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0062"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:6243"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5712"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4164"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1312"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:9129"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1680"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8762"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7611"
      }
    ],
    "masked": "Translate the question “Did Ole John, Jørgen Leth, and Jens Jørgen Thorsen produce and edit \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9129 is Stop for Bud\nkg:5139 is film editor\nkg:7611 is Ole John\nkg:1680 is producer\nkg:1312 is Jens Jørgen Thorsen\nkg:0062 is Jørgen Leth\nkg:8762 is production company"
  },
  {
    "CFQquestionIdx": 182779,
    "expectedResponse": [
      "The Simpsons"
    ],
    "questionPatternModEntities": "What was produced by and executive produced by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה הופק על ידי והמנהל על ידי M0 , M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ನಿಂದ ಏನು ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 、 M1 和 M2 制作和执行制作的是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was produced by and executive produced by [Sam Simon] , [James L. Brooks] , and [Matt Groening]",
    "questionWithBrackets_he": "מה הופק על ידי והופק על ידי [סם סיימון], [ג&#39;יימס ל. ברוקס] ו[מאט גרונינג]",
    "questionWithBrackets_kn": "[ಸ್ಯಾಮ್ ಸೈಮನ್] , [ಜೇಮ್ಸ್ ಎಲ್. ಬ್ರೂಕ್ಸ್] ಮತ್ತು [ಮ್ಯಾಟ್ ಗ್ರೋನಿಂಗ್] ನಿರ್ಮಿಸಿದ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ಏನು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "由 [Sam Simon]、[James L. Brooks] 和 [Matt Groening] 制作和执行制作的是什么？",
    "recursionDepth": 27,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1431 wd:Q43994 . ?x0 wdt:P1431 wd:Q95125 . ?x0 wdt:P1431 wd:Q365090 . ?x0 wdt:P162|wdt:P272 wd:Q43994 . ?x0 wdt:P162|wdt:P272 wd:Q95125 . ?x0 wdt:P162|wdt:P272 wd:Q365090 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 M0 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P162|wdt:P272 M0 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2\n}",
    "id": 182779,
    "split": "gold_test",
    "en": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening",
    "optimized": "What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?",
    "results": [
      [
        "wd:Q886"
      ]
    ],
    "direct": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q365090 is Sam Simon\nwd:Q95125 is James L. Brooks\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q43994 is Matt Groening\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P1431",
        "mask": "kg:1748"
      },
      {
        "uri": "wd:Q43994",
        "mask": "kg:7256"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9802"
      },
      {
        "uri": "wd:Q95125",
        "mask": "kg:4874"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3178"
      },
      {
        "uri": "wd:Q365090",
        "mask": "kg:2028"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3977"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0401"
      },
      {
        "uri": "wd:Q43994",
        "mask": "kg:1133"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0426"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5768"
      },
      {
        "uri": "wd:Q95125",
        "mask": "kg:7057"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0948"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:1976"
      },
      {
        "uri": "wd:Q365090",
        "mask": "kg:2672"
      }
    ],
    "masked": "Translate the question “What did Sam Simon, James L. Brooks, and Matt Groening produce and executive produce?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2672 is Sam Simon\nkg:7057 is James L. Brooks\nkg:3178 is executive producer\nkg:0948 is producer\nkg:1133 is Matt Groening\nkg:1976 is production company"
  },
  {
    "CFQquestionIdx": 154845,
    "expectedResponse": [
      "Cleopatra IV of Egypt",
      "Cleopatra Selene of Egypt and Syria"
    ],
    "questionPatternModEntities": "What female sibling of M0 was M1 's sibling and spouse",
    "questionPatternModEntities_he": "איזה אח של M0 היה אח ובן זוגה של M1",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಮಹಿಳಾ ಒಡಹುಟ್ಟಿದವರು M1 ನ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个女性兄弟姐妹是 M1 的兄弟姐妹和配偶？",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "questionWithBrackets": "What female sibling of [Ptolemy X Alexander I] was [Ptolemy IX Lathyros] 's sibling and spouse",
    "questionWithBrackets_he": "איזה אח של [תלמי העשירי אלכסנדר הראשון] היה אחיו ובן זוגו של [תלמי התשיעי לתירוס]",
    "questionWithBrackets_kn": "[ಪ್ಟೋಲೆಮಿ X ಅಲೆಕ್ಸಾಂಡರ್ I] ರ ಯಾವ ಸ್ತ್ರೀ ಒಡಹುಟ್ಟಿದವರು [ಪ್ಟೋಲೆಮಿ IX ಲ್ಯಾಥಿರೋಸ್] ಅವರ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[托勒密 X 亚历山大一世] 的哪个女性兄弟姐妹是 [托勒密 IX 拉西罗斯] 的兄弟姐妹和配偶？",
    "recursionDepth": 27,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P3373 wd:Q3345 . ?x0 wdt:P3373 wd:Q3340 . ?x0 wdt:P26 wd:Q3340 . FILTER ( ?x0 != wd:Q3345 ) . FILTER ( ?x0 != wd:Q3340 ) . FILTER ( ?x0 != wd:Q3340 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 M0 .\n?x0 wdt:P3373 M1 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "id": 154845,
    "split": "gold_test",
    "en": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse",
    "optimized": "Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?",
    "results": [
      [
        "wd:Q40023"
      ],
      [
        "wd:Q40027"
      ]
    ],
    "direct": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6581072 is female\nwdt:P26 is spouse\nwd:Q3340 is Ptolemy IX Lathyros\nwdt:P3373 is sibling\nwdt:P21 is sex or gender\nwd:Q3345 is Ptolemy X Alexander I",
    "masks": [
      {
        "uri": "wdt:P21",
        "mask": "kg:1580"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:9841"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:9467"
      },
      {
        "uri": "wd:Q3345",
        "mask": "kg:2381"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:4989"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:0125"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9782"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:9982"
      },
      {
        "uri": "wd:Q3345",
        "mask": "kg:4993"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:0140"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:1945"
      }
    ],
    "masked": "Translate the question “Who was the sister and wife of Ptolemy IX Lathyros, also a sibling to Ptolemy X and Alexander I?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9841 is female\nkg:9782 is spouse\nkg:1945 is Ptolemy IX Lathyros\nkg:4989 is sibling\nkg:1580 is sex or gender\nkg:4993 is Ptolemy X Alexander I"
  },
  {
    "CFQquestionIdx": 64702,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced , directed , and written by M1 and M2",
    "questionPatternModEntities_he": "האם M0 הופק, ביים ונכתב על ידי M1 ו-M2",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ನಿಂದ M0 ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆ, ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1 和 M2 制作、导演和编写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "Was [Breaking Bad] produced , directed , and written by [Vince Gilligan] and [George Mastras]",
    "questionWithBrackets_he": "האם [שובר שורות] הופק, ביים ונכתב על ידי [וינס גיליגן] ו[ג&#39;ורג&#39; מאסטרס]",
    "questionWithBrackets_kn": "[ಬ್ರೇಕಿಂಗ್ ಬ್ಯಾಡ್] ಅನ್ನು [ವಿನ್ಸ್ ಗಿಲ್ಲಿಗನ್] ಮತ್ತು [ಜಾರ್ಜ್ ಮಾಸ್ಟ್ರಾಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Breaking Bad] 是由 [Vince Gilligan] 和 [George Mastras] 制作、导演和编剧的吗？",
    "recursionDepth": 28,
    "sparql": "ASK WHERE { wd:Q1079 wdt:P57 wd:Q4500 . wd:Q1079 wdt:P57 wd:Q5542223 . wd:Q1079 wdt:P162|wdt:P272 wd:Q4500 . wd:Q1079 wdt:P162|wdt:P272 wd:Q5542223 . wd:Q1079 wdt:P58 wd:Q4500 . wd:Q1079 wdt:P58 wd:Q5542223 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2\n}",
    "id": 64702,
    "split": "gold_test",
    "en": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras",
    "optimized": "Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q4500 is Vince Gilligan\nwdt:P162 is producer\nwd:Q1079 is Breaking Bad\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q1079",
        "mask": "kg:7895"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6118"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:7242"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:9560"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6328"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:2255"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:6422"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8818"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9471"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:5211"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:9115"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2221"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6416"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:9361"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:8195"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6472"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:0075"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:5986"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3866"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:2805"
      }
    ],
    "masked": "Translate the question “Did Vince Gilligan and George Mastras produce, direct, and write Breaking Bad?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2805 is George Mastras\nkg:6328 is director\nkg:3866 is screenwriter\nkg:0075 is Vince Gilligan\nkg:2221 is producer\nkg:5986 is Breaking Bad\nkg:6416 is production company"
  },
  {
    "CFQquestionIdx": 94090,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a costume designer a star and editor of M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מעצב תלבושות היה כוכב ועורך של M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಒಬ್ಬ ಸ್ಟಾರ್ ಮತ್ತು M1 , M2 , ಮತ್ತು M3 ನ ಸಂಪಾದಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "服装设计师是M1、M2、M3的明星和编辑吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a costume designer a star and editor of [Tom at the Farm] , [Heartbeats] , and [Laurence Anyways]",
    "questionWithBrackets_he": "האם מעצב תלבושות היה כוכב ועורך של [טום בחווה], [פעימות לב] ו[לורנס בכל מקרה]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ಟಾಮ್ ಅಟ್ ದಿ ಫಾರ್ಮ್] , [ಹಾರ್ಟ್ ಬೀಟ್ಸ್] ಮತ್ತು [ಲಾರೆನ್ಸ್ ಎನಿವೇಸ್] ನ ಸ್ಟಾರ್ ಮತ್ತು ಸಂಪಾದಕರಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "服装设计师是[农场里的汤姆]、[心跳]和[无论如何劳伦斯]的明星和编辑吗？",
    "recursionDepth": 28,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . wd:Q2336453 wdt:P161 ?x0 . wd:Q2615443 wdt:P161 ?x0 . wd:Q3530946 wdt:P161 ?x0 . wd:Q2336453 wdt:P1040 ?x0 . wd:Q2615443 wdt:P1040 ?x0 . wd:Q3530946 wdt:P1040 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0\n}",
    "id": 94090,
    "split": "gold_test",
    "en": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways",
    "optimized": "Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2615443 is Laurence Anyways\nwdt:P1040 is film editor\nwd:Q2336453 is Heartbeats\nwd:Q3530946 is Tom at the Farm\nwd:Q1323191 is costume designer\nwdt:P106 is occupation\nwdt:P161 is cast member",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2002"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:0137"
      },
      {
        "uri": "wd:Q2336453",
        "mask": "kg:2812"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4106"
      },
      {
        "uri": "wd:Q2615443",
        "mask": "kg:9197"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0631"
      },
      {
        "uri": "wd:Q3530946",
        "mask": "kg:9164"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7277"
      },
      {
        "uri": "wd:Q2336453",
        "mask": "kg:3899"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7257"
      },
      {
        "uri": "wd:Q2615443",
        "mask": "kg:9083"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0674"
      },
      {
        "uri": "wd:Q3530946",
        "mask": "kg:8202"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6947"
      }
    ],
    "masked": "Translate the question “Did a costume designer star and edit 'Tom at the Farm', 'Heartbeats', and 'Laurence Anyways'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9083 is Laurence Anyways\nkg:6947 is film editor\nkg:3899 is Heartbeats\nkg:8202 is Tom at the Farm\nkg:0137 is costume designer\nkg:2002 is occupation\nkg:7277 is cast member"
  },
  {
    "CFQquestionIdx": 234100,
    "expectedResponse": [
      "Charlie Chaplin"
    ],
    "questionPatternModEntities": "Who was a editor and star of M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "מי היה עורך וכוכב של M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆ ಯಾರು",
    "questionPatternModEntities_zh": "谁是 M1 、 M2 、 M3 和 M4 的编辑和明星？",
    "questionTemplate": "Who was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Who was a editor and star of [In the Park] , [Shanghaied] , [Modern Times] , and [The Professor]",
    "questionWithBrackets_he": "מי היה עורך וכוכב של [בפארק], [שנגחאיד], [זמנים מודרניים] ו[הפרופסור]",
    "questionWithBrackets_kn": "[ಇನ್ ದಿ ಪಾರ್ಕ್] , [ಶಾಂಘೈಡ್] , [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] ಮತ್ತು [ದಿ ಪ್ರೊಫೆಸರ್] ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆ ಯಾರು",
    "questionWithBrackets_zh": "谁是[公园里]、[上海人]、[摩登时代]和[教授]的编辑和明星？",
    "recursionDepth": 28,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q5 . wd:Q2718259 wdt:P161 ?x0 . wd:Q658822 wdt:P161 ?x0 . wd:Q45602 wdt:P161 ?x0 . wd:Q921678 wdt:P161 ?x0 . wd:Q2718259 wdt:P1040 ?x0 . wd:Q658822 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q921678 wdt:P1040 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q5 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM4 wdt:P161 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0\n}",
    "id": 234100,
    "split": "gold_test",
    "en": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor",
    "optimized": "Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?",
    "results": [
      [
        "wd:Q882"
      ]
    ],
    "direct": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q658822 is In the Park\nwd:Q2718259 is The Professor\nwd:Q921678 is Shanghaied\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P31 is instance of\nwdt:P161 is cast member\nwd:Q45602 is Modern Times",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:7833"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:3190"
      },
      {
        "uri": "wd:Q2718259",
        "mask": "kg:9815"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0440"
      },
      {
        "uri": "wd:Q658822",
        "mask": "kg:8054"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8867"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:0952"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0091"
      },
      {
        "uri": "wd:Q921678",
        "mask": "kg:4112"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1015"
      },
      {
        "uri": "wd:Q2718259",
        "mask": "kg:7312"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2039"
      },
      {
        "uri": "wd:Q658822",
        "mask": "kg:3219"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0287"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:7258"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6781"
      },
      {
        "uri": "wd:Q921678",
        "mask": "kg:2793"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1634"
      }
    ],
    "masked": "Translate the question “Who served as both the editor and star of the films \"In the Park,\" \"Shanghaied,\" \"Modern Times,\" and \"The Professor\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3219 is In the Park\nkg:7312 is The Professor\nkg:2793 is Shanghaied\nkg:3190 is human\nkg:1634 is film editor\nkg:7833 is instance of\nkg:1015 is cast member\nkg:7258 is Modern Times"
  },
  {
    "CFQquestionIdx": 142840,
    "expectedResponse": [
      "V/H/S/2"
    ],
    "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit and direct",
    "questionPatternModEntities_he": "מה ערכו והכוונו M0, M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ಏನು ಸಂಪಾದಿಸಿವೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿವೆ",
    "questionPatternModEntities_zh": "M0 、 M1 、 M2 和 M3 编辑和指导了什么？",
    "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "questionWithBrackets": "What did [Eduardo Sánchez] , [Gareth Evans] , [Jason Eisener] , and [Adam Wingard] edit and direct",
    "questionWithBrackets_he": "מה ערכו ובימו [אדוארדו סאנצ&#39;ז], [גארת&#39; אוונס], [ג&#39;ייסון אייזנר] ו[אדם וינגארד]",
    "questionWithBrackets_kn": "[ಎಡ್ವರ್ಡೊ ಸ್ಯಾಂಚೆಜ್] , [ಗ್ಯಾರೆತ್ ಇವಾನ್ಸ್] , [ಜೇಸನ್ ಐಸೆನರ್] ಮತ್ತು [ಆಡಮ್ ವಿಂಗಾರ್ಡ್] ಏನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Eduardo Sánchez]、[Gareth Evans]、[Jason Eisener] 和 [Adam Wingard] 编辑和导演了什么？",
    "recursionDepth": 28,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q1291210 . ?x0 wdt:P57 wd:Q16198328 . ?x0 wdt:P57 wd:Q4207234 . ?x0 wdt:P57 wd:Q4679987 . ?x0 wdt:P1040 wd:Q1291210 . ?x0 wdt:P1040 wd:Q16198328 . ?x0 wdt:P1040 wd:Q4207234 . ?x0 wdt:P1040 wd:Q4679987 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3\n}",
    "id": 142840,
    "split": "gold_test",
    "en": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct",
    "optimized": "What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?",
    "results": [
      [
        "wd:Q7906333"
      ]
    ],
    "direct": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q16198328 is Jason Eisener\nwdt:P1040 is film editor\nwd:Q4679987 is Adam Wingard\nwd:Q4207234 is Gareth Evans\nwd:Q1291210 is Eduardo Sánchez",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:1557"
      },
      {
        "uri": "wd:Q1291210",
        "mask": "kg:9928"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9046"
      },
      {
        "uri": "wd:Q16198328",
        "mask": "kg:9475"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9209"
      },
      {
        "uri": "wd:Q4207234",
        "mask": "kg:9099"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6483"
      },
      {
        "uri": "wd:Q4679987",
        "mask": "kg:9458"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9720"
      },
      {
        "uri": "wd:Q1291210",
        "mask": "kg:4625"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8801"
      },
      {
        "uri": "wd:Q16198328",
        "mask": "kg:1102"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0477"
      },
      {
        "uri": "wd:Q4207234",
        "mask": "kg:8606"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8022"
      },
      {
        "uri": "wd:Q4679987",
        "mask": "kg:9172"
      }
    ],
    "masked": "Translate the question “What works have Eduardo Sánchez, Gareth Evans, Jason Eisener, and Adam Wingard directed and edited?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6483 is director\nkg:1102 is Jason Eisener\nkg:8022 is film editor\nkg:9172 is Adam Wingard\nkg:8606 is Gareth Evans\nkg:4625 is Eduardo Sánchez"
  },
  {
    "CFQquestionIdx": 78933,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 directed and written by M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם M0 ביים ונכתב על ידי M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ಅವರಿಂದ M0 ಅನ್ನು ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1 、 M2 、 M3 和 M4 导演和编写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Four Rooms] directed and written by [Alexandre Rockwell] , [Quentin Tarantino] , [Allison Anders] , and [Robert Rodriguez]",
    "questionWithBrackets_he": "האם [ארבעה חדרים] ביים ונכתב על ידי [אלכסנדר רוקוול], [קוונטין טרנטינו], [אליסון אנדרס] ו[רוברט רודריגז]",
    "questionWithBrackets_kn": "[ನಾಲ್ಕು ಕೋಣೆಗಳು] [ಅಲೆಕ್ಸಾಂಡ್ರೆ ರಾಕ್‌ವೆಲ್] , [ಕ್ವೆಂಟಿನ್ ಟ್ಯಾರಂಟಿನೋ] , [ಆಲಿಸನ್ ಆಂಡರ್ಸ್] ಮತ್ತು [ರಾಬರ್ಟ್ ರೋಡ್ರಿಗಸ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "《四个房间》是由[亚历山大·洛克威尔]、[昆汀·塔伦蒂诺]、[艾莉森·安德斯]和[罗伯特·罗德里格斯]导演和编剧的吗？",
    "recursionDepth": 29,
    "sparql": "ASK WHERE { wd:Q1137372 wdt:P57 wd:Q3772 . wd:Q1137372 wdt:P57 wd:Q47284 . wd:Q1137372 wdt:P57 wd:Q549956 . wd:Q1137372 wdt:P57 wd:Q2838329 . wd:Q1137372 wdt:P58 wd:Q3772 . wd:Q1137372 wdt:P58 wd:Q47284 . wd:Q1137372 wdt:P58 wd:Q549956 . wd:Q1137372 wdt:P58 wd:Q2838329 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P57 M4 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3 .\nM0 wdt:P58 M4\n}",
    "id": 78933,
    "split": "gold_test",
    "en": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez",
    "optimized": "Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q1137372 is Four Rooms\nwd:Q47284 is Robert Rodriguez\nwdt:P58 is screenwriter\nwd:Q2838329 is Allison Anders\nwd:Q3772 is Quentin Tarantino\nwd:Q549956 is Alexandre Rockwell",
    "masks": [
      {
        "uri": "wd:Q1137372",
        "mask": "kg:4252"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6715"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:1156"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:3608"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6429"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:3407"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:8760"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9436"
      },
      {
        "uri": "wd:Q549956",
        "mask": "kg:3521"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:0266"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5595"
      },
      {
        "uri": "wd:Q2838329",
        "mask": "kg:1354"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:0785"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0812"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:8047"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:4677"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1756"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:2202"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:1554"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9450"
      },
      {
        "uri": "wd:Q549956",
        "mask": "kg:0913"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:9620"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0937"
      },
      {
        "uri": "wd:Q2838329",
        "mask": "kg:2759"
      }
    ],
    "masked": "Translate the question “Did Alexandre Rockwell, Quentin Tarantino, Allison Anders, and Robert Rodriguez direct and write Four Rooms?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5595 is director\nkg:9620 is Four Rooms\nkg:2202 is Robert Rodriguez\nkg:0937 is screenwriter\nkg:2759 is Allison Anders\nkg:8047 is Quentin Tarantino\nkg:0913 is Alexandre Rockwell"
  },
  {
    "CFQquestionIdx": 64683,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 directed and produced by M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם M0 ביים והופק על ידי M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ನಿಂದ M0 ಅನ್ನು ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1、M2、M3 和 M4 导演和制作的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Super Rhino] directed and produced by [Susie Essman] , [Malcolm McDowell] , [Clark Spencer] , and [Miley Cyrus]",
    "questionWithBrackets_he": "האם [Super Rhino] ביימה והופקה על ידי [סוזי אסמן], [מלקולם מקדואל], [קלארק ספנסר] ו[מיילי סיירוס]",
    "questionWithBrackets_kn": "[ಸೂಪರ್ ರೈನೋ] ಅನ್ನು [ಸೂಸಿ ಎಸ್ಸ್‌ಮನ್] , [ಮಾಲ್ಕಮ್ ಮೆಕ್‌ಡೊವೆಲ್] , [ಕ್ಲಾರ್ಕ್ ಸ್ಪೆನ್ಸರ್] ಮತ್ತು [ಮೈಲಿ ಸೈರಸ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[超级犀牛] 是由 [苏茜·埃斯曼]、[马尔科姆·麦克道威尔]、[克拉克·斯宾塞] 和 [麦莉·赛勒斯] 执导和制作的吗？",
    "recursionDepth": 29,
    "sparql": "ASK WHERE { wd:Q3977597 wdt:P57 wd:Q4235 . wd:Q3977597 wdt:P57 wd:Q40220 . wd:Q3977597 wdt:P57 wd:Q117392 . wd:Q3977597 wdt:P57 wd:Q5127380 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q4235 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q40220 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q117392 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q5127380 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P57 M4 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3 .\nM0 wdt:P162|wdt:P272 M4\n}",
    "id": 64683,
    "split": "gold_test",
    "en": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus",
    "optimized": "Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4235 is Miley Cyrus\nwd:Q3977597 is Super Rhino\nwdt:P162 is producer\nwd:Q40220 is Susie Essman\nwd:Q5127380 is Clark Spencer\nwd:Q117392 is Malcolm McDowell\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q3977597",
        "mask": "kg:3448"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5947"
      },
      {
        "uri": "wd:Q4235",
        "mask": "kg:8840"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:8307"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1251"
      },
      {
        "uri": "wd:Q40220",
        "mask": "kg:9147"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:1010"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5262"
      },
      {
        "uri": "wd:Q117392",
        "mask": "kg:0681"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:7608"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1096"
      },
      {
        "uri": "wd:Q5127380",
        "mask": "kg:3402"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:0473"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:9745"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7751"
      },
      {
        "uri": "wd:Q4235",
        "mask": "kg:2703"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:0436"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3912"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0482"
      },
      {
        "uri": "wd:Q40220",
        "mask": "kg:9356"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:4587"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:9804"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7977"
      },
      {
        "uri": "wd:Q117392",
        "mask": "kg:5093"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:9028"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:6682"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0709"
      },
      {
        "uri": "wd:Q5127380",
        "mask": "kg:5307"
      }
    ],
    "masked": "Translate the question “Did Susie Essman, Malcolm McDowell, Clark Spencer, and Miley Cyrus direct and produce Super Rhino?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1096 is director\nkg:2703 is Miley Cyrus\nkg:9028 is Super Rhino\nkg:6682 is producer\nkg:9356 is Susie Essman\nkg:5307 is Clark Spencer\nkg:5093 is Malcolm McDowell\nkg:0709 is production company"
  },
  {
    "CFQquestionIdx": 186596,
    "expectedResponse": [
      "Star Wars: Episode IV – A New Hope"
    ],
    "questionPatternModEntities": "What was written , executive produced , produced , and edited by M0",
    "questionPatternModEntities_he": "מה נכתב, הפיק, הפיק ונערך על ידי M0",
    "questionPatternModEntities_kn": "M0 ನಿಂದ ಏನು ಬರೆಯಲಾಗಿದೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಲಾಗಿದೆ, ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 编写、执行制作、制作和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written , executive produced , produced , and edited by [George Lucas]",
    "questionWithBrackets_he": "מה נכתב, הפיק, הפיק ונערך על ידי [ג&#39;ורג&#39; לוקאס]",
    "questionWithBrackets_kn": "[ಜಾರ್ಜ್ ಲ್ಯೂಕಾಸ್] ಏನು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[乔治·卢卡斯] 编写、执行制作、制作和编辑了什么？",
    "recursionDepth": 29,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q38222 . ?x0 wdt:P1431 wd:Q38222 . ?x0 wdt:P162|wdt:P272 wd:Q38222 . ?x0 wdt:P58 wd:Q38222 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1431 M0 .\n?x0 wdt:P162|wdt:P272 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 186596,
    "split": "gold_test",
    "en": "What was written , executive produced , produced , and edited by George Lucas",
    "optimized": "Which work was written, executive produced, produced and edited by George Lucas?",
    "results": [
      [
        "wd:Q17738"
      ]
    ],
    "direct": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q38222 is George Lucas\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:3493"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:1955"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5643"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:7666"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8870"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0507"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:9799"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9266"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:0613"
      }
    ],
    "masked": "Translate the question “Which work was written, executive produced, produced and edited by George Lucas?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9266 is screenwriter\nkg:3493 is film editor\nkg:5643 is executive producer\nkg:8870 is producer\nkg:0613 is George Lucas\nkg:0507 is production company"
  },
  {
    "CFQquestionIdx": 186761,
    "expectedResponse": [
      "Jean-Luc Godard"
    ],
    "questionPatternModEntities": "What writer and editor of M0 , M1 , and M2 was employed by M3",
    "questionPatternModEntities_he": "איזה סופר ועורך של M0, M1 ו-M2 הועסק ב-M3",
    "questionPatternModEntities_kn": "M0, M1 ಮತ್ತು M2 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರನ್ನು M3 ನೇಮಿಸಿಕೊಂಡಿದೆ",
    "questionPatternModEntities_zh": "M3 聘请了 M0、M1 和 M2 的哪位作家和编辑？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What writer and editor of [Every Man for Himself] , [Passion] , and [Notre musique] was employed by [Cahiers du cinéma]",
    "questionWithBrackets_he": "איזה סופר ועורך של [כל איש לעצמו], [תשוקה] ו-[נוטר מוזיקלי] הועסק על ידי [Chiers du cinéma]",
    "questionWithBrackets_kn": "[ಎವೆರಿ ಮ್ಯಾನ್ ಫಾರ್ ಹಿಮ್ಸೆಲ್ಫ್] , [ಪ್ಯಾಶನ್] ಮತ್ತು [ನೋಟ್ರೆ ಮ್ಯೂಸಿಕ್] ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರನ್ನು [ಕಾಹಿಯರ್ಸ್ ಡು ಸಿನಿಮಾ] ನೇಮಿಸಿಕೊಂಡರು",
    "questionWithBrackets_zh": "[电影手册] 雇用了[每个人都为自己]、[激情] 和[巴黎音乐] 的哪位作家和编辑？",
    "recursionDepth": 29,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q972787 wdt:P1040 ?x0 . wd:Q672061 wdt:P1040 ?x0 . wd:Q3141131 wdt:P1040 ?x0 . wd:Q972787 wdt:P58 ?x0 . wd:Q672061 wdt:P58 ?x0 . wd:Q3141131 wdt:P58 ?x0 . ?x0 wdt:P108 wd:Q909176 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P108 M3\n}",
    "id": 186761,
    "split": "gold_test",
    "en": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma",
    "optimized": "Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?",
    "results": [
      [
        "wd:Q53001"
      ]
    ],
    "direct": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q972787 is Every Man for Himself\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3141131 is Notre musique\nwd:Q672061 is Passion\nwd:Q909176 is Cahiers du cinéma",
    "masks": [
      {
        "uri": "wd:Q972787",
        "mask": "kg:9345"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5129"
      },
      {
        "uri": "wd:Q672061",
        "mask": "kg:7166"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3729"
      },
      {
        "uri": "wd:Q3141131",
        "mask": "kg:3030"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5303"
      },
      {
        "uri": "wd:Q972787",
        "mask": "kg:2653"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1343"
      },
      {
        "uri": "wd:Q672061",
        "mask": "kg:2627"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4010"
      },
      {
        "uri": "wd:Q3141131",
        "mask": "kg:7573"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3353"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2120"
      },
      {
        "uri": "wd:Q909176",
        "mask": "kg:9335"
      }
    ],
    "masked": "Translate the question “Who was the writer and editor of \"Every Man for Himself\", \"Passion\", and \"Notre Musique\", and also worked at \"Cahiers du cinéma\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2120 is employer\nkg:2653 is Every Man for Himself\nkg:3353 is screenwriter\nkg:5303 is film editor\nkg:7573 is Notre musique\nkg:2627 is Passion\nkg:9335 is Cahiers du cinéma"
  },
  {
    "CFQquestionIdx": 47432,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 executive produced and produced by M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם M0 executive הופק והופק על ידי M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಅನ್ನು M1, M2, M3 ಮತ್ತು M4 ನಿಂದ ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0执行器是M1、M2、M3、M4出品吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Laws of Attraction] executive produced and produced by [Bob Yari] , [Pierce Brosnan] , [Toby Emmerich] , and [Elie Samaha]",
    "questionWithBrackets_he": "האם [חוקי המשיכה] הופק והופק על ידי [בוב יארי], [פירס ברוסנן], [טובי אמריך] ו[אלי סמאהה]",
    "questionWithBrackets_kn": "[ಬಾಬ್ ಯಾರಿ] , [ಪಿಯರ್ಸ್ ಬ್ರಾನ್ಸನ್] , [ಟೋಬಿ ಎಮ್ಮೆರಿಚ್] , ಮತ್ತು [ಎಲೀ ಸಮಾಹಾ] ಅವರಿಂದ [ಲಾಸ್ ಆಫ್ ಅಟ್ರಾಕ್ಷನ್] ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "《吸引力法则》的执行官是由[鲍勃·亚里]、[皮尔斯·布鲁斯南]、[托比·艾默里奇]和[埃利·萨马哈]制作和制作的吗？",
    "recursionDepth": 30,
    "sparql": "ASK WHERE { wd:Q819109 wdt:P1431 wd:Q1295611 . wd:Q819109 wdt:P1431 wd:Q81520 . wd:Q819109 wdt:P1431 wd:Q381545 . wd:Q819109 wdt:P1431 wd:Q1969128 . wd:Q819109 wdt:P162|wdt:P272 wd:Q1295611 . wd:Q819109 wdt:P162|wdt:P272 wd:Q81520 . wd:Q819109 wdt:P162|wdt:P272 wd:Q381545 . wd:Q819109 wdt:P162|wdt:P272 wd:Q1969128 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1431 M1 .\nM0 wdt:P1431 M2 .\nM0 wdt:P1431 M3 .\nM0 wdt:P1431 M4 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3 .\nM0 wdt:P162|wdt:P272 M4\n}",
    "id": 47432,
    "split": "gold_test",
    "en": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha",
    "optimized": "Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81520 is Pierce Brosnan\nwd:Q1969128 is Bob Yari\nwd:Q819109 is Laws of Attraction\nwdt:P1431 is executive producer\nwd:Q381545 is Elie Samaha\nwdt:P162 is producer\nwd:Q1295611 is Toby Emmerich\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q819109",
        "mask": "kg:9803"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7095"
      },
      {
        "uri": "wd:Q1295611",
        "mask": "kg:2036"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:3886"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1728"
      },
      {
        "uri": "wd:Q81520",
        "mask": "kg:2523"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:9987"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8020"
      },
      {
        "uri": "wd:Q381545",
        "mask": "kg:1147"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:3971"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0533"
      },
      {
        "uri": "wd:Q1969128",
        "mask": "kg:1679"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:4360"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5827"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0069"
      },
      {
        "uri": "wd:Q1295611",
        "mask": "kg:7661"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:5927"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8843"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9875"
      },
      {
        "uri": "wd:Q81520",
        "mask": "kg:1278"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:5725"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5303"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6423"
      },
      {
        "uri": "wd:Q381545",
        "mask": "kg:9767"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:5622"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5056"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0551"
      },
      {
        "uri": "wd:Q1969128",
        "mask": "kg:2187"
      }
    ],
    "masked": "Translate the question “Did Bob Yari, Pierce Brosnan, Toby Emmerich, and Elie Samaha executive produce and produce the movie \"Laws of Attraction\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1278 is Pierce Brosnan\nkg:2187 is Bob Yari\nkg:5622 is Laws of Attraction\nkg:0533 is executive producer\nkg:9767 is Elie Samaha\nkg:5056 is producer\nkg:7661 is Toby Emmerich\nkg:0551 is production company"
  },
  {
    "CFQquestionIdx": 64315,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 edited , executive produced , produced , and written by M1",
    "questionPatternModEntities_he": "האם M0 נערך, הופק, הופק ונכתב על ידי M1",
    "questionPatternModEntities_kn": "M0 ಅನ್ನು ಎಡಿಟ್ ಮಾಡಲಾಗಿದೆಯೇ , ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆ , ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು M1 ನಿಂದ ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1 编辑、执行制作、制作和编写？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [Kagemusha] edited , executive produced , produced , and written by [Akira Kurosawa]",
    "questionWithBrackets_he": "האם [Kagemusha] נערך, הופק, הופק ונכתב על ידי [Akira Kurosawa]",
    "questionWithBrackets_kn": "[Kagemusha] ಸಂಪಾದಿಸಲಾಗಿದೆ , ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಣ , ನಿರ್ಮಾಣ , ಮತ್ತು ಬರೆದವರು [ಅಕಿರಾ ಕುರೊಸಾವಾ]",
    "questionWithBrackets_zh": "[影武者]是由[黑泽明]编辑、执行制作、制作和编写的吗？",
    "recursionDepth": 30,
    "sparql": "ASK WHERE { wd:Q854990 wdt:P1040 wd:Q8006 . wd:Q854990 wdt:P1431 wd:Q8006 . wd:Q854990 wdt:P162|wdt:P272 wd:Q8006 . wd:Q854990 wdt:P58 wd:Q8006 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1431 M1 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P58 M1\n}",
    "id": 64315,
    "split": "gold_test",
    "en": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa",
    "optimized": "Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q8006 is Akira Kurosawa\nwdt:P1431 is executive producer\nwdt:P162 is producer\nwd:Q854990 is Kagemusha\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q854990",
        "mask": "kg:0020"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3149"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:6643"
      },
      {
        "uri": "wd:Q854990",
        "mask": "kg:3154"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3712"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:1503"
      },
      {
        "uri": "wd:Q854990",
        "mask": "kg:7676"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0779"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9626"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:4439"
      },
      {
        "uri": "wd:Q854990",
        "mask": "kg:1415"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6880"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:6049"
      }
    ],
    "masked": "Translate the question “Did Akira Kurosawa write, edit, produce, and executive produce Kagemusha?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6880 is screenwriter\nkg:3149 is film editor\nkg:6049 is Akira Kurosawa\nkg:3712 is executive producer\nkg:0779 is producer\nkg:1415 is Kagemusha\nkg:9626 is production company"
  },
  {
    "CFQquestionIdx": 171827,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was directed , edited , and written by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה ביים, ערך ונכתב על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 导演、编辑和编写了什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed , edited , and written by [Jørgen Leth] , [Jens Jørgen Thorsen] , and [Ole John]",
    "questionWithBrackets_he": "מה ביים, נערך ונכתב על ידי [Jørgen Leth], [Jens Jørgen Thorsen], ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೋರ್ಗೆನ್ ಲೆತ್], [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jørgen Leth]、[Jens Jørgen Thorsen] 和 [Ole John] 导演、编辑和编写了什么？",
    "recursionDepth": 30,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 171827,
    "split": "gold_test",
    "en": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John",
    "optimized": "Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:2188"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0844"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4483"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0057"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0289"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:6069"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5654"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:1807"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6754"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0787"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7265"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9527"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0793"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0365"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2225"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3287"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4637"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4530"
      }
    ],
    "masked": "Translate the question “Which project was directed, edited, and written by Jørgen Leth, Jens Jørgen Thorsen, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0289 is director\nkg:4637 is screenwriter\nkg:7265 is film editor\nkg:4530 is Ole John\nkg:3287 is Jens Jørgen Thorsen\nkg:0365 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 172052,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was directed , written , and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה ביים, נכתב ונערך על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 导演、编写和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed , written , and edited by [Ole John] , [Jørgen Leth] , and [Jens Jørgen Thorsen]",
    "questionWithBrackets_he": "מה ביים, כתב וערך [אול ג&#39;ון], [יורגן לט] ו[ג&#39;נס יורגן תורסן]",
    "questionWithBrackets_kn": "[ಓಲೆ ಜಾನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್] ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Ole John]、[Jørgen Leth] 和 [Jens Jørgen Thorsen] 导演、编剧和编辑了什么？",
    "recursionDepth": 30,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 172052,
    "split": "gold_test",
    "en": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen",
    "optimized": "Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:3413"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:1206"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4556"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9233"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9712"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7211"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6415"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8474"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4082"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9195"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9552"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:6698"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2757"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7889"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9254"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2197"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2466"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:5238"
      }
    ],
    "masked": "Translate the question “Which work was directed, written, and edited by Ole John, Jørgen Leth, and Jens Jørgen Thorsen?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9712 is director\nkg:2466 is screenwriter\nkg:9552 is film editor\nkg:5238 is Ole John\nkg:2197 is Jens Jørgen Thorsen\nkg:7889 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 92507,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer and director of M1 , M2 , M3 , and M4 a film producer",
    "questionPatternModEntities_he": "האם צלם קולנוע ובמאי של M1, M2, M3 ו-M4 היה מפיק סרטים",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರೇ",
    "questionPatternModEntities_zh": "M1、M2、M3和M4的摄影师和导演是电影制片人吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer and director of [The Whip and the Body] , [Hatchet for the Honeymoon] , [Danger: Diabolik] , and [Black Sunday] a film producer",
    "questionWithBrackets_he": "האם צלם קולנוע ובמאי של [השוט והגוף], [גרזן לירח הדבש], [סכנה: דיאבוליק] ו[יום ראשון השחור] היה מפיק סרטים",
    "questionWithBrackets_kn": "[ದಿ ವಿಪ್ ಅಂಡ್ ದಿ ಬಾಡಿ] , [ಹ್ಯಾಚೆಟ್ ಫಾರ್ ದಿ ಹನಿಮೂನ್] , [ಡೇಂಜರ್: ಡಯಾಬೊಲಿಕ್] , ಮತ್ತು [ಬ್ಲ್ಯಾಕ್ ಸಂಡೆ] ಚಿತ್ರಗಳ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದಾರಾ",
    "questionWithBrackets_zh": "[The Whip and the Body]、[Hatchet for the Honeymoon]、[Danger: Diabolik] 和 [Black Sunday] 的摄影师和导演是电影制片人吗？",
    "recursionDepth": 31,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q1216566 wdt:P344 ?x0 . wd:Q600762 wdt:P344 ?x0 . wd:Q629819 wdt:P344 ?x0 . wd:Q283699 wdt:P344 ?x0 . wd:Q1216566 wdt:P57 ?x0 . wd:Q600762 wdt:P57 ?x0 . wd:Q629819 wdt:P57 ?x0 . wd:Q283699 wdt:P57 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0\n}",
    "id": 92507,
    "split": "gold_test",
    "en": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer",
    "optimized": "Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q283699 is Hatchet for the Honeymoon\nwd:Q3282637 is film producer\nwd:Q629819 is Danger: Diabolik\nwd:Q1216566 is Black Sunday\nwdt:P106 is occupation\nwd:Q600762 is The Whip and the Body\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:6263"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:0627"
      },
      {
        "uri": "wd:Q1216566",
        "mask": "kg:8198"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3023"
      },
      {
        "uri": "wd:Q600762",
        "mask": "kg:7876"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8069"
      },
      {
        "uri": "wd:Q629819",
        "mask": "kg:0008"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9397"
      },
      {
        "uri": "wd:Q283699",
        "mask": "kg:3716"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3120"
      },
      {
        "uri": "wd:Q1216566",
        "mask": "kg:7085"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8781"
      },
      {
        "uri": "wd:Q600762",
        "mask": "kg:7705"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6483"
      },
      {
        "uri": "wd:Q629819",
        "mask": "kg:7198"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7945"
      },
      {
        "uri": "wd:Q283699",
        "mask": "kg:2063"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2265"
      }
    ],
    "masked": "Translate the question “Did the cinematographer and director of \"The Whip and the Body\", \"Hatchet for the Honeymoon\", \"Danger: Diabolik\", and \"Black Sunday\" also serve as a film producer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2265 is director\nkg:2063 is Hatchet for the Honeymoon\nkg:0627 is film producer\nkg:7198 is Danger: Diabolik\nkg:7085 is Black Sunday\nkg:6263 is occupation\nkg:7705 is The Whip and the Body\nkg:3120 is director of photography"
  },
  {
    "CFQquestionIdx": 108087,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a actor a cinematographer and director of M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם שחקן היה צלם קולנוע ובמאי של M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "ಒಬ್ಬ ನಟ M1 , M2 , M3 , ಮತ್ತು M4 ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "演员是 M1、M2、M3 和 M4 的电影摄影师和导演吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a actor a cinematographer and director of [Six Men Getting Sick] , [Inland Empire] , [Darkened Room] , and [Rabbits]",
    "questionWithBrackets_he": "האם שחקן היה צלם קולנוע ובמאי של [Six Men Getting Sick], [Inland Empire], [חדר חשוך] ו[ארנבים]",
    "questionWithBrackets_kn": "[ಸಿಕ್ಸ್ ಮೆನ್ ಗೆಟ್ಟಿಂಗ್ ಸಿಕ್] , [ಇನ್‌ಲ್ಯಾಂಡ್ ಎಂಪೈರ್] , [ಡಾರ್ಕನ್ಡ್ ರೂಮ್] ಮತ್ತು [ಮೊಲಗಳು] ಒಬ್ಬ ನಟ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "演员是[六个生病的人]、[内陆帝国]、[暗室]和[兔子]的摄影师和导演吗？",
    "recursionDepth": 31,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q33999 . wd:Q3485595 wdt:P344 ?x0 . wd:Q1473406 wdt:P344 ?x0 . wd:Q3016313 wdt:P344 ?x0 . wd:Q862058 wdt:P344 ?x0 . wd:Q3485595 wdt:P57 ?x0 . wd:Q1473406 wdt:P57 ?x0 . wd:Q3016313 wdt:P57 ?x0 . wd:Q862058 wdt:P57 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q33999 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0\n}",
    "id": 108087,
    "split": "gold_test",
    "en": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits",
    "optimized": "Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q3016313 is Darkened Room\nwd:Q862058 is Inland Empire\nwd:Q33999 is actor\nwd:Q1473406 is Rabbits\nwdt:P106 is occupation\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:9917"
      },
      {
        "uri": "wd:Q33999",
        "mask": "kg:9234"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:5833"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9356"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:5595"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1751"
      },
      {
        "uri": "wd:Q3016313",
        "mask": "kg:2522"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4495"
      },
      {
        "uri": "wd:Q862058",
        "mask": "kg:6542"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5366"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:9628"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6540"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:1977"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1402"
      },
      {
        "uri": "wd:Q3016313",
        "mask": "kg:0113"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7364"
      },
      {
        "uri": "wd:Q862058",
        "mask": "kg:9038"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5713"
      }
    ],
    "masked": "Translate the question “Did the same person serve as the actor, cinematographer, and director for the films Six Men Getting Sick, Inland Empire, Darkened Room, and Rabbits?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5713 is director\nkg:0113 is Darkened Room\nkg:9038 is Inland Empire\nkg:9234 is actor\nkg:1977 is Rabbits\nkg:9917 is occupation\nkg:9628 is Six Men Getting Sick\nkg:5366 is director of photography"
  },
  {
    "CFQquestionIdx": 186538,
    "expectedResponse": [
      "Airplane!"
    ],
    "questionPatternModEntities": "What was written , executive produced , and directed by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה נכתב, הופק וביים על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ರವರು ಏನು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "由 M0、M1 和 M2 编写、执行制作和指导的内容是什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was written , executive produced , and directed by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]",
    "questionWithBrackets_he": "מה נכתב, הופק ובוים על ידי [דיוויד צוקר], [ג&#39;ים אברהמס] ו[ג&#39;רי צוקר]",
    "questionWithBrackets_kn": "[ಡೇವಿಡ್ ಜುಕರ್] , [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] ಮತ್ತು [ಜೆರ್ರಿ ಜುಕರ್] ಏನು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[David Zucker]、[Jim Abrahams] 和 [Jerry Zucker] 编写、执行制作和导演了什么？",
    "recursionDepth": 31,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q448604 . ?x0 wdt:P57 wd:Q363666 . ?x0 wdt:P57 wd:Q452794 . ?x0 wdt:P1431 wd:Q448604 . ?x0 wdt:P1431 wd:Q363666 . ?x0 wdt:P1431 wd:Q452794 . ?x0 wdt:P58 wd:Q448604 . ?x0 wdt:P58 wd:Q363666 . ?x0 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1431 M0 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 186538,
    "split": "gold_test",
    "en": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker",
    "optimized": "Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?",
    "results": [
      [
        "wd:Q497256"
      ]
    ],
    "direct": "Translate the question “Which works were written, executive produced, and directed by the trio David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query."
  },
  {
    "CFQquestionIdx": 142769,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What did M0 , M1 , and M2 direct , edit , and write",
    "questionPatternModEntities_he": "מה כיוונו, ערכו וכתבו M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಏನು ನಿರ್ದೇಶಿಸುತ್ತವೆ, ಸಂಪಾದಿಸುತ್ತವೆ ಮತ್ತು ಬರೆಯುತ್ತವೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 指导、编辑和编写了什么？",
    "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "questionWithBrackets": "What did [Ole John] , [Jens Jørgen Thorsen] , and [Jørgen Leth] direct , edit , and write",
    "questionWithBrackets_he": "מה ביימו, ערכו וכתבו [אול ג&#39;ון], [ג&#39;נס יורגן תורסן] ו[יורגן לית&#39;",
    "questionWithBrackets_kn": "[ಓಲೆ ಜಾನ್], [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಏನು ನಿರ್ದೇಶಿಸಿದರು, ಸಂಪಾದಿಸಿದರು ಮತ್ತು ಬರೆದರು",
    "questionWithBrackets_zh": "[Ole John]、[Jens Jørgen Thorsen] 和 [Jørgen Leth] 导演、编辑和创作了什么？",
    "recursionDepth": 31,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 142769,
    "split": "gold_test",
    "en": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write",
    "optimized": "Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:3621"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6152"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9538"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1372"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0677"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0076"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6181"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4664"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6676"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5753"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4848"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2644"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4275"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7339"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6687"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3772"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8507"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7862"
      }
    ],
    "masked": "Translate the question “Which films were directed, edited, and written by Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0677 is director\nkg:8507 is screenwriter\nkg:4848 is film editor\nkg:7862 is Ole John\nkg:3772 is Jens Jørgen Thorsen\nkg:7339 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 79227,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written and directed by M1 , M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "האם M0 נכתב וביים על ידי M1 , M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , M4 , ಮತ್ತು M5 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆದು ನಿರ್ದೇಶಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1、M2、M3、M4 和 M5 编写和导演的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Grindhouse] written and directed by [Eli Roth] , [Edgar Wright] , [Rob Zombie] , [Quentin Tarantino] , and [Robert Rodriguez]",
    "questionWithBrackets_he": "האם [Grindhouse] נכתב וביים על ידי [אלי רוט], [אדגר רייט], [רוב זומבי], [קוונטין טרנטינו] ו[רוברט רודריגז]",
    "questionWithBrackets_kn": "[ಗ್ರೈಂಡ್‌ಹೌಸ್] ಅನ್ನು [ಎಲಿ ರಾತ್] , [ಎಡ್ಗರ್ ರೈಟ್] , [ರಾಬ್ ಝಾಂಬಿ] , [ಕ್ವೆಂಟಿನ್ ಟ್ಯಾರಂಟಿನೋ] ಮತ್ತು [ರಾಬರ್ಟ್ ರೊಡ್ರಿಗಸ್] ಬರೆದು ನಿರ್ದೇಶಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[Grindhouse] 是由 [Eli Roth]、[Edgar Wright]、[Rob Zombie]、[Quentin Tarantino] 和 [Robert Rodriguez] 编写和导演的吗？",
    "recursionDepth": 32,
    "sparql": "ASK WHERE { wd:Q679023 wdt:P57 wd:Q3772 . wd:Q679023 wdt:P57 wd:Q298255 . wd:Q679023 wdt:P57 wd:Q358714 . wd:Q679023 wdt:P57 wd:Q47284 . wd:Q679023 wdt:P57 wd:Q522057 . wd:Q679023 wdt:P58 wd:Q3772 . wd:Q679023 wdt:P58 wd:Q298255 . wd:Q679023 wdt:P58 wd:Q358714 . wd:Q679023 wdt:P58 wd:Q47284 . wd:Q679023 wdt:P58 wd:Q522057 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P57 M4 .\nM0 wdt:P57 M5 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3 .\nM0 wdt:P58 M4 .\nM0 wdt:P58 M5\n}",
    "id": 79227,
    "split": "gold_test",
    "en": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez",
    "optimized": "Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q47284 is Robert Rodriguez\nwd:Q522057 is Edgar Wright\nwdt:P58 is screenwriter\nwd:Q679023 is Grindhouse\nwd:Q358714 is Eli Roth\nwd:Q298255 is Rob Zombie\nwd:Q3772 is Quentin Tarantino",
    "masks": [
      {
        "uri": "wd:Q679023",
        "mask": "kg:0982"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4100"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:1894"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:2866"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2281"
      },
      {
        "uri": "wd:Q298255",
        "mask": "kg:1344"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:5999"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6561"
      },
      {
        "uri": "wd:Q358714",
        "mask": "kg:1992"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:1258"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9366"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:6522"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:9376"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0123"
      },
      {
        "uri": "wd:Q522057",
        "mask": "kg:0509"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:1998"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4039"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:9736"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:0368"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4651"
      },
      {
        "uri": "wd:Q298255",
        "mask": "kg:0795"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:2197"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3702"
      },
      {
        "uri": "wd:Q358714",
        "mask": "kg:1454"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:5416"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9944"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:2406"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:2115"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2062"
      },
      {
        "uri": "wd:Q522057",
        "mask": "kg:8328"
      }
    ],
    "masked": "Translate the question “Did Eli Roth, Edgar Wright, Rob Zombie, Quentin Tarantino, and Robert Rodriguez collaborate on writing and directing Grindhouse?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0123 is director\nkg:2406 is Robert Rodriguez\nkg:8328 is Edgar Wright\nkg:2062 is screenwriter\nkg:2115 is Grindhouse\nkg:1454 is Eli Roth\nkg:0795 is Rob Zombie\nkg:9736 is Quentin Tarantino"
  },
  {
    "CFQquestionIdx": 34484,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film producer edit and write M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם מפיק סרטים ערך וכתב את M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影制片人是否编辑并编写了 M1、M2、M3 和 M4？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer edit and write [Katzelmacher] , [Lili Marleen] , [Whity] , and [The Niklashausen Journey]",
    "questionWithBrackets_he": "האם מפיק סרטים ערך וכתב את [כצלמאכר], [לילי מרלין], [Whity] ו[מסע ניקלאסהאוזן]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ಕಟ್ಜೆಲ್ಮಾಕರ್] , [ಲಿಲಿ ಮರ್ಲೀನ್] , [ವೈಟಿ] , ಮತ್ತು [ದಿ ನಿಕ್ಲಾಶೌಸೆನ್ ಜರ್ನಿ] ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影制片人是否编辑和编写了 [Katzelmacher]、[Lili Marleen]、[Whity] 和 [The Niklashausen Journey]？",
    "recursionDepth": 32,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q2789885 wdt:P1040 ?x0 . wd:Q686125 wdt:P1040 ?x0 . wd:Q567519 wdt:P1040 ?x0 . wd:Q327427 wdt:P1040 ?x0 . wd:Q2789885 wdt:P58 ?x0 . wd:Q686125 wdt:P58 ?x0 . wd:Q567519 wdt:P58 ?x0 . wd:Q327427 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 34484,
    "split": "gold_test",
    "en": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey",
    "optimized": "Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2789885 is The Niklashausen Journey\nwd:Q3282637 is film producer\nwd:Q327427 is Whity\nwd:Q686125 is Lili Marleen\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:1121"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:9570"
      },
      {
        "uri": "wd:Q2789885",
        "mask": "kg:6886"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3769"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:7366"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1206"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:3017"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0256"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:7080"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3259"
      },
      {
        "uri": "wd:Q2789885",
        "mask": "kg:3942"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5236"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:5270"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2653"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:1392"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1429"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:5693"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6788"
      }
    ],
    "masked": "Translate the question “Did one film producer edit and write the films Katzelmacher, Lili Marleen, Whity, and The Niklashausen Journey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1392 is Katzelmacher\nkg:6788 is screenwriter\nkg:3259 is film editor\nkg:3942 is The Niklashausen Journey\nkg:9570 is film producer\nkg:5693 is Whity\nkg:5270 is Lili Marleen\nkg:1121 is occupation"
  },
  {
    "CFQquestionIdx": 171227,
    "expectedResponse": [
      "Breaking Bad"
    ],
    "questionPatternModEntities": "What was directed by and written by M0 , M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "מה ביים ונכתב על ידי M0 , M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , M3 , ಮತ್ತು M4 ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 、 M1 、 M2 、 M3 和 M4 的导演和编剧是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed by and written by [Thomas Schnauz] , [Peter Gould] , [George Mastras] , [Sam Catlin] , and [Vince Gilligan]",
    "questionWithBrackets_he": "מה ביים ונכתב על ידי [תומס שנאוז], [פיטר גולד], [ג&#39;ורג&#39; מאסטרס], [סם קטלין] ו[וינס גיליגן]",
    "questionWithBrackets_kn": "[ಥಾಮಸ್ ಷ್ನಾಜ್] , [ಪೀಟರ್ ಗೌಲ್ಡ್] , [ಜಾರ್ಜ್ ಮಾಸ್ಟ್ರಾಸ್] , [ಸ್ಯಾಮ್ ಕ್ಯಾಟ್ಲಿನ್] ಮತ್ತು [ವಿನ್ಸ್ ಗಿಲ್ಲಿಗನ್] ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是由 [Thomas Schnauz]、[Peter Gould]、[George Mastras]、[Sam Catlin] 和 [Vince Gilligan] 导演和编剧的？",
    "recursionDepth": 32,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q4500 . ?x0 wdt:P57 wd:Q15042700 . ?x0 wdt:P57 wd:Q5542223 . ?x0 wdt:P57 wd:Q7174311 . ?x0 wdt:P57 wd:Q7407299 . ?x0 wdt:P58 wd:Q4500 . ?x0 wdt:P58 wd:Q15042700 . ?x0 wdt:P58 wd:Q5542223 . ?x0 wdt:P58 wd:Q7174311 . ?x0 wdt:P58 wd:Q7407299 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4\n}",
    "id": 171227,
    "split": "gold_test",
    "en": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan",
    "optimized": "Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?",
    "results": [
      [
        "wd:Q1079"
      ]
    ],
    "direct": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5542223 is George Mastras\nwdt:P57 is director\nwdt:P58 is screenwriter\nwd:Q7407299 is Sam Catlin\nwd:Q4500 is Vince Gilligan\nwd:Q7174311 is Peter Gould\nwd:Q15042700 is Thomas Schnauz",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:4704"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:1354"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2034"
      },
      {
        "uri": "wd:Q15042700",
        "mask": "kg:2524"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6412"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:0574"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7875"
      },
      {
        "uri": "wd:Q7174311",
        "mask": "kg:3619"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0286"
      },
      {
        "uri": "wd:Q7407299",
        "mask": "kg:5353"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2415"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:6928"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7475"
      },
      {
        "uri": "wd:Q15042700",
        "mask": "kg:4558"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9727"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:0982"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7889"
      },
      {
        "uri": "wd:Q7174311",
        "mask": "kg:6899"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5267"
      },
      {
        "uri": "wd:Q7407299",
        "mask": "kg:2196"
      }
    ],
    "masked": "Translate the question “Which projects were directed and written by Thomas Schnauz, Peter Gould, George Mastras, Sam Catlin, and Vince Gilligan?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0982 is George Mastras\nkg:0286 is director\nkg:5267 is screenwriter\nkg:2196 is Sam Catlin\nkg:6928 is Vince Gilligan\nkg:6899 is Peter Gould\nkg:4558 is Thomas Schnauz"
  },
  {
    "CFQquestionIdx": 171684,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was directed by , written by , and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה ביים, נכתב על ידי ונערך על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರಿಂದ ಏನು ನಿರ್ದೇಶಿಸಲ್ಪಟ್ಟಿದೆ, ಬರೆದಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 的导演、编剧和编辑是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed by , written by , and edited by [Ole John] , [Jens Jørgen Thorsen] , and [Jørgen Leth]",
    "questionWithBrackets_he": "מה ביים, נכתב על ידי, ונערך על ידי [אול ג&#39;ון], [Jens Jørgen Thorsen] ו[יורגן לט]",
    "questionWithBrackets_kn": "[ಓಲೆ ಜಾನ್] , [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Ole John]、[Jens Jørgen Thorsen] 和 [Jørgen Leth] 的导演、编剧和编辑是什么？",
    "recursionDepth": 32,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 171684,
    "split": "gold_test",
    "en": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth",
    "optimized": "Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:9167"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5537"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7095"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2684"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6229"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1115"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0160"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7415"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9321"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5029"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0618"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3977"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9375"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8050"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1396"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7861"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4344"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3628"
      }
    ],
    "masked": "Translate the question “Who directed, wrote, and edited a production involving Ole John, Jens Jørgen Thorsen, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6229 is director\nkg:4344 is screenwriter\nkg:0618 is film editor\nkg:3628 is Ole John\nkg:7861 is Jens Jørgen Thorsen\nkg:8050 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 33894,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor executive produce and write M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם עורך סרטים הפיק וכתב את M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "ಫಿಲ್ಮ್ ಎಡಿಟರ್ ಎಕ್ಸಿಕ್ಯೂಟಿವ್ M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ನಿರ್ಮಿಸಿ ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影编辑执行是否制作和编写了 M1、M2、M3 和 M4？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor executive produce and write [Star Wars: Episode IV – A New Hope] , [Star Wars: Episode I – The Phantom Menace] , [Star Wars: Episode VI – Return of the Jedi] , and [Star Whores]",
    "questionWithBrackets_he": "האם עורך סרטים הפיק וכתב [מלחמת הכוכבים: פרק IV - תקווה חדשה], [מלחמת הכוכבים: פרק I - אימת הפנטום], [מלחמת הכוכבים: פרק VI - שובו של הג&#39;דיי] ו[זונות הכוכבים] ",
    "questionWithBrackets_kn": "ಫಿಲ್ಮ್ ಎಡಿಟರ್ ಎಕ್ಸಿಕ್ಯೂಟಿವ್ [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ IV - ಎ ನ್ಯೂ ಹೋಪ್] , [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ I - ದಿ ಫ್ಯಾಂಟಮ್ ಮೆನೇಸ್] , [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ VI - ರಿಟರ್ನ್ ಆಫ್ ದಿ ಜೇಡಿ] , ಮತ್ತು [ಸ್ಟಾರ್ ವೋರ್ಸ್] ",
    "questionWithBrackets_zh": "是否有电影编辑执行制作和编写 [星球大战：第四集 - 新希望]、[星球大战：第一集 - 幽灵的威胁]、[星球大战：第六集 - 绝地归来] 和 [明星妓女] ",
    "recursionDepth": 33,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q3968346 wdt:P1431 ?x0 . wd:Q165713 wdt:P1431 ?x0 . wd:Q181803 wdt:P1431 ?x0 . wd:Q17738 wdt:P1431 ?x0 . wd:Q3968346 wdt:P58 ?x0 . wd:Q165713 wdt:P58 ?x0 . wd:Q181803 wdt:P58 ?x0 . wd:Q17738 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM4 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 33894,
    "split": "gold_test",
    "en": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores",
    "optimized": "Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q181803 is Star Wars: Episode VI – Return of the Jedi\nwd:Q3968346 is Star Whores\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:7901"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:9486"
      },
      {
        "uri": "wd:Q3968346",
        "mask": "kg:7167"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4585"
      },
      {
        "uri": "wd:Q165713",
        "mask": "kg:5787"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7422"
      },
      {
        "uri": "wd:Q181803",
        "mask": "kg:8188"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3481"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:6549"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8729"
      },
      {
        "uri": "wd:Q3968346",
        "mask": "kg:3339"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7866"
      },
      {
        "uri": "wd:Q165713",
        "mask": "kg:2824"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7090"
      },
      {
        "uri": "wd:Q181803",
        "mask": "kg:7215"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1649"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:4212"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9870"
      }
    ],
    "masked": "Translate the question “Did a film editor serve as the executive producer and writer for \"Star Wars: Episode IV – A New Hope\", \"Star Wars: Episode I – The Phantom Menace\", \"Star Wars: Episode VI – Return of the Jedi\", and \"Star Whores\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9870 is screenwriter\nkg:8729 is executive producer\nkg:7215 is Star Wars: Episode VI – Return of the Jedi\nkg:3339 is Star Whores\nkg:9486 is film editor\nkg:7901 is occupation\nkg:4212 is Star Wars: Episode IV – A New Hope\nkg:2824 is Star Wars: Episode I – The Phantom Menace"
  },
  {
    "CFQquestionIdx": 50732,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by , edited by , and directed by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי , נערך על ידי וביים על ידי M1 , M2 ו- M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆಯಲಾಗಿದೆಯೇ, ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ ಮತ್ತು ನಿರ್ದೇಶಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 编写、编辑和指导？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] written by , edited by , and directed by [Ole John] , [Jens Jørgen Thorsen] , and [Jørgen Leth]",
    "questionWithBrackets_he": "האם [Stop for Bud] נכתב על ידי, נערך על ידי וביים על ידי [Ole John], [Jens Jørgen Thorsen], ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಓಲೆ ಜಾನ್], [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಅವರು ಬರೆದಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Ole John]、[Jens Jørgen Thorsen] 和 [Jørgen Leth] 编写、编辑和导演的吗？",
    "recursionDepth": 33,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P57 wd:Q562108 . wd:Q20729551 wdt:P57 wd:Q1687239 . wd:Q20729551 wdt:P57 wd:Q35979475 . wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 50732,
    "split": "gold_test",
    "en": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth",
    "optimized": "Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q20729551 is Stop for Bud\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8628"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6169"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2811"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:9527"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7047"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1194"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:1694"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1733"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3344"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:0609"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3744"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6985"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:9805"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6824"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7976"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4606"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1684"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3424"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4419"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4897"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6976"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:3181"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5398"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1653"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:7483"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8356"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2342"
      }
    ],
    "masked": "Translate the question “Did Ole John, Jens Jørgen Thorsen, and Jørgen Leth write, edit, and direct \"Stop for Bud\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1733 is director\nkg:7483 is Stop for Bud\nkg:1684 is film editor\nkg:8356 is screenwriter\nkg:2342 is Ole John\nkg:1653 is Jens Jørgen Thorsen\nkg:6976 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 186714,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "What writer and cinematographer of M0 , M1 , and M2 executive produced M3 and M4",
    "questionPatternModEntities_he": "איזה סופר וצלם של מנהלי M0, M1 ו-M2 הפיק את M3 ו-M4",
    "questionPatternModEntities_kn": "M0, M1 ಮತ್ತು M2 ಕಾರ್ಯನಿರ್ವಾಹಕ M3 ಮತ್ತು M4 ಅನ್ನು ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2的哪位编剧兼摄影师制作了M3、M4？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What writer and cinematographer of [Anyone Lived in a Pretty How Town] , [1:42.08] , and [Look at Life] executive produced [Star Wars: Episode I – The Phantom Menace] and [The Land Before Time]",
    "questionWithBrackets_he": "איזה סופר וצלם קולנוע של [כל אחד גר בעיר יפה] , [1:42.08] ומנהלת [הסתכל על החיים] הפיק את [מלחמת הכוכבים: פרק א&#39; - איום הפנטום] ו[הארץ לפני הזמן]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ [ಯಾರಾದರೂ ಪ್ರೆಟಿ ಹೌ ಟೌನ್‌ನಲ್ಲಿ ವಾಸಿಸುತ್ತಿದ್ದರು] , [1:42.08] ಮತ್ತು [ಲೈಫ್ ನೋಡಿ] ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ I - ದಿ ಫ್ಯಾಂಟಮ್ ಮೆನೇಸ್] ಮತ್ತು [ದಿ ಲ್ಯಾಂಡ್ ಬಿಫೋರ್ ಟೈಮ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Anyone Lived in a Pretty How Town]、[1:42.08] 和 [Look at Life] 的哪位作家和摄影师制作了 [Star Wars: Episode I – The Phantom Menace] 和 [The Land Before Time]？",
    "recursionDepth": 33,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1869678 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q208910 wdt:P344 ?x0 . wd:Q165713 wdt:P1431 ?x0 . wd:Q192403 wdt:P1431 ?x0 . wd:Q1869678 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q208910 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P1431 ?x0 .\nM4 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 186714,
    "split": "gold_test",
    "en": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time",
    "optimized": "Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1869678 is Look at Life\nwd:Q208910 is 1:42.08\nwd:Q192403 is The Land Before Time\nwd:Q165713 is Star Wars: Episode I – The Phantom Menace\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1869678",
        "mask": "kg:8745"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2345"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:7039"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0931"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:8469"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4014"
      },
      {
        "uri": "wd:Q165713",
        "mask": "kg:3675"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0799"
      },
      {
        "uri": "wd:Q192403",
        "mask": "kg:4438"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8695"
      },
      {
        "uri": "wd:Q1869678",
        "mask": "kg:2498"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5092"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:7257"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6566"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:4002"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3076"
      }
    ],
    "masked": "Translate the question “Who executive produced \"Star Wars: Episode I – The Phantom Menace\" and \"The Land Before Time\" and also was the writer and cinematographer for \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Look at Life\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3076 is screenwriter\nkg:8695 is executive producer\nkg:7257 is Anyone Lived in a Pretty How Town\nkg:2498 is Look at Life\nkg:4002 is 1:42.08\nkg:4438 is The Land Before Time\nkg:3675 is Star Wars: Episode I – The Phantom Menace\nkg:4014 is director of photography"
  },
  {
    "CFQquestionIdx": 204325,
    "expectedResponse": [
      "Nuri Bilge Ceylan"
    ],
    "questionPatternModEntities": "Which film producer was a editor , executive producer , director , and writer of M1 and M2",
    "questionPatternModEntities_he": "איזה מפיק סרטים היה עורך, מפיק בפועל, במאי וכותב של M1 ו-M2",
    "questionPatternModEntities_kn": "ಯಾವ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1 ಮತ್ತು M2 ನ ಸಂಪಾದಕರು, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು, ನಿರ್ದೇಶಕರು ಮತ್ತು ಬರಹಗಾರರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M1和M2的剪辑师、执行制片人、导演和编剧是哪位电影制片人？",
    "questionTemplate": "Which [NP_SIMPLE] was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity]",
    "questionWithBrackets": "Which film producer was a editor , executive producer , director , and writer of [Uzak] and [Clouds of May]",
    "questionWithBrackets_he": "איזה מפיק סרטים היה עורך, מפיק בפועל, במאי וכותב של [Uzak] ו-[ענני מאי]",
    "questionWithBrackets_kn": "ಯಾವ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ಉಜಾಕ್] ಮತ್ತು [ಕ್ಲೌಡ್ಸ್ ಆಫ್ ಮೇ] ನ ಸಂಪಾದಕರು, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು, ನಿರ್ದೇಶಕರು ಮತ್ತು ಬರಹಗಾರರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "哪个电影制片人是[乌扎克]和[五月的云]的编辑、执行制片人、导演和作家？",
    "recursionDepth": 33,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q1361018 wdt:P57 ?x0 . wd:Q2086445 wdt:P57 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2086445 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1431 ?x0 . wd:Q2086445 wdt:P1431 ?x0 . wd:Q1361018 wdt:P58 ?x0 . wd:Q2086445 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 204325,
    "split": "gold_test",
    "en": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May",
    "optimized": "Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?",
    "results": [
      [
        "wd:Q724172"
      ]
    ],
    "direct": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q3282637 is film producer\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8620"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:5349"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:8659"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5577"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:9397"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4746"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:7410"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7736"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:0421"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2045"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:3837"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9288"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:2246"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1324"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:1533"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5040"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:8748"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3862"
      }
    ],
    "masked": "Translate the question “Who was the director, writer, editor and executive producer of the films Uzak and Clouds of May?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8748 is Clouds of May\nkg:4746 is director\nkg:3862 is screenwriter\nkg:2045 is film editor\nkg:1324 is executive producer\nkg:1533 is Uzak\nkg:5349 is film producer\nkg:8620 is occupation"
  },
  {
    "CFQquestionIdx": 50152,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by , directed by , and executive produced by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי , ביים על ידי והפיק מנהל על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆಯಲಾಗಿದೆ, ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 编写、由 M1、M2 和 M3 指导并执行？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Airplane!] written by , directed by , and executive produced by [Jim Abrahams] , [Jerry Zucker] , and [David Zucker]",
    "questionWithBrackets_he": "האם [מטוס!] נכתב על ידי , בימוי והפיק על ידי [ג&#39;ים אברהמס], [ג&#39;רי צוקר] ו[דיוויד צוקר]",
    "questionWithBrackets_kn": "[ಏರ್ಪ್ಲೇನ್!] ಅವರು ಬರೆದಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , [ಜೆರ್ರಿ ಜುಕರ್] ಮತ್ತು [ಡೇವಿಡ್ ಜುಕರ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Airplane!] 是由 [Jim Abrahams]、[Jerry Zucker] 和 [David Zucker] 编写、导演和执行制作的吗？",
    "recursionDepth": 34,
    "sparql": "ASK WHERE { wd:Q497256 wdt:P57 wd:Q363666 . wd:Q497256 wdt:P57 wd:Q448604 . wd:Q497256 wdt:P57 wd:Q452794 . wd:Q497256 wdt:P1431 wd:Q363666 . wd:Q497256 wdt:P1431 wd:Q448604 . wd:Q497256 wdt:P1431 wd:Q452794 . wd:Q497256 wdt:P58 wd:Q363666 . wd:Q497256 wdt:P58 wd:Q448604 . wd:Q497256 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P1431 M1 .\nM0 wdt:P1431 M2 .\nM0 wdt:P1431 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 50152,
    "split": "gold_test",
    "en": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker",
    "optimized": "Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Jim Abrahams, Jerry Zucker, and David Zucker write, direct, and executive produce the movie \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query."
  },
  {
    "CFQquestionIdx": 50153,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by , executive produced by , and directed by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי , הופק על ידי , וביים על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M0 ಅನ್ನು ಬರೆದದ್ದು , ಎಕ್ಸಿಕ್ಯುಟಿವ್ ನಿರ್ಮಿಸಿದವರು ಮತ್ತು M1 , M2 , ಮತ್ತು M3 ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 编写、执行制作并由 M1、M2 和 M3 指导？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Airplane!] written by , executive produced by , and directed by [Jim Abrahams] , [David Zucker] , and [Jerry Zucker]",
    "questionWithBrackets_he": "האם [אווירון!] נכתב על ידי , ההנהלה הופק על ידי וביים [ג&#39;ים אברהמס], [דיוויד צוקר] ו[ג&#39;רי צוקר]",
    "questionWithBrackets_kn": "[ಏರ್ಪ್ಲೇನ್!] ಅವರು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , [ಡೇವಿಡ್ ಜುಕರ್] ಮತ್ತು [ಜೆರ್ರಿ ಜುಕರ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Airplane!] 是由 [Jim Abrahams]、[David Zucker] 和 [Jerry Zucker] 编写、执行制作和导演吗？",
    "recursionDepth": 34,
    "sparql": "ASK WHERE { wd:Q497256 wdt:P57 wd:Q363666 . wd:Q497256 wdt:P57 wd:Q448604 . wd:Q497256 wdt:P57 wd:Q452794 . wd:Q497256 wdt:P1431 wd:Q363666 . wd:Q497256 wdt:P1431 wd:Q448604 . wd:Q497256 wdt:P1431 wd:Q452794 . wd:Q497256 wdt:P58 wd:Q363666 . wd:Q497256 wdt:P58 wd:Q448604 . wd:Q497256 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P1431 M1 .\nM0 wdt:P1431 M2 .\nM0 wdt:P1431 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 50153,
    "split": "gold_test",
    "en": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker",
    "optimized": "Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Jim Abrahams, David Zucker, and Jerry Zucker write, executive produce, and direct the film \"Airplane!\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query."
  },
  {
    "CFQquestionIdx": 187078,
    "expectedResponse": [
      "David Lynch"
    ],
    "questionPatternModEntities": "What writer , director , and executive producer of M0 and M1 executive produced M2 and M3",
    "questionPatternModEntities_he": "איזה סופר, במאי ומפיק בפועל של M0 ו-M1 הפיק את M2 ו-M3",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ಕಾರ್ಯನಿರ್ವಾಹಕ M2 ಮತ್ತು M3 ಅನ್ನು ಯಾವ ಬರಹಗಾರ, ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0和M1的编剧、导演和执行制片人制作了M2和M3？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What writer , director , and executive producer of [Twin Peaks: Fire Walk with Me] and [Twin Peaks] executive produced [My Son, My Son, What Have Ye Done?] and [Surveillance]",
    "questionWithBrackets_he": "איזה כותב, במאי ומפיק בפועל של [Twin Peaks: Fire Walk with Me] ושל [Twin Peaks] הפיק את [My Son, My Son, What Have Ye Doen?] ו-[Surveillance]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ, ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ [ಟ್ವಿನ್ ಪೀಕ್ಸ್: ಫೈರ್ ವಾಕ್ ವಿತ್ ಮಿ] ಮತ್ತು [ಟ್ವಿನ್ ಪೀಕ್ಸ್] ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಮೈ ಸನ್, ಮೈ ಸನ್, ವಾಟ್ ಹ್ಯಾವ್ ಯೇ ಡನ್?] ಮತ್ತು [ಕಣ್ಗಾವಲು] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Twin Peaks: Fire Walk with Me] 和 [Twin Peaks] 执行制作 [My Son, My Son, What Have Ye Done?] 和 [Surveillance] 的编剧、导演和执行制片人是哪位？",
    "recursionDepth": 34,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2085 wdt:P57 ?x0 . wd:Q1140578 wdt:P57 ?x0 . wd:Q583406 wdt:P1431 ?x0 . wd:Q2085 wdt:P1431 ?x0 . wd:Q1140578 wdt:P1431 ?x0 . wd:Q1511905 wdt:P1431 ?x0 . wd:Q2085 wdt:P58 ?x0 . wd:Q1140578 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 187078,
    "split": "gold_test",
    "en": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance",
    "optimized": "Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?",
    "results": [
      [
        "wd:Q2071"
      ]
    ],
    "direct": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwd:Q583406 is Surveillance\nwd:Q2085 is Twin Peaks\nwd:Q1511905 is My Son, My Son, What Have Ye Done?",
    "masks": [
      {
        "uri": "wd:Q2085",
        "mask": "kg:6002"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7117"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:2526"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8250"
      },
      {
        "uri": "wd:Q583406",
        "mask": "kg:8911"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2799"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:8449"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9141"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:1723"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8737"
      },
      {
        "uri": "wd:Q1511905",
        "mask": "kg:6685"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9095"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:3424"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8106"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:8673"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3480"
      }
    ],
    "masked": "Translate the question “Who is the writer, director, and executive producer of \"Twin Peaks: Fire Walk with Me\" and \"Twin Peaks\", who also was the executive producer for \"My Son, My Son, What Have Ye Done?\" and \"Surveillance\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8250 is director\nkg:3480 is screenwriter\nkg:9095 is executive producer\nkg:8673 is Twin Peaks: Fire Walk with Me\nkg:8911 is Surveillance\nkg:3424 is Twin Peaks\nkg:6685 is My Son, My Son, What Have Ye Done?"
  },
  {
    "CFQquestionIdx": 204801,
    "expectedResponse": [
      "Stimulantia"
    ],
    "questionPatternModEntities": "Which film was directed and written by M1 , M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה סרט ביים ונכתב על ידי M1 , M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M1, M2, M3, M4 ಮತ್ತು M5 ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影是由 M1、M2、M3、M4 和 M5 导演和编剧的？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed and written by [Vilgot Sjöman] , [Hans Alfredson] , [Jörn Donner] , [Gustaf Molander] , and [Ingmar Bergman]",
    "questionWithBrackets_he": "איזה סרט בימו ונכתב על ידי [וילגוט סיומן], [הנס אלפרדסון], [יורן דונר], [גוסטף מולנדר] ו[אינגמר ברגמן]",
    "questionWithBrackets_kn": "ಯಾವ ಚಲನಚಿತ್ರವನ್ನು [ವಿಲ್ಗೋಟ್ ಸ್ಜೋಮನ್], [ಹಾನ್ಸ್ ಆಲ್ಫ್ರೆಡ್ಸನ್], [ಜಾರ್ನ್ ಡೋನರ್], [ಗುಸ್ಟಾಫ್ ಮೊಲಾಂಡರ್] ಮತ್ತು [ಇಂಗ್ಮಾರ್ ಬರ್ಗ್‌ಮನ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Vilgot Sjöman]、[Hans Alfredson]、[Jörn Donner]、[Gustaf Molander] 和 [Ingmar Bergman] 导演和编剧的是哪部电影？",
    "recursionDepth": 34,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q7546 . ?x0 wdt:P57 wd:Q982339 . ?x0 wdt:P57 wd:Q1033656 . ?x0 wdt:P57 wd:Q116760 . ?x0 wdt:P57 wd:Q1365463 . ?x0 wdt:P58 wd:Q7546 . ?x0 wdt:P58 wd:Q982339 . ?x0 wdt:P58 wd:Q1033656 . ?x0 wdt:P58 wd:Q116760 . ?x0 wdt:P58 wd:Q1365463 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P57 M5 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4 .\n?x0 wdt:P58 M5\n}",
    "id": 204801,
    "split": "gold_test",
    "en": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman",
    "optimized": "Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?",
    "results": [
      [
        "wd:Q222633"
      ]
    ],
    "direct": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:0018"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:8677"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7912"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:0339"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2275"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:3576"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7175"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:2003"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2971"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:5956"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2253"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:7866"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7909"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:3385"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4227"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:6905"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7909"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:6967"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3875"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:8473"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8834"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:9987"
      }
    ],
    "masked": "Translate the question “Which film had Vilgot Sjöman, Hans Alfredson, Jörn Donner, Gustaf Molander, and Ingmar Bergman as its directors and writers?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2253 is director\nkg:6905 is Jörn Donner\nkg:8473 is Vilgot Sjöman\nkg:8677 is film\nkg:8834 is screenwriter\nkg:6967 is Hans Alfredson\nkg:0018 is instance of\nkg:3385 is Ingmar Bergman\nkg:9987 is Gustaf Molander"
  },
  {
    "CFQquestionIdx": 109313,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M3 a star , director , and cinematographer of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם מלחין של M3 היה כוכב, במאי וצלם קולנוע של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಯ ಸಂಯೋಜಕರು M0, M1 ಮತ್ತು M2 ನ ಸ್ಟಾರ್, ನಿರ್ದೇಶಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರೇ",
    "questionPatternModEntities_zh": "M3的作曲家是M0、M1和M2的明星、导演和摄影师吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a composer of [Spy Kids 3-D: Game Over] a star , director , and cinematographer of [Sin City] , [Sin City: A Dame to Kill For] , and [The Adventures of Sharkboy and Lavagirl in 3-D]",
    "questionWithBrackets_he": "היה מלחין של [Spy Kids 3-D: Game Over] כוכב, במאי וצלם קולנוע של [Sin City] , [Sin City: A Dame to Kill For] ו-[The Adventures of Sharkboy and Lavagirl in 3-D ]",
    "questionWithBrackets_kn": "[ಸ್ಪೈ ಕಿಡ್ಸ್ 3-ಡಿ: ಗೇಮ್ ಓವರ್] ನ ಸಂಯೋಜಕ, [ಸಿನ್ ಸಿಟಿ] , [ಸಿನ್ ಸಿಟಿ: ಎ ಡೇಮ್ ಟು ಕಿಲ್ ಫಾರ್] , ಮತ್ತು [ದಿ ಅಡ್ವೆಂಚರ್ಸ್ ಆಫ್ ಶಾರ್ಕ್‌ಬಾಯ್ ಮತ್ತು ಲವಾಗರ್ಲ್ 3-D ನ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ದೇಶಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ ]",
    "questionWithBrackets_zh": "是 [Spy Kids 3-D: Game Over] 的作曲家 [Sin City]、[Sin City: A Dame to Kill For] 和 [The Adventures of Sharkboy and Lavagirl in 3-D] 的明星、导演和摄影师]？",
    "recursionDepth": 35,
    "sparql": "ASK WHERE { wd:Q1653396 wdt:P161 ?x0 . wd:Q656357 wdt:P161 ?x0 . wd:Q192115 wdt:P161 ?x0 . wd:Q1653396 wdt:P344 ?x0 . wd:Q656357 wdt:P344 ?x0 . wd:Q192115 wdt:P344 ?x0 . wd:Q1653396 wdt:P57 ?x0 . wd:Q656357 wdt:P57 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q550196 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P86 ?x0\n}",
    "id": 109313,
    "split": "gold_test",
    "en": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D",
    "optimized": "Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q550196 is Spy Kids 3-D: Game Over\nwd:Q1653396 is Sin City: A Dame to Kill For\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1653396",
        "mask": "kg:2074"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:5148"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6345"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9911"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:2545"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4329"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:3088"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6524"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:7201"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9626"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:1224"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:7674"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:0943"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5140"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:7667"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4768"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:1669"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9737"
      },
      {
        "uri": "wd:Q550196",
        "mask": "kg:6804"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:5687"
      }
    ],
    "masked": "Translate the question “Did the composer of Spy Kids 3-D: Game Over also serve as the star, director, and cinematographer for Sin City, Sin City: A Dame to Kill For, and The Adventures of Sharkboy and Lavagirl in 3-D?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9737 is director\nkg:5687 is composer\nkg:1669 is Sin City\nkg:7667 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:6804 is Spy Kids 3-D: Game Over\nkg:0943 is Sin City: A Dame to Kill For\nkg:4329 is cast member\nkg:7674 is director of photography"
  },
  {
    "CFQquestionIdx": 109314,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M3 and M4 a editor and star of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם מלחין של M3 ו-M4 היה עורך וכוכב של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಮತ್ತು M4 ಸಂಯೋಜಕರು M0 , M1 , ಮತ್ತು M2 ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3和M4的作曲家是M0、M1和M2的编辑和明星吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] and [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a composer of [A Woman of Paris] and [Pay Day] a editor and star of [Modern Times] , [City Lights] , and [The Essanay-Chaplin Revue of 1916]",
    "questionWithBrackets_he": "האם מלחינה של [אישה מפריז] ו[יום תשלום] הייתה עורכת וכוכבת של [זמנים מודרניים], [אורות העיר] ו[הריוויו של Essanay-Chaplin משנת 1916]",
    "questionWithBrackets_kn": "[ಎ ವುಮನ್ ಆಫ್ ಪ್ಯಾರಿಸ್] ಮತ್ತು [ಪೇ ಡೇ] ಸಂಯೋಜಕರು [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] , [ಸಿಟಿ ಲೈಟ್ಸ್] ಮತ್ತು [1916 ರ ಎಸ್ಸಾನೆ-ಚಾಪ್ಲಿನ್ ರೆವ್ಯೂ] ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆಯಾಗಿದ್ದೀರಾ",
    "questionWithBrackets_zh": "[A Woman of Paris] 和 [Pay Day] 的作曲家是否是 [Modern Times]、[City Lights] 和 [The Essanay-Chaplin Revue of 1916] 的编辑和明星？",
    "recursionDepth": 35,
    "sparql": "ASK WHERE { wd:Q3986814 wdt:P161 ?x0 . wd:Q238211 wdt:P161 ?x0 . wd:Q45602 wdt:P161 ?x0 . wd:Q3986814 wdt:P1040 ?x0 . wd:Q238211 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q199039 wdt:P86 ?x0 . wd:Q470895 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM4 wdt:P86 ?x0\n}",
    "id": 109314,
    "split": "gold_test",
    "en": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916",
    "optimized": "Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is The Essanay-Chaplin Revue of 1916\nwdt:P86 is composer\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q470895 is A Woman of Paris\nwd:Q238211 is City Lights\nwdt:P161 is cast member\nwd:Q45602 is Modern Times",
    "masks": [
      {
        "uri": "wd:Q3986814",
        "mask": "kg:2975"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4743"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:7652"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:5149"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:1481"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7599"
      },
      {
        "uri": "wd:Q3986814",
        "mask": "kg:3709"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8213"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:6990"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0227"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:2929"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1558"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:8907"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:1949"
      },
      {
        "uri": "wd:Q470895",
        "mask": "kg:9350"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:3584"
      }
    ],
    "masked": "Translate the question “Did the composer of \"A Woman of Paris\" and \"Pay Day\" also serve as the editor and star of \"Modern Times\", \"City Lights\", and \"The Essanay-Chaplin Revue of 1916\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3709 is The Essanay-Chaplin Revue of 1916\nkg:3584 is composer\nkg:1558 is film editor\nkg:8907 is Pay Day\nkg:9350 is A Woman of Paris\nkg:6990 is City Lights\nkg:7599 is cast member\nkg:2929 is Modern Times"
  },
  {
    "CFQquestionIdx": 155027,
    "expectedResponse": [
      "Airplane!"
    ],
    "questionPatternModEntities": "What film did M1 , M2 , and M3 executive produce , write , and direct",
    "questionPatternModEntities_he": "איזה סרט M1, M2 ו-M3 הפיק, כתב וביים",
    "questionPatternModEntities_kn": "M1, M2 ಮತ್ತು M3 ಕಾರ್ಯನಿರ್ವಾಹಕರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ಮಿಸಿದರು, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದರು",
    "questionPatternModEntities_zh": "M1、M2 和 M3 执行制作、编写和导演的电影是什么？",
    "questionTemplate": "What [NP_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "questionWithBrackets": "What film did [Jim Abrahams] , [Jerry Zucker] , and [David Zucker] executive produce , write , and direct",
    "questionWithBrackets_he": "איזה סרט [ג&#39;ים אברהמס], [ג&#39;רי צוקר] ו[דיוויד צוקר] הפיקו, כתבו ובימו",
    "questionWithBrackets_kn": "[ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , [ಜೆರ್ರಿ ಜುಕರ್] ಮತ್ತು [ಡೇವಿಡ್ ಜುಕರ್] ಕಾರ್ಯನಿರ್ವಾಹಕರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jim Abrahams]、[Jerry Zucker] 和 [David Zucker] 执行制片、编剧和导演了哪部电影？",
    "recursionDepth": 35,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q448604 . ?x0 wdt:P57 wd:Q363666 . ?x0 wdt:P57 wd:Q452794 . ?x0 wdt:P1431 wd:Q448604 . ?x0 wdt:P1431 wd:Q363666 . ?x0 wdt:P1431 wd:Q452794 . ?x0 wdt:P58 wd:Q448604 . ?x0 wdt:P58 wd:Q363666 . ?x0 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P1431 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 155027,
    "split": "gold_test",
    "en": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct",
    "optimized": "Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?",
    "results": [
      [
        "wd:Q497256"
      ]
    ],
    "direct": "Translate the question “Which movie was executive produced, written, and directed by Jim Abrahams, Jerry Zucker, and David Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query."
  },
  {
    "CFQquestionIdx": 171683,
    "expectedResponse": [
      "The ABCs of Death"
    ],
    "questionPatternModEntities": "What was directed by , written by , and edited by M0 , M1 , M2 , and M3",
    "questionPatternModEntities_he": "מה ביים, נכתב על ידי ונערך על ידי M0, M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ ಏನು ನಿರ್ದೇಶಿಸಲ್ಪಟ್ಟಿದೆ, ಬರೆದಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0、M1、M2 和 M3 的导演、编剧和编辑是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed by , written by , and edited by [Yūdai Yamaguchi] , [Ernesto Díaz Espinoza] , [Adrián García Bogliano] , and [Yoshihiro Nishimura]",
    "questionWithBrackets_he": "מה ביים, נכתב על ידי וערך על ידי [Yūdai Yamaguchi], [Ernesto Díaz Espinoza], [Adrian García Bogliano] ו-[Yoshihiro Nishimura]",
    "questionWithBrackets_kn": "[Yūdai Yamaguchi] , [Ernesto Díaz Espinoza] , [Adrian García Bogliano] , ಮತ್ತು [Yoshihiro Nishimura] ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是由 [Yūdai Yamaguchi]、[Ernesto Díaz Espinoza]、[Adrián García Bogliano] 和 [Yoshihiro Nishimura] 导演、编剧和编辑的？",
    "recursionDepth": 35,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q5836844 . ?x0 wdt:P57 wd:Q5658534 . ?x0 wdt:P57 wd:Q4022902 . ?x0 wdt:P57 wd:Q4023328 . ?x0 wdt:P1040 wd:Q5836844 . ?x0 wdt:P1040 wd:Q5658534 . ?x0 wdt:P1040 wd:Q4022902 . ?x0 wdt:P1040 wd:Q4023328 . ?x0 wdt:P58 wd:Q5836844 . ?x0 wdt:P58 wd:Q5658534 . ?x0 wdt:P58 wd:Q4022902 . ?x0 wdt:P58 wd:Q4023328 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 171683,
    "split": "gold_test",
    "en": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura",
    "optimized": "Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?",
    "results": [
      [
        "wd:Q74535"
      ]
    ],
    "direct": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q4022902 is Yoshihiro Nishimura\nwd:Q5836844 is Ernesto Díaz Espinoza\nwd:Q4023328 is Yūdai Yamaguchi\nwd:Q5658534 is Adrián García Bogliano",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:6052"
      },
      {
        "uri": "wd:Q5836844",
        "mask": "kg:7137"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9191"
      },
      {
        "uri": "wd:Q5658534",
        "mask": "kg:8635"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6239"
      },
      {
        "uri": "wd:Q4022902",
        "mask": "kg:1408"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5097"
      },
      {
        "uri": "wd:Q4023328",
        "mask": "kg:8385"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3227"
      },
      {
        "uri": "wd:Q5836844",
        "mask": "kg:2416"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8623"
      },
      {
        "uri": "wd:Q5658534",
        "mask": "kg:2676"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7557"
      },
      {
        "uri": "wd:Q4022902",
        "mask": "kg:6303"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7928"
      },
      {
        "uri": "wd:Q4023328",
        "mask": "kg:8128"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1479"
      },
      {
        "uri": "wd:Q5836844",
        "mask": "kg:2932"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8507"
      },
      {
        "uri": "wd:Q5658534",
        "mask": "kg:4009"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9669"
      },
      {
        "uri": "wd:Q4022902",
        "mask": "kg:6145"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9452"
      },
      {
        "uri": "wd:Q4023328",
        "mask": "kg:4231"
      }
    ],
    "masked": "Translate the question “Which projects were directed, written, and edited by Yūdai Yamaguchi, Ernesto Díaz Espinoza, Adrián García Bogliano, and Yoshihiro Nishimura?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5097 is director\nkg:9452 is screenwriter\nkg:7928 is film editor\nkg:6145 is Yoshihiro Nishimura\nkg:2932 is Ernesto Díaz Espinoza\nkg:4231 is Yūdai Yamaguchi\nkg:4009 is Adrián García Bogliano"
  },
  {
    "CFQquestionIdx": 34216,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor write , executive produce , and edit M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם עורך סרטים כתב, הפיק וערך את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ಬರೆದಿದ್ದಾರೆಯೇ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影编辑是否编写、执行制作和编辑 M1、M2 和 M3？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor write , executive produce , and edit [Pietà] , [Dream] , and [Moebius]",
    "questionWithBrackets_he": "האם עורך סרטים כתב, הפיק וערך את [Pietà], [Dream] ו[Moebius]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು [ಪಿಯೆಟಾ] , [ಕನಸು] ಮತ್ತು [ಮೊಬಿಯಸ್] ಅನ್ನು ಬರೆದಿದ್ದಾರೆಯೇ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影编辑是否编写、执行制作和编辑 [Pietà]、[Dream] 和 [Moebius]？",
    "recursionDepth": 36,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q484679 wdt:P1040 ?x0 . wd:Q13471372 wdt:P1431 ?x0 . wd:Q483197 wdt:P1431 ?x0 . wd:Q484679 wdt:P1431 ?x0 . wd:Q13471372 wdt:P58 ?x0 . wd:Q483197 wdt:P58 ?x0 . wd:Q484679 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 34216,
    "split": "gold_test",
    "en": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius",
    "optimized": "Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q7042855 is film editor\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:1433"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:6055"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:0243"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3865"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:4327"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1996"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:3804"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3570"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:4852"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1991"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:8894"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4275"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:5891"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9419"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:2395"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7603"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:8287"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9054"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:4257"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6357"
      }
    ],
    "masked": "Translate the question “Did the film editor serve as the film editor, writer, and executive producer for the movies Pietà, Dream, and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2395 is Moebius\nkg:6357 is screenwriter\nkg:3570 is film editor\nkg:9419 is executive producer\nkg:6055 is film editor\nkg:4257 is Dream\nkg:1433 is occupation\nkg:8287 is Pietà"
  },
  {
    "CFQquestionIdx": 34622,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film producer executive produce , edit , and write M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מפיק סרטים הפיק, ערך וכתב את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕ ಕಾರ್ಯನಿರ್ವಾಹಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆಯುತ್ತಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影制片人主管是否制作、编辑和编写了 M1、M2 和 M3？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer executive produce , edit , and write [Fate] , [The Confession] , and [The Waiting Room]",
    "questionWithBrackets_he": "האם מפיק סרטים הפיק, ערך וכתב את [גורל], [הווידוי] ו[חדר ההמתנה]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕ ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಫೇಟ್] , [ಕನ್ಫೆಷನ್] ಮತ್ತು [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಅನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "《命运》、《忏悔录》和《候车室》是否由电影制片人执行制作、编辑和编写？",
    "recursionDepth": 36,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q5437360 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 . wd:Q12813010 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 34622,
    "split": "gold_test",
    "en": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room",
    "optimized": "Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:1754"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:0440"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:7607"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8026"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:5871"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3431"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:2561"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6372"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:2682"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3953"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:4963"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7793"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:9518"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8750"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:0001"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4943"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:1742"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1471"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:9766"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0075"
      }
    ],
    "masked": "Translate the question “Did one film producer serve as the executive producer, editor, and writer for the movies \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1742 is The Waiting Room\nkg:6372 is film editor\nkg:0075 is screenwriter\nkg:8750 is executive producer\nkg:0440 is film producer\nkg:0001 is Fate\nkg:9766 is The Confession\nkg:1754 is occupation"
  },
  {
    "CFQquestionIdx": 186752,
    "expectedResponse": [
      "Agnès Varda"
    ],
    "questionPatternModEntities": "What writer and editor of M0 , M1 , and M2 did M3 marry and influence",
    "questionPatternModEntities_he": "עם איזה סופר ועורך של M0, M1 ו-M2 התחתן M3 והשפיע",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕ M3 ವಿವಾಹವಾದರು ಮತ್ತು ಪ್ರಭಾವ ಬೀರಿದರು",
    "questionPatternModEntities_zh": "M3与M0、M1、M2的哪位作家和编辑结婚并影响了他们？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "questionWithBrackets": "What writer and editor of [Vagabond] , [Varda by Agnès] , and [The Gleaners and I] did [Jacques Demy] marry and influence",
    "questionWithBrackets_he": "עם איזה סופר ועורך של [Vagabond], [Varda מאת Agnès] ו[המלקטים ואני] התחתן והשפיע [Jacques Demy]",
    "questionWithBrackets_kn": "[ವ್ಯಾಗಾಬಾಂಡ್] , [ವಾರ್ದಾ ಬೈ ಆಗ್ನೆಸ್] , ಮತ್ತು [ದಿ ಗ್ಲೀನರ್ಸ್ ಮತ್ತು ನಾನು] ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕ [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ವಿವಾಹವಾದರು ಮತ್ತು ಪ್ರಭಾವ ಬೀರಿದರು",
    "questionWithBrackets_zh": "[Vagabond]、[Varda by Agnès] 和 [The Gleaners and I] 的哪位作家和编辑 [Jacques Demy] 结婚并影响了他们？",
    "recursionDepth": 36,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q63993096 wdt:P1040 ?x0 . wd:Q2298257 wdt:P1040 ?x0 . wd:Q2493884 wdt:P1040 ?x0 . wd:Q63993096 wdt:P58 ?x0 . wd:Q2298257 wdt:P58 ?x0 . wd:Q2493884 wdt:P58 ?x0 . ?x0 wdt:P737 wd:Q312258 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P737 M3 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 186752,
    "split": "gold_test",
    "en": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence",
    "optimized": "Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?",
    "results": [
      [
        "wd:Q229990"
      ]
    ],
    "direct": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy",
    "masks": [
      {
        "uri": "wd:Q63993096",
        "mask": "kg:5915"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9051"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:5660"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7603"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:0696"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3972"
      },
      {
        "uri": "wd:Q63993096",
        "mask": "kg:6351"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6230"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:7801"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9915"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:4098"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0378"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:8577"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:3154"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:8833"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:7828"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:8782"
      }
    ],
    "masked": "Translate the question “Who is the writer and editor of \"Vagabond\", \"Varda by Agnès\", and \"The Gleaners and I\" that Jacques Demy married and was influenced by?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4098 is The Gleaners and I\nkg:0378 is screenwriter\nkg:7801 is Vagabond\nkg:3972 is film editor\nkg:8833 is spouse\nkg:8577 is influenced by\nkg:6351 is Varda by Agnès\nkg:8782 is Jacques Demy"
  },
  {
    "CFQquestionIdx": 187179,
    "expectedResponse": [
      "Charlie Chaplin"
    ],
    "questionPatternModEntities": "What writer , star , director , and composer of M0 and M1 was a director of M2",
    "questionPatternModEntities_he": "איזה סופר, כוכב, במאי ומלחין של M0 ו-M1 היה במאי של M2",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ರ ಯಾವ ಬರಹಗಾರ, ತಾರೆ, ನಿರ್ದೇಶಕ ಮತ್ತು ಸಂಯೋಜಕರು M2 ನ ನಿರ್ದೇಶಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0和M1的哪个作家、明星、导演和作曲家是M2的导演？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] was a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "What writer , star , director , and composer of [Shoulder Arms] and [The Great Dictator] was a director of [The Floorwalker]",
    "questionWithBrackets_he": "איזה סופר, כוכב, במאי ומלחין של [זרועות הכתף] ו[הדיקטטור הגדול] היה במאי של [ה-Floorwalker]",
    "questionWithBrackets_kn": "[ಭುಜದ ತೋಳುಗಳು] ಮತ್ತು [ದಿ ಗ್ರೇಟ್ ಡಿಕ್ಟೇಟರ್] ನ ಯಾವ ಬರಹಗಾರ, ತಾರೆ, ನಿರ್ದೇಶಕ ಮತ್ತು ಸಂಯೋಜಕರು [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] ನಿರ್ದೇಶಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Shoulder Arms] 和 [The Great Dictator] 的哪个作家、明星、导演和作曲家是 [The Floorwalker] 的导演？",
    "recursionDepth": 36,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q109116 wdt:P161 ?x0 . wd:Q1140317 wdt:P161 ?x0 . wd:Q109116 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q1140317 wdt:P57 ?x0 . wd:Q109116 wdt:P86 ?x0 . wd:Q1140317 wdt:P86 ?x0 . wd:Q109116 wdt:P58 ?x0 . wd:Q1140317 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P86 ?x0 .\nM1 wdt:P86 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 187179,
    "split": "gold_test",
    "en": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker",
    "optimized": "Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?",
    "results": [
      [
        "wd:Q882"
      ]
    ],
    "direct": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwd:Q1140317 is Shoulder Arms\nwdt:P161 is cast member\nwd:Q109116 is The Great Dictator",
    "masks": [
      {
        "uri": "wd:Q109116",
        "mask": "kg:9643"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3681"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:1460"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3835"
      },
      {
        "uri": "wd:Q109116",
        "mask": "kg:5568"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6979"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:0540"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1341"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:8222"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8521"
      },
      {
        "uri": "wd:Q109116",
        "mask": "kg:8306"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:5309"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:0661"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:4961"
      },
      {
        "uri": "wd:Q109116",
        "mask": "kg:7067"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7363"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:6175"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2027"
      }
    ],
    "masked": "Translate the question “Who directed \"The Floorwalker\" and also served as the writer, star, director, and composer of \"Shoulder Arms\" and \"The Great Dictator\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8521 is director\nkg:0540 is The Floorwalker\nkg:4961 is composer\nkg:2027 is screenwriter\nkg:6175 is Shoulder Arms\nkg:3835 is cast member\nkg:7067 is The Great Dictator"
  },
  {
    "CFQquestionIdx": 92440,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer a star , writer , editor , cinematographer , and director of M0 and M1",
    "questionPatternModEntities_he": "האם צלם קולנוע היה כוכב, סופר, עורך, צלם קולנוע ובמאי של M0 ו-M1",
    "questionPatternModEntities_kn": "ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಸ್ಟಾರ್, ಬರಹಗಾರ, ಸಂಪಾದಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು M0 ಮತ್ತು M1 ನ ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "电影摄影师是 M0 和 M1 的明星、作家、编辑、电影摄影师和导演吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity]",
    "questionWithBrackets": "Was a cinematographer a star , writer , editor , cinematographer , and director of [Planet Terror] and [Sin City]",
    "questionWithBrackets_he": "האם צלם קולנוע היה כוכב, סופר, עורך, צלם קולנוע ובמאי של [פלנט טרור] ו[עיר החטאים]",
    "questionWithBrackets_kn": "ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಸ್ಟಾರ್, ಬರಹಗಾರ, ಸಂಪಾದಕ, ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು [ಪ್ಲಾನೆಟ್ ಟೆರರ್] ಮತ್ತು [ಸಿನ್ ಸಿಟಿ] ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "电影摄影师是《恐怖星球》和《罪恶之城》的明星、作家、编辑、摄影师和导演吗？",
    "recursionDepth": 37,
    "sparql": "ASK WHERE { wd:Q192115 wdt:P161 ?x0 . wd:Q1165050 wdt:P161 ?x0 . wd:Q192115 wdt:P344 ?x0 . wd:Q1165050 wdt:P344 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q1165050 wdt:P57 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q1165050 wdt:P1040 ?x0 . wd:Q192115 wdt:P58 ?x0 . wd:Q1165050 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 92440,
    "split": "gold_test",
    "en": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City",
    "optimized": "Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q192115",
        "mask": "kg:4804"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7258"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:8579"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7569"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:7604"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5801"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:3811"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4610"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:5537"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1264"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:8506"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6254"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:8940"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1606"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:0254"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9668"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:7570"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3270"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:8571"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4600"
      }
    ],
    "masked": "Translate the question “Did the same cinematographer serve as the star, writer, editor, cinematographer, and director for both \"Planet Terror\" and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8571 is Planet Terror\nkg:6254 is director\nkg:4600 is screenwriter\nkg:9668 is film editor\nkg:7570 is Sin City\nkg:7569 is cast member\nkg:4610 is director of photography"
  },
  {
    "CFQquestionIdx": 92542,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer and star of M1 , M2 , M3 , and M4 M0 's editor and executive producer",
    "questionPatternModEntities_he": "האם היה צלם קולנוע וכוכב של M1 , M2 , M3 ו-M4 M0 העורך והמפיק בפועל של M1",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 M0 ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರೇ",
    "questionPatternModEntities_zh": "M1、M2、M3 和 M4 M0 的编辑和执行制片人是电影摄影师和明星吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer and star of [Contagion] , [Schizopolis] , [Ocean's Eleven] , and [Full Frontal] [Magic Mike XXL] 's editor and executive producer",
    "questionWithBrackets_he": "האם היה צלם קולנוע וכוכב של [Contagion], [Schizopolis], [Ocean&#39;s Eleven] ו-[Full Frontal] [Magic Mike XXL] העורך והמפיק בפועל של",
    "questionWithBrackets_kn": "[ಸಾಂಕ್ರಾಮಿಕ] , [ಸ್ಕಿಜೋಪೊಲಿಸ್] , [ಓಶಿಯನ್ಸ್ ಇಲೆವೆನ್] ಮತ್ತು [ಫುಲ್ ಫ್ರಂಟಲ್] [ಮ್ಯಾಜಿಕ್ ಮೈಕ್ XXL] ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆಯೇ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ",
    "questionWithBrackets_zh": "是[传染病]、[精神分裂症]、[海洋十一人]和[全正面][魔术师麦克XXL]的编辑和执行制片人的电影摄影师和明星吗？",
    "recursionDepth": 37,
    "sparql": "ASK WHERE { wd:Q1432710 wdt:P161 ?x0 . wd:Q2082586 wdt:P161 ?x0 . wd:Q730888 wdt:P161 ?x0 . wd:Q205447 wdt:P161 ?x0 . wd:Q1432710 wdt:P344 ?x0 . wd:Q2082586 wdt:P344 ?x0 . wd:Q730888 wdt:P344 ?x0 . wd:Q205447 wdt:P344 ?x0 . wd:Q17893055 wdt:P1040 ?x0 . wd:Q17893055 wdt:P1431 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM4 wdt:P161 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM0 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0\n}",
    "id": 92542,
    "split": "gold_test",
    "en": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer",
    "results": [
      true
    ]
  },
  {
    "CFQquestionIdx": 139122,
    "expectedResponse": [
      "David Lynch"
    ],
    "questionPatternModEntities": "What cinematographer and editor of M6 did M0 , M1 , M2 , M3 , M4 , and M5 star",
    "questionPatternModEntities_he": "איזה צלם ועורך של M6 כיכבו ב-M0, M1, M2, M3, M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಸಂಪಾದಕರು M0, M1, M2, M3, M4 ಮತ್ತು M5 ತಾರೆಗಳನ್ನು ಮಾಡಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2、M3、M4和M5是哪位摄影师和M6的剪辑师出演的？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What cinematographer and editor of [Six Men Getting Sick] did [The Black Ghiandola] , [Twin Peaks] , [Lumière and Company] , [Dune] , [Inland Empire] , and [Boat] star",
    "questionWithBrackets_he": "איזה צלם ועורך של [Six Men Getting Sick] כיכבו [The Black Ghiandola], [Twin Peaks], [Lumière and Company], [Dune], [Inland Empire] ו-[Boat]",
    "questionWithBrackets_kn": "[ಸಿಕ್ಸ್ ಮೆನ್ ಗೆಟ್ಟಿಂಗ್ ಸಿಕ್] ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಸಂಪಾದಕರು [ದಿ ಬ್ಲ್ಯಾಕ್ ಘಿಯಾಂಡೋಲಾ] , [ಟ್ವಿನ್ ಪೀಕ್ಸ್] , [ಲುಮಿಯೆರ್ ಮತ್ತು ಕಂಪನಿ] , [ಡ್ಯೂನ್] , [ಇನ್‌ಲ್ಯಾಂಡ್ ಎಂಪೈರ್] , ಮತ್ತು [ಬೋಟ್] ನಟಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[The Black Ghiandola]、[Twin Peaks]、[Lumière and Company]、[Dune]、[Inland Empire] 和[Boat] 的电影摄影师和剪辑师是什么？",
    "recursionDepth": 37,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q56756907 wdt:P161 ?x0 . wd:Q3641257 wdt:P161 ?x0 . wd:Q862058 wdt:P161 ?x0 . wd:Q114819 wdt:P161 ?x0 . wd:Q2085 wdt:P161 ?x0 . wd:Q507285 wdt:P161 ?x0 . wd:Q3485595 wdt:P344 ?x0 . wd:Q3485595 wdt:P1040 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM4 wdt:P161 ?x0 .\nM5 wdt:P161 ?x0 .\nM6 wdt:P344 ?x0 .\nM6 wdt:P1040 ?x0\n}",
    "id": 139122,
    "split": "gold_test",
    "en": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star",
    "optimized": "Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?",
    "results": [
      [
        "wd:Q2071"
      ]
    ],
    "direct": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is film editor\nwd:Q507285 is Lumière and Company\nwd:Q862058 is Inland Empire\nwd:Q114819 is Dune\nwd:Q2085 is Twin Peaks\nwd:Q3641257 is Boat\nwd:Q3485595 is Six Men Getting Sick\nwdt:P161 is cast member\nwd:Q56756907 is The Black Ghiandola\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q56756907",
        "mask": "kg:9422"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7696"
      },
      {
        "uri": "wd:Q3641257",
        "mask": "kg:4868"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8652"
      },
      {
        "uri": "wd:Q862058",
        "mask": "kg:9491"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1132"
      },
      {
        "uri": "wd:Q114819",
        "mask": "kg:2112"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1947"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:6104"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7529"
      },
      {
        "uri": "wd:Q507285",
        "mask": "kg:9344"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8903"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:4655"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:7911"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:5484"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9765"
      }
    ],
    "masked": "Translate the question “Who is the cinematographer and editor of \"Six Men Getting Sick\" who also starred in \"The Black Ghiandola\", \"Twin Peaks\", \"Lumière and Company\", \"Dune\", \"Inland Empire\", and \"Boat\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9765 is film editor\nkg:9344 is Lumière and Company\nkg:9491 is Inland Empire\nkg:2112 is Dune\nkg:6104 is Twin Peaks\nkg:4868 is Boat\nkg:5484 is Six Men Getting Sick\nkg:8903 is cast member\nkg:9422 is The Black Ghiandola\nkg:7911 is director of photography"
  },
  {
    "CFQquestionIdx": 187104,
    "expectedResponse": [
      "Agnès Varda"
    ],
    "questionPatternModEntities": "What writer , editor , and director of M0 and M1 did M2 influence and marry",
    "questionPatternModEntities_he": "איזה סופר, עורך ומנהל של M0 ו-M1 השפיע על M2 והתחתן",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ನ ಯಾವ ಬರಹಗಾರ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M2 ಪ್ರಭಾವ ಮತ್ತು ಮದುವೆಯಾದರು",
    "questionPatternModEntities_zh": "M0和M1的哪个作家、编辑和导演影响并结婚了？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "questionWithBrackets": "What writer , editor , and director of [Vagabond] and [The Gleaners and I] did [Jacques Demy] influence and marry",
    "questionWithBrackets_he": "איזה סופר, עורך ומנהל של [Vagabond] ו-[The Gleaners ואני] השפיעו על [Jacques Demy] והתחתנו",
    "questionWithBrackets_kn": "[ವ್ಯಾಗಾಬಾಂಡ್] ಮತ್ತು [ದಿ ಗ್ಲೀನರ್ಸ್ ಮತ್ತು ನಾನು] ಯಾವ ಬರಹಗಾರ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ಪ್ರಭಾವ ಮತ್ತು ಮದುವೆಯಾದರು",
    "questionWithBrackets_zh": "[Vagabond] 和 [The Gleaners and I] 的哪位作家、编辑和导演 [Jacques Demy] 影响并结婚了？",
    "recursionDepth": 37,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2298257 wdt:P57 ?x0 . wd:Q2493884 wdt:P57 ?x0 . wd:Q2298257 wdt:P1040 ?x0 . wd:Q2493884 wdt:P1040 ?x0 . wd:Q2298257 wdt:P58 ?x0 . wd:Q2493884 wdt:P58 ?x0 . ?x0 wdt:P737 wd:Q312258 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\n?x0 wdt:P737 M2 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M2 )\n}",
    "id": 187104,
    "split": "gold_test",
    "en": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry",
    "optimized": "Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?",
    "results": [
      [
        "wd:Q229990"
      ]
    ],
    "direct": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q2493884 is The Gleaners and I\nwdt:P58 is screenwriter\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q312258 is Jacques Demy",
    "masks": [
      {
        "uri": "wd:Q2298257",
        "mask": "kg:4140"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1907"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:6913"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6708"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:4224"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6452"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:8400"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5087"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:0393"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9312"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:2694"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9098"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:5873"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:7181"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9175"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:0709"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:6337"
      }
    ],
    "masked": "Translate the question “Who is the writer, editor, and director of 'Vagabond' and 'The Gleaners and I' that was influenced by and married to Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6708 is director\nkg:2694 is The Gleaners and I\nkg:9098 is screenwriter\nkg:0393 is Vagabond\nkg:5087 is film editor\nkg:9175 is spouse\nkg:5873 is influenced by\nkg:6337 is Jacques Demy"
  },
  {
    "CFQquestionIdx": 78606,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M3 's editor , executive producer , and cinematographer a star and writer of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם העורך, המפיק והצלם של M3 היה כוכב וכותב של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ಸಂಪಾದಕರು , ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರು M0 , M1 , ಮತ್ತು M2 ನ ತಾರೆ ಮತ್ತು ಬರಹಗಾರರೇ",
    "questionPatternModEntities_zh": "M3 的编辑、执行制片人和电影摄影师是 M0、M1 和 M2 的明星和作家吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [The Confession] 's editor , executive producer , and cinematographer a star and writer of [Destiny] , [The Waiting Room] , and [The Third Page]",
    "questionWithBrackets_he": "האם העורך, המפיק והצלם של [הווידוי] היה כוכב וכותב של [Destiny], [חדר ההמתנה] ו[העמוד השלישי]",
    "questionWithBrackets_kn": "[ದಿ ಕನ್ಫೆಷನ್] ನ ಸಂಪಾದಕರು, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರು [ಡೆಸ್ಟಿನಿ] , [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಮೂರನೇ ಪುಟ] ನ ತಾರೆ ಮತ್ತು ಬರಹಗಾರರೇ",
    "questionWithBrackets_zh": "[The Confession] 的编辑、执行制片人和摄影师是 [Destiny]、[The Waiting Room] 和 [The Third Page] 的明星和作家吗？",
    "recursionDepth": 38,
    "sparql": "ASK WHERE { wd:Q6084069 wdt:P161 ?x0 . wd:Q6099428 wdt:P161 ?x0 . wd:Q5265241 wdt:P161 ?x0 . wd:Q12813010 wdt:P344 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q6084069 wdt:P58 ?x0 . wd:Q6099428 wdt:P58 ?x0 . wd:Q5265241 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P344 ?x0 .\nM3 wdt:P1040 ?x0 .\nM3 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 78606,
    "split": "gold_test",
    "en": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page",
    "optimized": "Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6099428 is The Third Page\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q6084069",
        "mask": "kg:1234"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2044"
      },
      {
        "uri": "wd:Q6099428",
        "mask": "kg:9070"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6243"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:8787"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2874"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:6553"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8006"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:0972"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4163"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:9523"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6971"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:0948"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9967"
      },
      {
        "uri": "wd:Q6099428",
        "mask": "kg:3463"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6355"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:9946"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2123"
      }
    ],
    "masked": "Translate the question “Did the editor, executive producer, and cinematographer of 'The Confession' also star in and write 'Destiny', 'The Waiting Room', and 'The Third Page'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3463 is The Third Page\nkg:0948 is The Waiting Room\nkg:4163 is film editor\nkg:2123 is screenwriter\nkg:6971 is executive producer\nkg:9946 is Destiny\nkg:9523 is The Confession\nkg:2874 is cast member\nkg:8006 is director of photography"
  },
  {
    "CFQquestionIdx": 33873,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor edit , write , and direct M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם עורך סרטים ערך, כתב וביים את M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ಎಡಿಟ್ ಮಾಡಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1、M2、M3 和 M4 是否有电影剪辑师编辑、编写和导演？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor edit , write , and direct [Pay Day] , [Modern Times] , [The Floorwalker] , and [Work]",
    "questionWithBrackets_he": "האם עורך סרטים ערך, כתב וביים את [Pay Day], [Modern Times], [The Floorwalker] ו-[Work]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು [ಪೇ ಡೇ] , [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] , [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] ಮತ್ತು [ಕೆಲಸ] ಎಡಿಟ್ ಮಾಡಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影剪辑师是否编辑、编写和导演了 [Pay Day]、[Modern Times]、[The Floorwalker] 和 [Work]？",
    "recursionDepth": 38,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q2445896 wdt:P57 ?x0 . wd:Q199039 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q45602 wdt:P57 ?x0 . wd:Q2445896 wdt:P1040 ?x0 . wd:Q199039 wdt:P1040 ?x0 . wd:Q166739 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q2445896 wdt:P58 ?x0 . wd:Q199039 wdt:P58 ?x0 . wd:Q166739 wdt:P58 ?x0 . wd:Q45602 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 33873,
    "split": "gold_test",
    "en": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work",
    "optimized": "Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q2445896 is Work\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q199039 is Pay Day\nwd:Q7042855 is film editor\nwdt:P106 is occupation\nwd:Q45602 is Modern Times",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8046"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:8783"
      },
      {
        "uri": "wd:Q2445896",
        "mask": "kg:4860"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6519"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:9521"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0434"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:8688"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9435"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:8986"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1978"
      },
      {
        "uri": "wd:Q2445896",
        "mask": "kg:8611"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8254"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:0205"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3852"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:5762"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1014"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:2526"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3822"
      },
      {
        "uri": "wd:Q2445896",
        "mask": "kg:9435"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7078"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:7167"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2885"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:7742"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3586"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:8148"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6336"
      }
    ],
    "masked": "Translate the question “Did a film editor serve as the editor, writer, and director for the films \"Pay Day\", \"Modern Times\", \"The Floorwalker\", and \"Work\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1978 is director\nkg:7742 is The Floorwalker\nkg:9435 is Work\nkg:6336 is screenwriter\nkg:3822 is film editor\nkg:7167 is Pay Day\nkg:8783 is film editor\nkg:8046 is occupation\nkg:8148 is Modern Times"
  },
  {
    "CFQquestionIdx": 187130,
    "expectedResponse": [
      "Zeki Demirkubuz"
    ],
    "questionPatternModEntities": "What writer , executive producer , and editor of M1 and M2 executive produced and edited M0",
    "questionPatternModEntities_he": "איזה סופר, מפיק ועורך של M1 ו-M2 הפיק וערך את M0",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಎಕ್ಸಿಕ್ಯೂಟಿವ್‌ನ ಯಾವ ಬರಹಗಾರ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಸಂಪಾದಕರು M0 ಅನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M1和M2执行制作和编辑M0的作家，执行制片人和编辑？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What writer , executive producer , and editor of [The Waiting Room] and [Fate] executive produced and edited [The Confession]",
    "questionWithBrackets_he": "איזה סופר, מפיק בפועל ועורך של [חדר ההמתנה] ומנהל [גורל] הפיק וערך את [הווידוי]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಸಂಪಾದಕ [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಫೇಟ್] ಕಾರ್ಯನಿರ್ವಾಹಕ [ದಿ ಕನ್ಫೆಷನ್] ಅನ್ನು ನಿರ್ಮಿಸಿ ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[The Waiting Room]和[Fate]执行制作和编辑[The Confession]的作家，执行制片人和编辑？",
    "recursionDepth": 38,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q5437360 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 187130,
    "split": "gold_test",
    "en": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession",
    "optimized": "Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?",
    "results": [
      [
        "wd:Q187261"
      ]
    ],
    "direct": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession",
    "masks": [
      {
        "uri": "wd:Q5437360",
        "mask": "kg:6808"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2426"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:1388"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9203"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:4241"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0403"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:5521"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0410"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:3086"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0869"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:7556"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0108"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:7304"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8283"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:3108"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2878"
      }
    ],
    "masked": "Translate the question “Who is the writer, executive producer, and editor of The Waiting Room, Fate, and The Confession?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3108 is The Waiting Room\nkg:0403 is film editor\nkg:2878 is screenwriter\nkg:0108 is executive producer\nkg:7304 is Fate\nkg:7556 is The Confession"
  },
  {
    "CFQquestionIdx": 204902,
    "expectedResponse": [
      "Stimulantia"
    ],
    "questionPatternModEntities": "Which film was directed by and was written by M1 , M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה סרט ביים ונכתב על ידי M1, M2, M3, M4 ו-M5",
    "questionPatternModEntities_kn": "M1, M2, M3, M4 ಮತ್ತು M5 ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影由 M1、M2、M3、M4 和 M5 导演和编剧？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by and was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed by and was written by [Jörn Donner] , [Vilgot Sjöman] , [Hans Alfredson] , [Gustaf Molander] , and [Ingmar Bergman]",
    "questionWithBrackets_he": "איזה סרט ביים ונכתב על ידי [יורן דונר], [וילגוט סיומן], [הנס אלפרדסון], [גוסטב מולנדר] ו[אינגמר ברגמן]",
    "questionWithBrackets_kn": "ಯಾವ ಚಲನಚಿತ್ರವನ್ನು [ಜಾರ್ನ್ ಡೋನರ್], [ವಿಲ್ಗೋಟ್ ಸ್ಜೋಮನ್], [ಹಾನ್ಸ್ ಆಲ್ಫ್ರೆಡ್ಸನ್], [ಗುಸ್ಟಾಫ್ ಮೊಲಾಂಡರ್] ಮತ್ತು [ಇಂಗ್ಮಾರ್ ಬರ್ಗ್‌ಮನ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "哪部电影由 [Jörn Donner]、[Vilgot Sjöman]、[Hans Alfredson]、[Gustaf Molander] 和 [Ingmar Bergman] 导演和编剧？",
    "recursionDepth": 38,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q7546 . ?x0 wdt:P57 wd:Q982339 . ?x0 wdt:P57 wd:Q1033656 . ?x0 wdt:P57 wd:Q116760 . ?x0 wdt:P57 wd:Q1365463 . ?x0 wdt:P58 wd:Q7546 . ?x0 wdt:P58 wd:Q982339 . ?x0 wdt:P58 wd:Q1033656 . ?x0 wdt:P58 wd:Q116760 . ?x0 wdt:P58 wd:Q1365463 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P57 M5 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4 .\n?x0 wdt:P58 M5\n}",
    "id": 204902,
    "split": "gold_test",
    "en": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman",
    "optimized": "Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?",
    "results": [
      [
        "wd:Q222633"
      ]
    ],
    "direct": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q982339 is Jörn Donner\nwd:Q116760 is Vilgot Sjöman\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q1033656 is Hans Alfredson\nwdt:P31 is instance of\nwd:Q7546 is Ingmar Bergman\nwd:Q1365463 is Gustaf Molander",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:4781"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:3111"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0010"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:7782"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8453"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:9524"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3650"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:8030"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1296"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:6862"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1292"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:0016"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7662"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:1650"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6110"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:6386"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7276"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:5117"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1602"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:5297"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1039"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:8407"
      }
    ],
    "masked": "Translate the question “Which film was directed and written by Jörn Donner, Vilgot Sjöman, Hans Alfredson, Gustaf Molander, and Ingmar Bergman?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1292 is director\nkg:6386 is Jörn Donner\nkg:5297 is Vilgot Sjöman\nkg:3111 is film\nkg:1039 is screenwriter\nkg:5117 is Hans Alfredson\nkg:4781 is instance of\nkg:1650 is Ingmar Bergman\nkg:8407 is Gustaf Molander"
  },
  {
    "CFQquestionIdx": 106877,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a star , editor , cinematographer , and writer of M0 and M1 M2 's executive producer and cinematographer",
    "questionPatternModEntities_he": "האם היה כוכב, עורך, צלם קולנוע וכותב של המפיק והצלם הראשי של M0 ו-M1 M2",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 M2 ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕನ ಸ್ಟಾರ್, ಸಂಪಾದಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0 和 M1 M2 的执行制片人和摄影师是明星、编辑、摄影师和作家吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a star , editor , cinematographer , and writer of [The Waiting Room] and [Destiny] [The Confession] 's executive producer and cinematographer",
    "questionWithBrackets_he": "האם היה כוכב, עורך, צלם קולנוע וכותב של [חדר ההמתנה] ושל [הגורל] [הווידוי] המפיק והצלם הראשי של [הווידוי]",
    "questionWithBrackets_kn": "[ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಡೆಸ್ಟಿನಿ] [ದ ಕನ್ಫೆಷನ್] ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕನ ತಾರೆ, ಸಂಪಾದಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರರೇ",
    "questionWithBrackets_zh": "是[候诊室]和[命运][忏悔]的执行制片人和电影摄影师的明星、编辑、摄影师和作家吗？",
    "recursionDepth": 39,
    "sparql": "ASK WHERE { wd:Q5265241 wdt:P161 ?x0 . wd:Q6084069 wdt:P161 ?x0 . wd:Q5265241 wdt:P344 ?x0 . wd:Q12813010 wdt:P344 ?x0 . wd:Q6084069 wdt:P344 ?x0 . wd:Q5265241 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q5265241 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 106877,
    "split": "gold_test",
    "en": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer",
    "optimized": "Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q5265241 is Destiny\nwd:Q12813010 is The Confession\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q5265241",
        "mask": "kg:1110"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2406"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:9673"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4870"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:4299"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6722"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:2502"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5348"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:8906"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8008"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:3483"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5486"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:1857"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1635"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:4516"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5397"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:4125"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6625"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:7690"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5844"
      }
    ],
    "masked": "Translate the question “Did the executive producer and cinematographer of \"The Waiting Room\" and \"Destiny The Confession\" also serve as an actor, editor, and writer?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7690 is The Waiting Room\nkg:1635 is film editor\nkg:5844 is screenwriter\nkg:5397 is executive producer\nkg:4125 is Destiny\nkg:4516 is The Confession\nkg:4870 is cast member\nkg:8008 is director of photography"
  },
  {
    "CFQquestionIdx": 34423,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor 's spouse write and edit M0 , M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם בן הזוג של עורך סרטים כתב וערך את M0 , M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರ ಸಂಗಾತಿಯು M0 , M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ಬರೆದು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影剪辑师的配偶是否编写和剪辑了 M0、M1、M2、M3 和 M4？",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor 's spouse write and edit [The City Tramp] , [Katzelmacher] , [Why Does Herr R. Run Amok?] , [Whity] , and [In a Year of 13 Moons]",
    "questionWithBrackets_he": "האם בן זוג של עורך סרטים כתב וערך את [נווד העיר], [כצלמאכר], [מדוע מר ר&#39; משתולל?], [למה] ו[בשנה של 13 ירחים]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರ ಸಂಗಾತಿಯು [ದಿ ಸಿಟಿ ಟ್ರ್ಯಾಂಪ್] , [ಕಟ್ಜೆಲ್ಮಾಕರ್] , [ಏಕೆ ಹೆರ್ ಆರ್. ಅಮೋಕ್ ಅನ್ನು ರನ್ ಮಾಡುತ್ತಾನೆ?] , [ವೈಟಿ] , ಮತ್ತು [ಇನ್ ಎ ಇಯರ್ ಆಫ್ 13 ಮೂನ್ಸ್] ಬರೆದು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影剪辑师的配偶是否编写和编辑了[城市流浪汉]、[Katzelmacher]、[R. Herr 先生为何横冲直撞？]、[Whity] 和[13 个月亮的年份]？",
    "recursionDepth": 39,
    "sparql": "ASK WHERE { wd:Q878673 wdt:P1040 ?x0 . wd:Q567519 wdt:P1040 ?x0 . wd:Q543382 wdt:P1040 ?x0 . wd:Q570483 wdt:P1040 ?x0 . wd:Q327427 wdt:P1040 ?x0 . wd:Q878673 wdt:P58 ?x0 . wd:Q567519 wdt:P58 ?x0 . wd:Q543382 wdt:P58 ?x0 . wd:Q570483 wdt:P58 ?x0 . wd:Q327427 wdt:P58 ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P106 wd:Q7042855 . FILTER ( ?x0 != ?x1 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P106 wd:Q7042855 .\nFILTER ( ?x0 != ?x1 )\n}",
    "id": 34423,
    "split": "gold_test",
    "en": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons",
    "optimized": "Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q567519 is Katzelmacher\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q570483 is In a Year of 13 Moons\nwd:Q327427 is Whity\nwd:Q7042855 is film editor\nwd:Q878673 is The City Tramp\nwdt:P106 is occupation\nwd:Q543382 is Why Does Herr R. Run Amok?",
    "masks": [
      {
        "uri": "wd:Q878673",
        "mask": "kg:8541"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6060"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:8102"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4851"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:1836"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1818"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:1514"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9021"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:9586"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7957"
      },
      {
        "uri": "wd:Q878673",
        "mask": "kg:2308"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5731"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:4703"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5207"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:9613"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3675"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:9634"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3636"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:3549"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2960"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:8794"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:6405"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:7017"
      }
    ],
    "masked": "Translate the question “Did the spouse of a film editor write and direct the movies \"The City Tramp\", \"Katzelmacher\", \"Why Does Herr R. Run Amok?\", \"Whity\", and \"In a Year of 13 Moons\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4703 is Katzelmacher\nkg:2960 is screenwriter\nkg:7957 is film editor\nkg:8794 is spouse\nkg:9634 is In a Year of 13 Moons\nkg:3549 is Whity\nkg:7017 is film editor\nkg:2308 is The City Tramp\nkg:6405 is occupation\nkg:9613 is Why Does Herr R. Run Amok?"
  },
  {
    "CFQquestionIdx": 154421,
    "expectedResponse": [
      "Leni Riefenstahl"
    ],
    "questionPatternModEntities": "What female film director edited , wrote , and directed M0 , M1 , and M2",
    "questionPatternModEntities_he": "איזו במאית קולנוע ערכה, כתבה וביימה את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "ಯಾವ ಮಹಿಳಾ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು M0, M1 ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2是哪位女电影导演剪辑、编剧、导演的？",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What female film director edited , wrote , and directed [Tag der Freiheit: Unsere Wehrmacht] , [Olympia] , and [Triumph of the Will]",
    "questionWithBrackets_he": "איזו במאית קולנוע ערכה, כתבה וביימה את [יום החירות: הוורמאכט שלנו], [אולימפיה] ו[ניצחון הרצון]",
    "questionWithBrackets_kn": "ಯಾವ ಮಹಿಳಾ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕಿ [ಫ್ರೀಡಮ್ ಡೇ: ಅವರ್ ವೆರ್ಮಾಚ್ಟ್], [ಒಲಿಂಪಿಯಾ] ಮತ್ತು [ಟ್ರಯಂಫ್ ಆಫ್ ದಿ ವಿಲ್] ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "《自由日：我们的国防军》、《奥林匹亚》和《意志的胜利》是哪位女电影导演剪辑、编剧和导演的？",
    "recursionDepth": 39,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q156497 wdt:P57 ?x0 . wd:Q158069 wdt:P57 ?x0 . wd:Q497617 wdt:P57 ?x0 . wd:Q156497 wdt:P1040 ?x0 . wd:Q158069 wdt:P1040 ?x0 . wd:Q497617 wdt:P1040 ?x0 . wd:Q156497 wdt:P58 ?x0 . wd:Q158069 wdt:P58 ?x0 . wd:Q497617 wdt:P58 ?x0 . ?x0 wdt:P21 wd:Q6581072 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P21 wd:Q6581072\n}",
    "id": 154421,
    "split": "gold_test",
    "en": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will",
    "optimized": "Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?",
    "results": [
      [
        "wd:Q55415"
      ]
    ],
    "direct": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q6581072 is female\nwd:Q156497 is Triumph of the Will\nwd:Q158069 is Olympia\nwdt:P21 is sex or gender\nwd:Q497617 is Tag der Freiheit: Unsere Wehrmacht",
    "masks": [
      {
        "uri": "wd:Q156497",
        "mask": "kg:3881"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5626"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:5918"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7993"
      },
      {
        "uri": "wd:Q497617",
        "mask": "kg:3756"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4957"
      },
      {
        "uri": "wd:Q156497",
        "mask": "kg:4968"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5695"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:5474"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5126"
      },
      {
        "uri": "wd:Q497617",
        "mask": "kg:8309"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0469"
      },
      {
        "uri": "wd:Q156497",
        "mask": "kg:3675"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6487"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:7567"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1694"
      },
      {
        "uri": "wd:Q497617",
        "mask": "kg:8706"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3486"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:7602"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:7114"
      }
    ],
    "masked": "Translate the question “Which female filmmaker was the editor, writer, and director of \"Tag der Freiheit: Unsere Wehrmacht\", \"Olympia\", and \"Triumph of the Will\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4957 is director\nkg:3486 is screenwriter\nkg:0469 is film editor\nkg:7114 is female\nkg:3675 is Triumph of the Will\nkg:7567 is Olympia\nkg:7602 is sex or gender\nkg:8706 is Tag der Freiheit: Unsere Wehrmacht"
  },
  {
    "CFQquestionIdx": 186735,
    "expectedResponse": [
      "George A. Romero"
    ],
    "questionPatternModEntities": "What writer and director of M0 , M1 , M2 , and M3 was a Canadian editor of M5",
    "questionPatternModEntities_he": "איזה סופר ובמאי של M0, M1, M2 ו-M3 היה עורך קנדי של M5",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ನಿರ್ದೇಶಕರು M5 ನ ಕೆನಡಾದ ಸಂಪಾದಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0、M1、M2、M3的哪个作家和导演是M5的加拿大编辑？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "What writer and director of [Day of the Dead] , [Monkey Shines] , [Dawn of the Dead] , and [Survival of the Dead] was a Canadian editor of [The Crazies]",
    "questionWithBrackets_he": "איזה סופר ובמאי של [יום המתים], [קוף זורח], [שחר המתים] ו[הישרדות המתים] היה עורך קנדי של [המשוגעים]",
    "questionWithBrackets_kn": "[ಡೇ ಆಫ್ ದಿ ಡೆಡ್] , [ಮಂಕಿ ಶೈನ್ಸ್] , [ಡಾನ್ ಆಫ್ ದಿ ಡೆಡ್] ಮತ್ತು [ಸರ್ವೈವಲ್ ಆಫ್ ದಿ ಡೆಡ್] ಯಾವ ಬರಹಗಾರ ಮತ್ತು ನಿರ್ದೇಶಕರು [ದಿ ಕ್ರೇಜೀಸ್] ನ ಕೆನಡಾದ ಸಂಪಾದಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[亡灵节]、[猴子闪耀]、[亡灵黎明]和[亡灵生存]的编剧和导演是[疯狂]的加拿大编辑？",
    "recursionDepth": 39,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1277329 wdt:P57 ?x0 . wd:Q219170 wdt:P57 ?x0 . wd:Q219155 wdt:P57 ?x0 . wd:Q198557 wdt:P57 ?x0 . wd:Q627060 wdt:P1040 ?x0 . wd:Q1277329 wdt:P58 ?x0 . wd:Q219170 wdt:P58 ?x0 . wd:Q219155 wdt:P58 ?x0 . wd:Q198557 wdt:P58 ?x0 . ?x0 wdt:P27 wd:Q16 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM5 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\n?x0 wdt:P27 wd:Q16\n}",
    "id": 186735,
    "split": "gold_test",
    "en": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies",
    "optimized": "Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?",
    "results": [
      [
        "wd:Q51511"
      ]
    ],
    "direct": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Survival of the Dead\nwdt:P57 is director\nwd:Q219155 is Dawn of the Dead\nwd:Q198557 is Monkey Shines\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q16 is Canada\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q219170 is Day of the Dead",
    "masks": [
      {
        "uri": "wd:Q1277329",
        "mask": "kg:9499"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7674"
      },
      {
        "uri": "wd:Q219170",
        "mask": "kg:8002"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3516"
      },
      {
        "uri": "wd:Q219155",
        "mask": "kg:8032"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5965"
      },
      {
        "uri": "wd:Q198557",
        "mask": "kg:4284"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6796"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:3077"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4112"
      },
      {
        "uri": "wd:Q1277329",
        "mask": "kg:0019"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4365"
      },
      {
        "uri": "wd:Q219170",
        "mask": "kg:3778"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9788"
      },
      {
        "uri": "wd:Q219155",
        "mask": "kg:1818"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8052"
      },
      {
        "uri": "wd:Q198557",
        "mask": "kg:5806"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2946"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:8393"
      },
      {
        "uri": "wd:Q16",
        "mask": "kg:3439"
      }
    ],
    "masked": "Translate the question “Who is the Canadian editor of \"The Crazies\" who also wrote and directed \"Day of the Dead,\" \"Monkey Shines,\" \"Dawn of the Dead,\" and \"Survival of the Dead\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0019 is Survival of the Dead\nkg:6796 is director\nkg:1818 is Dawn of the Dead\nkg:5806 is Monkey Shines\nkg:2946 is screenwriter\nkg:4112 is film editor\nkg:3439 is Canada\nkg:8393 is country of citizenship\nkg:3077 is The Crazies\nkg:3778 is Day of the Dead"
  },
  {
    "CFQquestionIdx": 31761,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a director and executive producer of M4 direct and write M0 , M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם במאי ומפיק בפועל של M4 ביים וכתב את M0 , M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M4 ನ ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು M0, M1, M2 ಮತ್ತು M3 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M4的导演和执行制片人是否指导并编写了M0，M1，M2和M3？",
    "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a director and executive producer of [1911] direct and write [Police Story 2] , [Chinese Zodiac] , [Police Story] , and [The Fearless Hyena]",
    "questionWithBrackets_he": "האם במאי ומפיק בפועל של [1911] ביים וכתב את [סיפור המשטרה 2], [גלגל המזלות הסיני], [סיפור המשטרה] ו[הצבוע חסר הפחד]",
    "questionWithBrackets_kn": "[1911] ನ ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು [ಪೋಲೀಸ್ ಸ್ಟೋರಿ 2] , [ಚೀನೀ ರಾಶಿಚಕ್ರ] , [ಪೊಲೀಸ್ ಸ್ಟೋರಿ] ಮತ್ತು [ದಿ ಫಿಯರ್‌ಲೆಸ್ ಹೈನಾ] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[1911]的导演兼执行制片人是否导演并编写了[警察故事2]，[十二生肖]，[警察故事]和[无畏的鬣狗]？",
    "recursionDepth": 40,
    "sparql": "ASK WHERE { wd:Q206182 wdt:P57 ?x0 . wd:Q391143 wdt:P57 ?x0 . wd:Q232108 wdt:P57 ?x0 . wd:Q378013 wdt:P57 ?x0 . wd:Q594033 wdt:P57 ?x0 . wd:Q206182 wdt:P1431 ?x0 . wd:Q391143 wdt:P58 ?x0 . wd:Q232108 wdt:P58 ?x0 . wd:Q378013 wdt:P58 ?x0 . wd:Q594033 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM4 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 31761,
    "split": "gold_test",
    "en": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena",
    "optimized": "Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q378013 is Police Story 2\nwdt:P57 is director\nwd:Q232108 is The Fearless Hyena\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q391143 is Chinese Zodiac\nwd:Q206182 is 1911\nwd:Q594033 is Police Story",
    "masks": [
      {
        "uri": "wd:Q206182",
        "mask": "kg:8894"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4350"
      },
      {
        "uri": "wd:Q391143",
        "mask": "kg:8872"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2546"
      },
      {
        "uri": "wd:Q232108",
        "mask": "kg:4204"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9882"
      },
      {
        "uri": "wd:Q378013",
        "mask": "kg:7677"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6640"
      },
      {
        "uri": "wd:Q594033",
        "mask": "kg:7905"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3421"
      },
      {
        "uri": "wd:Q206182",
        "mask": "kg:8467"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7107"
      },
      {
        "uri": "wd:Q391143",
        "mask": "kg:2798"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5003"
      },
      {
        "uri": "wd:Q232108",
        "mask": "kg:1055"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6451"
      },
      {
        "uri": "wd:Q378013",
        "mask": "kg:2393"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6558"
      },
      {
        "uri": "wd:Q594033",
        "mask": "kg:0536"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5272"
      }
    ],
    "masked": "Translate the question “Did the director and executive producer of the movie '1911' also direct and write 'Police Story 2', 'Chinese Zodiac', 'Police Story', and 'The Fearless Hyena'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2393 is Police Story 2\nkg:3421 is director\nkg:1055 is The Fearless Hyena\nkg:5272 is screenwriter\nkg:7107 is executive producer\nkg:2798 is Chinese Zodiac\nkg:8467 is 1911\nkg:0536 is Police Story"
  },
  {
    "CFQquestionIdx": 77631,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 's founder and employee employed by M1 and M2 and employed by M3 and M4",
    "questionPatternModEntities_he": "האם המייסד והעובד של M0 הועסק על ידי M1 ו-M2 והועסק על ידי M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ನ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿ M1 ಮತ್ತು M2 ನಿಂದ ಉದ್ಯೋಗಿಯಾಗಿದ್ದರೇ ಮತ್ತು M3 ಮತ್ತು M4 ನಿಂದ ಉದ್ಯೋಗಿಯಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0 的创始人和雇员是否受雇于 M1 和 M2，受雇于 M3 和 M4？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "Was [Open Data Institute] 's founder and employee employed by [CERN] and [World Wide Web Consortium] and employed by [School of Electronics and Computer Science, University of Southampton] and [Plessey]",
    "questionWithBrackets_he": "האם המייסד והעובד של [Open Data Institute] הועסק על ידי [CERN] ו[World Wide Web Consortium] והועסק על ידי [בית הספר לאלקטרוניקה ומדעי המחשב, אוניברסיטת סאות&#39;המפטון] ו-[Plessey]",
    "questionWithBrackets_kn": "[ಓಪನ್ ಡಾಟಾ ಇನ್ಸ್ಟಿಟ್ಯೂಟ್] ನ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿಯನ್ನು [CERN] ಮತ್ತು [ವರ್ಲ್ಡ್ ವೈಡ್ ವೆಬ್ ಕನ್ಸೋರ್ಟಿಯಂ] ಮತ್ತು [ಸ್ಕೂಲ್ ಆಫ್ ಎಲೆಕ್ಟ್ರಾನಿಕ್ಸ್ ಮತ್ತು ಕಂಪ್ಯೂಟರ್ ಸೈನ್ಸ್, ಸೌತಾಂಪ್ಟನ್ ವಿಶ್ವವಿದ್ಯಾಲಯ] ಮತ್ತು [ಪ್ಲೆಸ್ಸೆ] ನೇಮಕ ಮಾಡಿಕೊಂಡಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Open Data Institute] 的创始人和雇员是否受雇于 [CERN] 和 [万维网联盟]，并受雇于 [南安普敦大学电子与计算机科学学院] 和 [普莱西]？",
    "recursionDepth": 40,
    "sparql": "ASK WHERE { wd:Q7095994 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q42944 . ?x0 wdt:P108 wd:Q7095994 . ?x0 wdt:P108 wd:Q7204713 . ?x0 wdt:P108 wd:Q7432436 . ?x0 wdt:P108 wd:Q37033 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P108 M0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4\n}",
    "id": 77631,
    "split": "gold_test",
    "en": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey",
    "optimized": "Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwdt:P112 is founded by\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwd:Q7095994 is Open Data Institute\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton",
    "masks": [
      {
        "uri": "wd:Q7095994",
        "mask": "kg:6325"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:8250"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1951"
      },
      {
        "uri": "wd:Q42944",
        "mask": "kg:5015"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2971"
      },
      {
        "uri": "wd:Q7095994",
        "mask": "kg:9078"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:4813"
      },
      {
        "uri": "wd:Q7204713",
        "mask": "kg:6742"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:4652"
      },
      {
        "uri": "wd:Q7432436",
        "mask": "kg:5933"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:4034"
      },
      {
        "uri": "wd:Q37033",
        "mask": "kg:0863"
      }
    ],
    "masked": "Translate the question “Did the founder and employee of the Open Data Institute also work for CERN, the World Wide Web Consortium, the School of Electronics and Computer Science at the University of Southampton, and Plessey?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4034 is employer\nkg:8250 is founded by\nkg:0863 is World Wide Web Consortium\nkg:5015 is CERN\nkg:9078 is Open Data Institute\nkg:6742 is Plessey\nkg:5933 is School of Electronics and Computer Science, University of Southampton"
  },
  {
    "CFQquestionIdx": 155066,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What film did M1 , M2 , and M3 write , edit , produce , and direct",
    "questionPatternModEntities_he": "איזה סרט M1, M2 ו-M3 כתבו, ערכו, הפיקו ובימו",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ಬರೆದರು , ಸಂಪಾದಿಸಿದರು , ನಿರ್ಮಿಸಿದರು ಮತ್ತು ನಿರ್ದೇಶಿಸಿದರು",
    "questionPatternModEntities_zh": "M1、M2 和 M3 编写、编辑、制作和导演了哪些电影？",
    "questionTemplate": "What [NP_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "questionWithBrackets": "What film did [Jens Jørgen Thorsen] , [Ole John] , and [Jørgen Leth] write , edit , produce , and direct",
    "questionWithBrackets_he": "איזה סרט כתבו, ערכו, הפיקו ובימוי [Jens Jørgen Thorsen], [Ole John] ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್], [ಓಲೆ ಜಾನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ಬರೆದಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jens Jørgen Thorsen]、[Ole John] 和 [Jørgen Leth] 编写、编辑、制作和导演了哪部电影？",
    "recursionDepth": 40,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P162|wdt:P272 wd:Q562108 . ?x0 wdt:P162|wdt:P272 wd:Q1687239 . ?x0 wdt:P162|wdt:P272 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 155066,
    "split": "gold_test",
    "en": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct",
    "optimized": "Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:2226"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:1439"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3892"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0124"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1212"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3966"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8129"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0318"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9454"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2018"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5553"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5391"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1174"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9807"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1450"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7724"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:9243"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:4627"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9062"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4498"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0980"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2606"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1139"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5001"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2361"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6479"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7110"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2722"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0116"
      }
    ],
    "masked": "Translate the question “Which movie was written, edited, produced, and directed by Jens Jørgen Thorsen, Ole John, and Jørgen Leth?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8129 is director\nkg:1439 is film\nkg:1174 is film editor\nkg:2722 is screenwriter\nkg:0116 is Ole John\nkg:2226 is instance of\nkg:0980 is producer\nkg:7110 is Jens Jørgen Thorsen\nkg:2361 is Jørgen Leth\nkg:2606 is production company"
  },
  {
    "CFQquestionIdx": 187053,
    "expectedResponse": [
      "Robert Rodriguez"
    ],
    "questionPatternModEntities": "What writer , cinematographer , star , editor , and director of M0 and M1 was a executive producer of M2",
    "questionPatternModEntities_he": "איזה סופר, צלם קולנוע, כוכב, עורך ובמאי של M0 ו-M1 היה מפיק בפועל של M2",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M2 ನ ಕಾರ್ಯಕಾರಿ ನಿರ್ಮಾಪಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0和M1的哪个作家、摄影师、明星、编辑和导演是M2的执行制片人？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] was a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "What writer , cinematographer , star , editor , and director of [Sin City] and [The Adventures of Sharkboy and Lavagirl in 3-D] was a executive producer of [From Dusk till Dawn: The Series]",
    "questionWithBrackets_he": "איזה סופר, צלם קולנוע, כוכב, עורך ובמאי של [עיר החטאים] ו[הרפתקאותיהם של Sharkboy and Lavagirl in 3-D] היה מפיק בפועל של [From Dusk to Dawn: The Series]",
    "questionWithBrackets_kn": "[ಸಿನ್ ಸಿಟಿ] ಮತ್ತು [ದಿ ಅಡ್ವೆಂಚರ್ಸ್ ಆಫ್ ಶಾರ್ಕ್‌ಬಾಯ್ ಮತ್ತು ಲಾವಾಗರ್ಲ್ ಇನ್ 3-ಡಿ] ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [ಮುಸ್ಸಂಜೆಯಿಂದ ಬೆಳಗಿನವರೆಗೆ: ದಿ ಸೀರೀಸ್] ನ ಕಾರ್ಯಕಾರಿ ನಿರ್ಮಾಪಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[罪恶之城] 和 [鲨鱼男孩和熔岩女孩历险记 3D] 的哪位作家、摄影师、明星、编辑和导演是 [从黄昏到黎明：系列] 的执行制片人？",
    "recursionDepth": 40,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q192115 wdt:P161 ?x0 . wd:Q656357 wdt:P161 ?x0 . wd:Q192115 wdt:P344 ?x0 . wd:Q656357 wdt:P344 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q656357 wdt:P57 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q656357 wdt:P1040 ?x0 . wd:Q15622760 wdt:P1431 ?x0 . wd:Q192115 wdt:P58 ?x0 . wd:Q656357 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 187053,
    "split": "gold_test",
    "en": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series",
    "optimized": "Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?",
    "results": [
      [
        "wd:Q47284"
      ]
    ],
    "direct": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q15622760 is From Dusk till Dawn: The Series\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q192115",
        "mask": "kg:5482"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3020"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:4788"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9575"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:3214"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2456"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:0060"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5397"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:5676"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1244"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6822"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6948"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:0650"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3924"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:0660"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3797"
      },
      {
        "uri": "wd:Q15622760",
        "mask": "kg:1113"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6106"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:5842"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0178"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6130"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8401"
      }
    ],
    "masked": "Translate the question “Who served as the writer, cinematographer, star, editor, and director for \"Sin City\" and \"The Adventures of Sharkboy and Lavagirl in 3-D\", and was also an executive producer for \"From Dusk till Dawn: The Series\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6948 is director\nkg:1113 is From Dusk till Dawn: The Series\nkg:8401 is screenwriter\nkg:3797 is film editor\nkg:6106 is executive producer\nkg:5842 is Sin City\nkg:6130 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:9575 is cast member\nkg:5397 is director of photography"
  },
  {
    "CFQquestionIdx": 31910,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a director , cinematographer , and writer of M3 write and edit M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם במאי, צלם קולנוע וכותב של M3 כתב וערך את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ನಿರ್ದೇಶಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರ M0, M1 ಮತ್ತು M2 ಅನ್ನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3的导演、摄影师和作家是否编写和编辑了M0、M1和M2？",
    "questionTemplate": "Did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a director , cinematographer , and writer of [This Night] write and edit [Rio das Mortes] , [Lili Marleen] , and [Whity]",
    "questionWithBrackets_he": "האם במאי, צלם קולנוע וכותב של [הלילה הזה] כתב וערך את [ריו דאס מורטס], [לילי מרלין] ו[Whity]",
    "questionWithBrackets_kn": "[ದಿಸ್ ನೈಟ್] ನ ನಿರ್ದೇಶಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರರು [ರಿಯೊ ದಾಸ್ ಮೊರ್ಟೆಸ್] , [ಲಿಲಿ ಮರ್ಲೀನ್] ಮತ್ತು [ವೈಟಿ] ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[今夜] 的导演、摄影师和作家是否编写和编辑了 [Rio das Mortes]、[Lili Marleen] 和 [Whity]？",
    "recursionDepth": 41,
    "sparql": "ASK WHERE { wd:Q1699716 wdt:P344 ?x0 . wd:Q1699716 wdt:P57 ?x0 . wd:Q823767 wdt:P1040 ?x0 . wd:Q686125 wdt:P1040 ?x0 . wd:Q327427 wdt:P1040 ?x0 . wd:Q823767 wdt:P58 ?x0 . wd:Q686125 wdt:P58 ?x0 . wd:Q1699716 wdt:P58 ?x0 . wd:Q327427 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM3 wdt:P344 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 31910,
    "split": "gold_test",
    "en": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity",
    "optimized": "Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q327427 is Whity\nwd:Q1699716 is This Night\nwd:Q823767 is Rio das Mortes\nwd:Q686125 is Lili Marleen\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1699716",
        "mask": "kg:4591"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9084"
      },
      {
        "uri": "wd:Q1699716",
        "mask": "kg:7562"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0671"
      },
      {
        "uri": "wd:Q823767",
        "mask": "kg:6543"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8074"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:1908"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0708"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:1183"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7206"
      },
      {
        "uri": "wd:Q823767",
        "mask": "kg:0618"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8756"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:8658"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3989"
      },
      {
        "uri": "wd:Q1699716",
        "mask": "kg:2058"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2017"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:3976"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1289"
      }
    ],
    "masked": "Translate the question “Did the same person serve as the director, cinematographer, and writer for \"This Night,\" as well as write and edit \"Rio das Mortes,\" \"Lili Marleen,\" and \"Whity\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0671 is director\nkg:1289 is screenwriter\nkg:7206 is film editor\nkg:3976 is Whity\nkg:2058 is This Night\nkg:0618 is Rio das Mortes\nkg:8658 is Lili Marleen\nkg:9084 is director of photography"
  },
  {
    "CFQquestionIdx": 15097,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M4 's American cinematographer edit , direct , and write M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם צלם הקולנוע האמריקאי של M4 ערך, ביים וכתב את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M4 ನ ಅಮೇರಿಕನ್ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ M0 , M1 , ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M4 的美国电影摄影师是否剪辑、导演和编写了 M0、M1 和 M2？",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did [Night of the Living Dead] 's American cinematographer edit , direct , and write [Martin] , [Season of the Witch] , and [The Crazies]",
    "questionWithBrackets_he": "האם צלם הקולנוע האמריקאי של [ליל המתים החיים] ערך, ביים וכתב את [מרטין], [עונת המכשפה] ו[המשוגעים]",
    "questionWithBrackets_kn": "[ನೈಟ್ ಆಫ್ ದಿ ಲಿವಿಂಗ್ ಡೆಡ್] ನ ಅಮೇರಿಕನ್ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ [ಮಾರ್ಟಿನ್] , [ಸೀಸನ್ ಆಫ್ ದಿ ವಿಚ್] ಮತ್ತು [ದಿ ಕ್ರೇಜೀಸ್] ಅನ್ನು ಸಂಪಾದಿಸಿ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[活死人之夜] 的美国摄影师是否编辑、导演和编写了 [马丁]、[女巫季节] 和 [疯狂]？",
    "recursionDepth": 41,
    "sparql": "ASK WHERE { wd:Q623051 wdt:P344 ?x0 . wd:Q1903317 wdt:P57 ?x0 . wd:Q627060 wdt:P57 ?x0 . wd:Q2520777 wdt:P57 ?x0 . wd:Q1903317 wdt:P1040 ?x0 . wd:Q627060 wdt:P1040 ?x0 . wd:Q2520777 wdt:P1040 ?x0 . wd:Q1903317 wdt:P58 ?x0 . wd:Q627060 wdt:P58 ?x0 . wd:Q2520777 wdt:P58 ?x0 . ?x0 wdt:P27 wd:Q30 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM4 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P27 wd:Q30\n}",
    "id": 15097,
    "split": "gold_test",
    "en": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies",
    "optimized": "Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q2520777 is Season of the Witch\nwd:Q1903317 is Martin\nwd:Q623051 is Night of the Living Dead\nwdt:P27 is country of citizenship\nwd:Q627060 is The Crazies\nwd:Q30 is United States of America\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q623051",
        "mask": "kg:7350"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:7456"
      },
      {
        "uri": "wd:Q1903317",
        "mask": "kg:9770"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0976"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:8350"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4706"
      },
      {
        "uri": "wd:Q2520777",
        "mask": "kg:8558"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8173"
      },
      {
        "uri": "wd:Q1903317",
        "mask": "kg:0752"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5088"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:8451"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3913"
      },
      {
        "uri": "wd:Q2520777",
        "mask": "kg:3742"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7874"
      },
      {
        "uri": "wd:Q1903317",
        "mask": "kg:3266"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6445"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:8900"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4888"
      },
      {
        "uri": "wd:Q2520777",
        "mask": "kg:5535"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5180"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:5570"
      },
      {
        "uri": "wd:Q30",
        "mask": "kg:5235"
      }
    ],
    "masked": "Translate the question “Did the American cinematographer of 'Night of the Living Dead' also edit, direct, and write 'Martin', 'Season of the Witch', and 'The Crazies'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8173 is director\nkg:5180 is screenwriter\nkg:7874 is film editor\nkg:5535 is Season of the Witch\nkg:3266 is Martin\nkg:7350 is Night of the Living Dead\nkg:5570 is country of citizenship\nkg:8900 is The Crazies\nkg:5235 is United States of America\nkg:7456 is director of photography"
  },
  {
    "CFQquestionIdx": 187032,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "What writer , cinematographer , and director of M0 , M1 , and M2 wrote and executive produced M3",
    "questionPatternModEntities_he": "איזה סופר, צלם קולנוע ובמאי של M0, M1 ו-M2 כתב והפיק את M3",
    "questionPatternModEntities_kn": "M0, M1 ಮತ್ತು M2 ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M3 ಅನ್ನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1和M2的编剧、摄影师和导演是哪位编剧和执行制作M3的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What writer , cinematographer , and director of [Look at Life] , [Anyone Lived in a Pretty How Town] , and [Filmmaker] wrote and executive produced [Star Wars: Episode IV – A New Hope]",
    "questionWithBrackets_he": "איזה סופר, צלם קולנוע ובמאי של [הסתכל על החיים], [כל אחד גר בעיר יפה] ו[יוצר סרטים] כתב והפיק בפועל [מלחמת הכוכבים: פרק IV - תקווה חדשה]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [Look at Life] , [Anyone Lived in a Pretty How Town] , ಮತ್ತು [ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು] [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ IV – ಎ ನ್ಯೂ ಹೋಪ್] ಬರೆದು ನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Look at Life]、[Anyone Lived in a Pretty How Town] 和 [电影制片人] 的编剧、摄影师和导演 [Star Wars: Episode IV – A New Hope] 是哪位编剧和执行制作的？",
    "recursionDepth": 41,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1869678 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q1415127 wdt:P344 ?x0 . wd:Q1869678 wdt:P57 ?x0 . wd:Q613974 wdt:P57 ?x0 . wd:Q1415127 wdt:P57 ?x0 . wd:Q17738 wdt:P1431 ?x0 . wd:Q1869678 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q1415127 wdt:P58 ?x0 . wd:Q17738 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 187032,
    "split": "gold_test",
    "en": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope",
    "optimized": "Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q1869678 is Look at Life\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1869678",
        "mask": "kg:1093"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3114"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:7038"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2466"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:4744"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4667"
      },
      {
        "uri": "wd:Q1869678",
        "mask": "kg:7842"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4429"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:1713"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2629"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:7839"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3209"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:9889"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9456"
      },
      {
        "uri": "wd:Q1869678",
        "mask": "kg:9563"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0975"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:5200"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0891"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:8423"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1657"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:5527"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8283"
      }
    ],
    "masked": "Translate the question “Who is the writer, cinematographer, and director of \"Look at Life\", \"Anyone Lived in a Pretty How Town\", and \"Filmmaker\" who also wrote and was the executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3209 is director\nkg:8283 is screenwriter\nkg:9456 is executive producer\nkg:5200 is Anyone Lived in a Pretty How Town\nkg:8423 is Filmmaker\nkg:9563 is Look at Life\nkg:5527 is Star Wars: Episode IV – A New Hope\nkg:4667 is director of photography"
  },
  {
    "CFQquestionIdx": 204922,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "Which film was directed by , produced by , written by , and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "איזה סרט ביים, הופק על ידי, נכתב על ידי ונערך על ידי M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影由 M1、M2 和 M3 导演、制作、编剧和剪辑？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed by , produced by , written by , and edited by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "איזה סרט ביים, הופק על ידי, נכתב על ידי ונערך על ידי [Jens Jørgen Thorsen], [Jørgen Leth] ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , [ಜಾರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "哪部电影由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 导演、制作、编剧和剪辑？",
    "recursionDepth": 41,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P162|wdt:P272 wd:Q562108 . ?x0 wdt:P162|wdt:P272 wd:Q1687239 . ?x0 wdt:P162|wdt:P272 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 204922,
    "split": "gold_test",
    "en": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "optimized": "Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:4621"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:5363"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7705"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4363"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4389"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9574"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7637"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:5085"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9313"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6701"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1489"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7263"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8645"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7805"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5595"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3742"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:1456"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0138"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:1218"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1021"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2246"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7976"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4608"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4016"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2605"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2794"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:6236"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5446"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:8120"
      }
    ],
    "masked": "Translate the question “Which film was directed, produced, written, and edited by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7637 is director\nkg:5363 is film\nkg:8645 is film editor\nkg:5446 is screenwriter\nkg:8120 is Ole John\nkg:4621 is instance of\nkg:2246 is producer\nkg:6236 is Jens Jørgen Thorsen\nkg:2605 is Jørgen Leth\nkg:7976 is production company"
  },
  {
    "CFQquestionIdx": 94431,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer that M2 , M3 , M4 , M5 , and M6 were written by and edited by M0",
    "questionPatternModEntities_he": "האם מעצב תלבושות ש- M2 , M3 , M4 , M5 ו- M6 נכתבו על ידי וערכו על ידי M0",
    "questionPatternModEntities_kn": "M2 , M3 , M4 , M5 , ಮತ್ತು M6 ಅನ್ನು M0 ಬರೆದು ಸಂಪಾದಿಸಿದ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರೇ",
    "questionPatternModEntities_zh": "M2、M3、M4、M5、M6是由M0编写和编辑的服装设计师吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] , [entity] , [entity] , [entity] , and [entity] were [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was a costume designer that [Xavier Dolan] , [Xavier Dolan] , [Xavier Dolan] , [Xavier Dolan] , and [Xavier Dolan] were written by and edited by [Xavier Dolan]",
    "questionWithBrackets_he": "האם מעצב תלבושות ש[חאבייר דולן] , [חאווייר דולן], [חוויאר דולן] , [חוויאר דולן] ו[חאווייר דולן] נכתבו על ידי וערכו על ידי [חבייר דולן]",
    "questionWithBrackets_kn": "[ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] , [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] , [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] , [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] ಮತ್ತು [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] ಅವರು [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] ಬರೆದ ಮತ್ತು ಸಂಪಾದಿಸಿದ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರೇ",
    "questionWithBrackets_zh": "[Xavier Dolan]、[Xavier Dolan]、[Xavier Dolan]、[Xavier Dolan] 和[Xavier Dolan] 是由[Xavier Dolan] 编写和编辑的服装设计师吗？",
    "recursionDepth": 42,
    "sparql": "ASK WHERE { wd:Q551861 wdt:P106 wd:Q1323191 . wd:Q3530946 wdt:P1040 wd:Q551861 . wd:Q19885882 wdt:P1040 wd:Q551861 . wd:Q19544249 wdt:P1040 wd:Q551861 . wd:Q2336453 wdt:P1040 wd:Q551861 . wd:Q2615443 wdt:P1040 wd:Q551861 . wd:Q3530946 wdt:P58 wd:Q551861 . wd:Q19885882 wdt:P58 wd:Q551861 . wd:Q19544249 wdt:P58 wd:Q551861 . wd:Q2336453 wdt:P58 wd:Q551861 . wd:Q2615443 wdt:P58 wd:Q551861 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q1323191 .\nM2 wdt:P1040 M0 .\nM3 wdt:P1040 M0 .\nM4 wdt:P1040 M0 .\nM5 wdt:P1040 M0 .\nM6 wdt:P1040 M0 .\nM2 wdt:P58 M0 .\nM3 wdt:P58 M0 .\nM4 wdt:P58 M0 .\nM5 wdt:P58 M0 .\nM6 wdt:P58 M0\n}",
    "id": 94431,
    "split": "gold_test",
    "en": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan",
    "results": [
      true
    ]
  },
  {
    "CFQquestionIdx": 34934,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film producer write , executive produce , edit , and direct M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מפיק סרטים כתב, הפיק, ערך וביים את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ಬರೆದಿದ್ದಾರೆಯೇ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影制片人是否编写、执行制作、编辑和导演 M1、M2 和 M3？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer write , executive produce , edit , and direct [Pietà] , [Moebius] , and [Dream]",
    "questionWithBrackets_he": "האם מפיק סרטים כתב, הפיק בפועל, ערך וביים את [Pietà], [Moebius] ו-[Dream]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ಪಿಯೆಟಾ] , [ಮೊಬಿಯಸ್] ಮತ್ತು [ಕನಸು] ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影制片人是否编写、执行制作、编辑和导演 [Pietà]、[Moebius] 和 [Dream]？",
    "recursionDepth": 42,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q13471372 wdt:P57 ?x0 . wd:Q483197 wdt:P57 ?x0 . wd:Q484679 wdt:P57 ?x0 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q484679 wdt:P1040 ?x0 . wd:Q13471372 wdt:P1431 ?x0 . wd:Q483197 wdt:P1431 ?x0 . wd:Q484679 wdt:P1431 ?x0 . wd:Q13471372 wdt:P58 ?x0 . wd:Q483197 wdt:P58 ?x0 . wd:Q484679 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 34934,
    "split": "gold_test",
    "en": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream",
    "optimized": "Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q3282637 is film producer\nwd:Q484679 is Dream\nwdt:P106 is occupation\nwd:Q483197 is Pietà",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5575"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:3168"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:9459"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0990"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:7432"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5527"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:9703"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5472"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:9971"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4454"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:7356"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7914"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:1425"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2926"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:2306"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5170"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:8676"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5381"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:1247"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9732"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:1602"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9912"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:5916"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4685"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:0621"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2644"
      }
    ],
    "masked": "Translate the question “Did the same person serve as the writer, executive producer, editor, and director for the films Pietà, Moebius, and Dream?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5472 is director\nkg:1602 is Moebius\nkg:2644 is screenwriter\nkg:2926 is film editor\nkg:9732 is executive producer\nkg:3168 is film producer\nkg:0621 is Dream\nkg:5575 is occupation\nkg:5916 is Pietà"
  },
  {
    "CFQquestionIdx": 168446,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was a film that was edited by , written by , and directed by M1 , M2 , and M3",
    "questionPatternModEntities_he": "מהו סרט שנערך על ידי , נכתב על ידי וביים על ידי M1 , M2 ו- M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ ಎಡಿಟ್ ಮಾಡಿದ, ಬರೆದ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionPatternModEntities_zh": "由 M1、M2 和 M3 编辑、编写和导演的电影是什么？",
    "questionTemplate": "What was a [NP_SIMPLE] that was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was a film that was edited by , written by , and directed by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "מה היה סרט שנערך על ידי , נכתב על ידי , וביים על ידי [Jens Jørgen Thorsen], [Jørgen Leth] ו [Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಅವರಿಂದ ಸಂಪಾದಿಸಲ್ಪಟ್ಟ, ಬರೆದ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionWithBrackets_zh": "由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 编辑、编剧和导演的电影是什么？",
    "recursionDepth": 42,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 168446,
    "split": "gold_test",
    "en": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "optimized": "Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:6683"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:6315"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8353"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0499"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6440"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5144"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0254"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7658"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7664"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:1565"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6961"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5783"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6378"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:5101"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3550"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5417"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2919"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4819"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2023"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9845"
      }
    ],
    "masked": "Translate the question “Which film was edited, written, and directed jointly by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0254 is director\nkg:6315 is film\nkg:6378 is film editor\nkg:2023 is screenwriter\nkg:9845 is Ole John\nkg:6683 is instance of\nkg:4819 is Jens Jørgen Thorsen\nkg:5417 is Jørgen Leth"
  },
  {
    "CFQquestionIdx": 204913,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "Which film was directed by , edited by , written by , and produced by M1 , M2 , and M3",
    "questionPatternModEntities_he": "איזה סרט ביים על ידי, נערך על ידי, נכתב על ידי והפיק על ידי M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影由 M1、M2 和 M3 导演、编辑、编剧和制作？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed by , edited by , written by , and produced by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "איזה סרט ביים על ידי, נערך על ידי, נכתב על ידי, והפיק על ידי [Jens Jørgen Thorsen], [Jørgen Leth] ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "哪部电影由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 导演、编辑、编剧和制作？",
    "recursionDepth": 42,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P162|wdt:P272 wd:Q562108 . ?x0 wdt:P162|wdt:P272 wd:Q1687239 . ?x0 wdt:P162|wdt:P272 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 204913,
    "split": "gold_test",
    "en": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "optimized": "Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q11424 is film\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q35979475 is Ole John\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q1687239 is Jens Jørgen Thorsen\nwd:Q562108 is Jørgen Leth\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:2858"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:2375"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3017"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7061"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4848"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4632"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4593"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1922"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4653"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:1575"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7100"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1761"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3050"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4657"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0393"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9436"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0470"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2264"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:1749"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:8141"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5891"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9610"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0880"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5696"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4796"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1011"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0596"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4885"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1382"
      }
    ],
    "masked": "Translate the question “Which film was directed, edited, written, and produced by Jens Jørgen Thorsen, Jørgen Leth, and Ole John?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4593 is director\nkg:2375 is film\nkg:3050 is film editor\nkg:4885 is screenwriter\nkg:1382 is Ole John\nkg:2858 is instance of\nkg:5891 is producer\nkg:0596 is Jens Jørgen Thorsen\nkg:4796 is Jørgen Leth\nkg:9610 is production company"
  },
  {
    "CFQquestionIdx": 15106,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M3 's director edit , executive produce , write , and direct M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם הבמאי של M3 ערך, הפיק, כתב וביים את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ನಿರ್ದೇಶಕರು M0 , M1 , ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ , ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ , ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3 的导演是否编辑、执行制作、编写和指导 M0、M1 和 M2？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did [Ember] 's director edit , executive produce , write , and direct [Fate] , [The Confession] , and [The Waiting Room]",
    "questionWithBrackets_he": "האם הבמאי של [אמבר] ערך, הפיק, כתב וביים את [גורל], [הווידוי] ו[חדר ההמתנה]",
    "questionWithBrackets_kn": "[ಎಂಬರ್] ನ ನಿರ್ದೇಶಕರು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ [ಫೇಟ್] , [ಕನ್ಫೆಷನ್] ಮತ್ತು [ದಿ ವೇಟಿಂಗ್ ರೂಮ್]",
    "questionWithBrackets_zh": "[Ember] 的导演是否编辑、执行制作、编写和导演了 [Fate]、[The Confession] 和 [The Waiting Room]？",
    "recursionDepth": 43,
    "sparql": "ASK WHERE { wd:Q5437360 wdt:P57 ?x0 . wd:Q25479948 wdt:P57 ?x0 . wd:Q12813010 wdt:P57 ?x0 . wd:Q6084069 wdt:P57 ?x0 . wd:Q5437360 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q12813010 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 15106,
    "split": "gold_test",
    "en": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room",
    "optimized": "Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession",
    "masks": [
      {
        "uri": "wd:Q5437360",
        "mask": "kg:8587"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9738"
      },
      {
        "uri": "wd:Q25479948",
        "mask": "kg:7931"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9949"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:7515"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6421"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:4467"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4146"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:2090"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7602"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:3869"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8088"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:4579"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1254"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:6427"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1212"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:2933"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6267"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6064"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4640"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:0732"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9287"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:4638"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7821"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:3865"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2420"
      }
    ],
    "masked": "Translate the question “Did the director of \"Ember\" also edit, write, executive produce, and direct \"Fate\", \"The Confession\", and \"The Waiting Room\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4146 is director\nkg:3865 is The Waiting Room\nkg:1254 is film editor\nkg:2420 is screenwriter\nkg:7931 is Ember\nkg:4640 is executive producer\nkg:0732 is Fate\nkg:4638 is The Confession"
  },
  {
    "CFQquestionIdx": 15107,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M3 's director edit , write , executive produce , and direct M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם הבמאי של M3 ערך, כתב, הפיק מנהל וביים את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ನಿರ್ದೇಶಕರು M0 , M1 , ಮತ್ತು M2 ಅನ್ನು ಎಡಿಟ್ ಮಾಡಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3 的导演是否编辑、编写、执行制作和指导 M0、M1 和 M2？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did [Ember] 's director edit , write , executive produce , and direct [Fate] , [The Waiting Room] , and [The Confession]",
    "questionWithBrackets_he": "האם הבמאי של [אמבר] ערך, כתב, הפיק וביים את [גורל], [חדר ההמתנה] ו[הווידוי]",
    "questionWithBrackets_kn": "[ಎಂಬರ್] ನ ನಿರ್ದೇಶಕರು [ಫೇಟ್] , [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಕನ್ಫೆಷನ್] ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Ember] 的导演是否编辑、编写、执行制作和导演 [Fate]、[The Waiting Room] 和 [The Confession]？",
    "recursionDepth": 43,
    "sparql": "ASK WHERE { wd:Q5437360 wdt:P57 ?x0 . wd:Q25479948 wdt:P57 ?x0 . wd:Q12813010 wdt:P57 ?x0 . wd:Q6084069 wdt:P57 ?x0 . wd:Q5437360 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q12813010 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 15107,
    "split": "gold_test",
    "en": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession",
    "optimized": "Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q6084069 is The Waiting Room\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwd:Q25479948 is Ember\nwdt:P1431 is executive producer\nwd:Q5437360 is Fate\nwd:Q12813010 is The Confession",
    "masks": [
      {
        "uri": "wd:Q5437360",
        "mask": "kg:4432"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8561"
      },
      {
        "uri": "wd:Q25479948",
        "mask": "kg:6201"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6051"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:3408"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3653"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:8593"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5227"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:0096"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2428"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:1986"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7767"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:4658"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6581"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:3768"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8970"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:3713"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3080"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:1120"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0346"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:6579"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0455"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:0890"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8709"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6499"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2761"
      }
    ],
    "masked": "Translate the question “Did the director of \"Ember\" also write, edit, executive produce, and direct \"Fate\", \"The Waiting Room\", and \"The Confession\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5227 is director\nkg:6499 is The Waiting Room\nkg:6581 is film editor\nkg:2761 is screenwriter\nkg:6201 is Ember\nkg:0346 is executive producer\nkg:6579 is Fate\nkg:0890 is The Confession"
  },
  {
    "CFQquestionIdx": 168453,
    "expectedResponse": [
      "Airplane!"
    ],
    "questionPatternModEntities": "What was a film that was executive produced by , directed by , and written by M1 , M2 , and M3",
    "questionPatternModEntities_he": "מהו סרט שהופק על ידי , בימוי ונכתב על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ರವರು ನಿರ್ಮಿಸಿದ, ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ಬರೆದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionPatternModEntities_zh": "由 M1、M2 和 M3 执行制片、导演和编剧的电影是什么？",
    "questionTemplate": "What was a [NP_SIMPLE] that was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was a film that was executive produced by , directed by , and written by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]",
    "questionWithBrackets_he": "מה היה סרט שהופק על ידי , בימוי ונכתב על ידי [דיוויד צוקר], [ג&#39;ים אברהמס] ו[ג&#39;רי צוקר]",
    "questionWithBrackets_kn": "[ಡೇವಿಡ್ ಜುಕರ್] , [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , ಮತ್ತು [ಜೆರ್ರಿ ಜುಕರ್] ರವರು ನಿರ್ಮಿಸಿದ, ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ಬರೆದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionWithBrackets_zh": "由 [David Zucker]、[Jim Abrahams] 和 [Jerry Zucker] 执行制片、导演和编剧的电影是什么？",
    "recursionDepth": 43,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q448604 . ?x0 wdt:P57 wd:Q363666 . ?x0 wdt:P57 wd:Q452794 . ?x0 wdt:P1431 wd:Q448604 . ?x0 wdt:P1431 wd:Q363666 . ?x0 wdt:P1431 wd:Q452794 . ?x0 wdt:P58 wd:Q448604 . ?x0 wdt:P58 wd:Q363666 . ?x0 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P1431 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 168453,
    "split": "gold_test",
    "en": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker",
    "optimized": "Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?",
    "results": [
      [
        "wd:Q497256"
      ]
    ],
    "direct": "Translate the question “Which film was executive produced, directed, and written by David Zucker, Jim Abrahams, and Jerry Zucker?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query."
  },
  {
    "CFQquestionIdx": 152477,
    "expectedResponse": [
      "Kim Ki-duk"
    ],
    "questionPatternModEntities": "What editor and cinematographer of M1 , M2 , and M3 edited , executive produced , and directed M0",
    "questionPatternModEntities_he": "איזה עורך וצלם של M1, M2 ו-M3 ערך, הפיק וביים את M0",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರು M0 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M1、M2和M3的剪辑、执行制作和导演M0是哪位剪辑师和摄影师？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What editor and cinematographer of [Moebius] , [One on One] , and [Amen] edited , executive produced , and directed [Pietà]",
    "questionWithBrackets_he": "איזה עורך וצילום של [Moebius], [אחד על אחד] ו[אמן] ערך, הפיק וביים את [Pietà]",
    "questionWithBrackets_kn": "[ಮೊಬಿಯಸ್] , [ಒನ್ ಆನ್ ಒನ್] , ಮತ್ತು [ಆಮೆನ್] ನ ಯಾವ ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ [ಪಿಯೆಟಾ] ಸಂಪಾದನೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಣ ಮತ್ತು ನಿರ್ದೇಶನ",
    "questionWithBrackets_zh": "[Moebius]、[One on One] 和 [Amen] 的剪辑、执行制作和导演 [Pietà] 是哪位剪辑师和摄影师？",
    "recursionDepth": 43,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q13471372 wdt:P344 ?x0 . wd:Q462025 wdt:P344 ?x0 . wd:Q17041657 wdt:P344 ?x0 . wd:Q483197 wdt:P57 ?x0 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q462025 wdt:P1040 ?x0 . wd:Q17041657 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q483197 wdt:P1431 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0\n}",
    "id": 152477,
    "split": "gold_test",
    "en": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà",
    "optimized": "Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?",
    "results": [
      [
        "wd:Q212990"
      ]
    ],
    "direct": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q17041657 is One on One\nwd:Q462025 is Amen\nwd:Q483197 is Pietà\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q13471372",
        "mask": "kg:4688"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8104"
      },
      {
        "uri": "wd:Q462025",
        "mask": "kg:6455"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4014"
      },
      {
        "uri": "wd:Q17041657",
        "mask": "kg:6812"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5835"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:4230"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4308"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:9181"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1584"
      },
      {
        "uri": "wd:Q462025",
        "mask": "kg:5838"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8088"
      },
      {
        "uri": "wd:Q17041657",
        "mask": "kg:3285"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6451"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:3273"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0039"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:4511"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0372"
      }
    ],
    "masked": "Translate the question “Who is the editor and cinematographer of the films \"Moebius\", \"One on One\", \"Amen\" and \"Pieta\" who also served as the executive producer for \"Pieta\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4308 is director\nkg:9181 is Moebius\nkg:0039 is film editor\nkg:0372 is executive producer\nkg:3285 is One on One\nkg:5838 is Amen\nkg:4511 is Pietà\nkg:5835 is director of photography"
  },
  {
    "CFQquestionIdx": 92884,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a cinematographer that M2 , M3 , and M4 were edited by , were directed by , and starred M0",
    "questionPatternModEntities_he": "האם צלם קולנוע ש- M2 , M3 ו- M4 נערכו על ידי , בוימו על ידי , וכיכבו ב- M0",
    "questionPatternModEntities_kn": "M2, M3 ಮತ್ತು M4 ಅನ್ನು ಸಂಪಾದನೆ ಮಾಡಿದವರು, ನಿರ್ದೇಶಿಸಿದವರು ಮತ್ತು M0 ನಟಿಸಿದ ಛಾಯಾಗ್ರಾಹಕರೇ",
    "questionPatternModEntities_zh": "M2、M3、M4是由M0剪辑、导演、主演的电影摄影师吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by , were [VP_SIMPLE] by , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Was a cinematographer that [Rainer Werner Fassbinder] , [Rainer Werner Fassbinder] , and [Rainer Werner Fassbinder] were edited by , were directed by , and starred [Rainer Werner Fassbinder]",
    "questionWithBrackets_he": "האם צלם קולנוע ש[ריינר ורנר פאסבינדר], [ריינר ורנר פסבינדר] ו[ריינר ורנר פסבינדר] נערכו על ידי , בוימו על ידי , וכיכבו [ריינר ורנר פאסבינדר]",
    "questionWithBrackets_kn": "[ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] , [ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] ಮತ್ತು [ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] ಅವರು ಸಂಪಾದನೆ ಮಾಡಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ನಟಿಸಿದ್ದಾರೆ [ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] ಛಾಯಾಗ್ರಾಹಕರೇ",
    "questionWithBrackets_zh": "[Rainer Werner Fassbinder]、[Rainer Werner Fassbinder] 和 [Rainer Werner Fassbinder] 是由 [Rainer Werner Fassbinder] 剪辑、导演和主演的摄影师吗？",
    "recursionDepth": 44,
    "sparql": "ASK WHERE { wd:Q44426 wdt:P106 wd:Q222344 . wd:Q599423 wdt:P161 wd:Q44426 . wd:Q543382 wdt:P161 wd:Q44426 . wd:Q570483 wdt:P161 wd:Q44426 . wd:Q599423 wdt:P57 wd:Q44426 . wd:Q543382 wdt:P57 wd:Q44426 . wd:Q570483 wdt:P57 wd:Q44426 . wd:Q599423 wdt:P1040 wd:Q44426 . wd:Q543382 wdt:P1040 wd:Q44426 . wd:Q570483 wdt:P1040 wd:Q44426 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q222344 .\nM2 wdt:P161 M0 .\nM3 wdt:P161 M0 .\nM4 wdt:P161 M0 .\nM2 wdt:P57 M0 .\nM3 wdt:P57 M0 .\nM4 wdt:P57 M0 .\nM2 wdt:P1040 M0 .\nM3 wdt:P1040 M0 .\nM4 wdt:P1040 M0\n}",
    "id": 92884,
    "split": "gold_test",
    "en": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder",
    "results": [
      true
    ]
  },
  {
    "CFQquestionIdx": 108450,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a actor that M1 and M2 were influenced by and M4 and M5 married M3 's founder",
    "questionPatternModEntities_he": "האם שחקן ש-M1 ו-M2 הושפעו ממנו ו-M4 ו-M5 התחתנו עם המייסד של M3",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಪ್ರಭಾವಕ್ಕೊಳಗಾದ ನಟ ಮತ್ತು M4 ಮತ್ತು M5 M3 ನ ಸ್ಥಾಪಕನನ್ನು ವಿವಾಹವಾದರೇ",
    "questionPatternModEntities_zh": "是M1和M2受到影响，M4和M5嫁给了M3创始人的演员吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a actor that [Wolfgang Ambros] and [Jan-Mari Carlotti] were influenced by and [Carolyn Dennis] and [Sara Dylan] married [Alexandria Monroe High School] 's founder",
    "questionWithBrackets_he": "האם שחקן ש[וולפגנג אמברוס] ו[ג&#39;אן-מארי קרלוטי] הושפעו ממנו ו[קרולין דניס] ו[שרה דילן] נישאו למייסדה של [תיכון אלכסנדריה מונרו]",
    "questionWithBrackets_kn": "[ವೋಲ್ಫ್ಗ್ಯಾಂಗ್ ಅಂಬ್ರೋಸ್] ಮತ್ತು [ಜಾನ್-ಮಾರಿ ಕಾರ್ಲೋಟ್ಟಿ] ಪ್ರಭಾವಿತರಾದ ನಟ ಮತ್ತು [ಕ್ಯಾರೊಲಿನ್ ಡೆನ್ನಿಸ್] ಮತ್ತು [ಸಾರಾ ಡೈಲನ್] [ಅಲೆಕ್ಸಾಂಡ್ರಿಯಾ ಮನ್ರೋ ಹೈಸ್ಕೂಲ್] ಸ್ಥಾಪಕರನ್ನು ವಿವಾಹವಾದರು",
    "questionWithBrackets_zh": "[Wolfgang Ambros] 和 [Jan-Mari Carlotti] 受[Carolyn Dennis] 和[Sara Dylan] 影响的演员是[Alexandria Monroe High School] 的创始人吗？",
    "recursionDepth": 44,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q33999 . wd:Q12949115 wdt:P737 ?x0 . wd:Q45404 wdt:P737 ?x0 . wd:Q4720983 wdt:P112 ?x0 . ?x0 wdt:P26 wd:Q457433 . ?x0 wdt:P26 wd:Q5045345 . FILTER ( ?x0 != wd:Q457433 ) . FILTER ( ?x0 != wd:Q5045345 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q33999 .\nM1 wdt:P737 ?x0 .\nM2 wdt:P737 ?x0 .\nM3 wdt:P112 ?x0 .\n?x0 wdt:P26 M4 .\n?x0 wdt:P26 M5 .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
    "id": 108450,
    "split": "gold_test",
    "en": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder",
    "results": [
      true
    ]
  },
  {
    "CFQquestionIdx": 152941,
    "expectedResponse": [
      "Tim Berners-Lee"
    ],
    "questionPatternModEntities": "What employee and founder of M0 and M1 was employed by M2 and was employed by M3 and M4",
    "questionPatternModEntities_he": "איזה עובד ומייסד של M0 ו-M1 הועסק על ידי M2 והועסק על ידי M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ನ ಯಾವ ಉದ್ಯೋಗಿ ಮತ್ತು ಸಂಸ್ಥಾಪಕರು M2 ನಿಂದ ಕೆಲಸ ಮಾಡಲ್ಪಟ್ಟಿದ್ದಾರೆ ಮತ್ತು M3 ಮತ್ತು M4 ನಿಂದ ನೇಮಕಗೊಂಡಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0和M1的哪个员工和创始人被M2雇佣，被M3和M4雇佣？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "What employee and founder of [World Wide Web Consortium] and [Open Data Institute] was employed by [Plessey] and was employed by [CERN] and [School of Electronics and Computer Science, University of Southampton]",
    "questionWithBrackets_he": "איזה עובד ומייסד של [World Wide Web Consortium] ו-[Open Data Institute] הועסק על ידי [Plessey] והועסק על ידי [CERN] ו[בית הספר לאלקטרוניקה ומדעי המחשב, אוניברסיטת סאות&#39;המפטון]",
    "questionWithBrackets_kn": "[ವರ್ಲ್ಡ್ ವೈಡ್ ವೆಬ್ ಕನ್ಸೋರ್ಟಿಯಂ] ಮತ್ತು [ಓಪನ್ ಡಾಟಾ ಇನ್‌ಸ್ಟಿಟ್ಯೂಟ್] ಯಾವ ಉದ್ಯೋಗಿ ಮತ್ತು ಸಂಸ್ಥಾಪಕರನ್ನು [ಪ್ಲೆಸ್ಸೆ] ನೇಮಿಸಿಕೊಂಡರು ಮತ್ತು [ಸಿಇಆರ್‌ಎನ್] ಮತ್ತು [ಸ್ಕೂಲ್ ಆಫ್ ಎಲೆಕ್ಟ್ರಾನಿಕ್ಸ್ ಮತ್ತು ಕಂಪ್ಯೂಟರ್ ಸೈನ್ಸ್, ಸೌತಾಂಪ್ಟನ್ ವಿಶ್ವವಿದ್ಯಾಲಯ] ನೇಮಿಸಿಕೊಂಡರು",
    "questionWithBrackets_zh": "[万维网联盟]和[开放数据研究所]的哪位雇员和创始人受雇于[普莱西]并受雇于[欧洲核子研究中心]和[南安普敦大学电子与计算机科学学院]？",
    "recursionDepth": 44,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q37033 wdt:P112 ?x0 . wd:Q7095994 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q7432436 . ?x0 wdt:P108 wd:Q37033 . ?x0 wdt:P108 wd:Q42944 . ?x0 wdt:P108 wd:Q7095994 . ?x0 wdt:P108 wd:Q7204713 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P112 ?x0 .\nM1 wdt:P112 ?x0 .\n?x0 wdt:P108 M0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4\n}",
    "id": 152941,
    "split": "gold_test",
    "en": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton",
    "optimized": "Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?",
    "results": [
      [
        "wd:Q80"
      ]
    ],
    "direct": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q7095994 is Open Data Institute\nwd:Q37033 is World Wide Web Consortium\nwd:Q42944 is CERN\nwdt:P112 is founded by\nwd:Q7204713 is Plessey\nwd:Q7432436 is School of Electronics and Computer Science, University of Southampton",
    "masks": [
      {
        "uri": "wd:Q37033",
        "mask": "kg:8045"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:9127"
      },
      {
        "uri": "wd:Q7095994",
        "mask": "kg:0230"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:0878"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1464"
      },
      {
        "uri": "wd:Q7432436",
        "mask": "kg:5786"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2424"
      },
      {
        "uri": "wd:Q37033",
        "mask": "kg:9985"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:8301"
      },
      {
        "uri": "wd:Q42944",
        "mask": "kg:8837"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1925"
      },
      {
        "uri": "wd:Q7095994",
        "mask": "kg:2585"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:8444"
      },
      {
        "uri": "wd:Q7204713",
        "mask": "kg:7604"
      }
    ],
    "masked": "Translate the question “Who is the founder and an employee of the World Wide Web Consortium and Open Data Institute, formerly employed by Plessey, CERN, and the School of Electronics and Computer Science at the University of Southampton?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8444 is employer\nkg:2585 is Open Data Institute\nkg:9985 is World Wide Web Consortium\nkg:8837 is CERN\nkg:0878 is founded by\nkg:7604 is Plessey\nkg:5786 is School of Electronics and Computer Science, University of Southampton"
  },
  {
    "CFQquestionIdx": 187052,
    "expectedResponse": [
      "Robert Rodriguez"
    ],
    "questionPatternModEntities": "What writer , cinematographer , star , and composer of M3 edited and directed M0 , M1 , and M2",
    "questionPatternModEntities_he": "איזה סופר, צלם קולנוע, כוכב ומלחין של M3 ערך וביים את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಯ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ ಮತ್ತು ಸಂಯೋಜಕರು M0, M1 ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2是哪位作家、摄影师、明星、作曲家编辑和导演的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What writer , cinematographer , star , and composer of [Planet Terror] edited and directed [Sin City: A Dame to Kill For] , [Machete] , and [Sin City]",
    "questionWithBrackets_he": "איזה סופר, צלם קולנוע, כוכב ומלחין של [Planet Terror] ערך וביים את [Sin City: A Dame to Kill For], [Machete] ו-[Sin City]",
    "questionWithBrackets_kn": "[ಪ್ಲಾನೆಟ್ ಟೆರರ್] ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ ಮತ್ತು ಸಂಯೋಜಕರು [ಸಿನ್ ಸಿಟಿ: ಎ ಡೇಮ್ ಟು ಕಿಲ್ ಫಾರ್] , [ಮ್ಯಾಚೆಟ್] ಮತ್ತು [ಸಿನ್ ಸಿಟಿ] ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[恐怖星球]的编剧、摄影师、明星和作曲家编辑和导演了[罪恶之城：为之杀戮的贵妇]、[大砍刀]和[罪恶之城]？",
    "recursionDepth": 44,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1165050 wdt:P161 ?x0 . wd:Q1165050 wdt:P344 ?x0 . wd:Q1653396 wdt:P57 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q128493 wdt:P57 ?x0 . wd:Q1653396 wdt:P1040 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q128493 wdt:P1040 ?x0 . wd:Q1165050 wdt:P86 ?x0 . wd:Q1165050 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM3 wdt:P161 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 187052,
    "split": "gold_test",
    "en": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City",
    "optimized": "Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?",
    "results": [
      [
        "wd:Q47284"
      ]
    ],
    "direct": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q1653396 is Sin City: A Dame to Kill For\nwd:Q128493 is Machete\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1165050",
        "mask": "kg:6302"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9880"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:5178"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6750"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:6092"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8909"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:5016"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3511"
      },
      {
        "uri": "wd:Q128493",
        "mask": "kg:6934"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7326"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:8257"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2909"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:9537"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8851"
      },
      {
        "uri": "wd:Q128493",
        "mask": "kg:3207"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5977"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:3512"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:1594"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:1457"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6683"
      }
    ],
    "masked": "Translate the question “Who is the writer, cinematographer, lead actor, and composer of \"Planet Terror\" that also edited and directed \"Sin City: A Dame to Kill For\", \"Machete\", and \"Sin City\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1457 is Planet Terror\nkg:7326 is director\nkg:1594 is composer\nkg:6683 is screenwriter\nkg:5977 is film editor\nkg:9537 is Sin City\nkg:8257 is Sin City: A Dame to Kill For\nkg:3207 is Machete\nkg:9880 is cast member\nkg:6750 is director of photography"
  },
  {
    "CFQquestionIdx": 16039,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M2 's editor and executive producer direct , edit , write , and executive produce M0 and M1",
    "questionPatternModEntities_he": "האם העורך והמפיק בפועל של M2 ביים, ערך, כתב והפיק בפועל את M0 ו-M1",
    "questionPatternModEntities_kn": "M2 ನ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು M0 ಮತ್ತು M1 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರಾಗಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M2的编辑和执行制片人是否指导、编辑、写作和执行制片M0和M1？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "Did [Pietà] 's editor and executive producer direct , edit , write , and executive produce [Dream] and [Moebius]",
    "questionWithBrackets_he": "האם העורך והמפיק בפועל של [פיאטה] ביים, ערך, כתב והפיק את [Dream] ואת [Moebius]",
    "questionWithBrackets_kn": "[ಪೀಟಾ] ನ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು [ಡ್ರೀಮ್] ಮತ್ತು [ಮೊಬಿಯಸ್] ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Pietà] 的编辑和执行制片人是否指导、编辑、编写和执行制作 [Dream] 和 [Moebius]？",
    "recursionDepth": 45,
    "sparql": "ASK WHERE { wd:Q13471372 wdt:P57 ?x0 . wd:Q484679 wdt:P57 ?x0 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q484679 wdt:P1040 ?x0 . wd:Q13471372 wdt:P1431 ?x0 . wd:Q483197 wdt:P1431 ?x0 . wd:Q484679 wdt:P1431 ?x0 . wd:Q13471372 wdt:P58 ?x0 . wd:Q484679 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 16039,
    "split": "gold_test",
    "en": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius",
    "optimized": "Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q13471372 is Moebius\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q484679 is Dream\nwd:Q483197 is Pietà",
    "masks": [
      {
        "uri": "wd:Q13471372",
        "mask": "kg:6305"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6421"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:5413"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9521"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:8418"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0727"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:2202"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2896"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:1590"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6091"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:7993"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6902"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:5562"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2473"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:0203"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0874"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:5465"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1279"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:2746"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9764"
      }
    ],
    "masked": "Translate the question “Did the director, executive producer, and editor of Pietà also direct, executive produce, write, and edit Dream and Moebius?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9521 is director\nkg:5465 is Moebius\nkg:9764 is screenwriter\nkg:6091 is film editor\nkg:0874 is executive producer\nkg:2746 is Dream\nkg:5562 is Pietà"
  },
  {
    "CFQquestionIdx": 34884,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film producer that founded M4 , M5 , and M6 direct and write M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מפיק סרטים שייסד את M4, M5 ו-M6 ביים וכתב את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M4, M5 ಮತ್ತು M6 ಅನ್ನು ಸ್ಥಾಪಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಬರೆಯುತ್ತಾರೆಯೇ",
    "questionPatternModEntities_zh": "有没有创立M4、M5、M6的电影制片人导演并编写了M1、M2、M3？",
    "questionTemplate": "Did a [NP_SIMPLE] that [VP_SIMPLE] [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer that founded [D.W. Griffith Productions] , [United Artists Corporation] , and [David W. Griffith Corp.] direct and write [The Brahma Diamond] , [His Lost Love] , and [The Birth of a Nation]",
    "questionWithBrackets_he": "האם מפיק סרטים שהקים את [DW Griffith Productions], [United Artists Corporation] ו-[David W. Griffith Corp.] ביים וכתב את [The Brahma Diamond], [His Lost Love] ו-[The Birth of a Nation] ",
    "questionWithBrackets_kn": "[DW ಗ್ರಿಫಿತ್ ಪ್ರೊಡಕ್ಷನ್ಸ್] , [ಯುನೈಟೆಡ್ ಆರ್ಟಿಸ್ಟ್ಸ್ ಕಾರ್ಪೊರೇಷನ್] ಮತ್ತು [ಡೇವಿಡ್ ಡಬ್ಲ್ಯೂ. ಗ್ರಿಫಿತ್ ಕಾರ್ಪ್.] ಸ್ಥಾಪಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ದಿ ಬ್ರಹ್ಮ ಡೈಮಂಡ್] , [ಹಿಸ್ ಲಾಸ್ಟ್ ಲವ್] ಮತ್ತು [ದಿ ಬರ್ತ್ ಆಫ್ ಎ ನೇಷನ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ ",
    "questionWithBrackets_zh": "是否有创办[DW Griffith Productions]、[United Artists Corporation]、[David W. Griffith Corp.] 的电影制片人执导并编写了[The Brahma Diamond]、[His Lost Love] 和[The Birth of a Nation] ",
    "recursionDepth": 45,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q1857205 wdt:P57 ?x0 . wd:Q220394 wdt:P57 ?x0 . wd:Q542216 wdt:P57 ?x0 . wd:Q1857205 wdt:P58 ?x0 . wd:Q220394 wdt:P58 ?x0 . wd:Q542216 wdt:P58 ?x0 . wd:Q3011043 wdt:P112 ?x0 . wd:Q219400 wdt:P112 ?x0 . wd:Q64434913 wdt:P112 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P112 ?x0 .\nM5 wdt:P112 ?x0 .\nM6 wdt:P112 ?x0\n}",
    "id": 34884,
    "split": "gold_test",
    "en": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation",
    "optimized": "Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1857205 is His Lost Love\nwdt:P57 is director\nwd:Q542216 is The Brahma Diamond\nwdt:P58 is screenwriter\nwd:Q219400 is United Artists\nwd:Q220394 is The Birth of a Nation\nwd:Q3282637 is film producer\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q3011043 is D.W. Griffith Productions\nwd:Q64434913 is David W. Griffith Corp.",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8812"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:2810"
      },
      {
        "uri": "wd:Q1857205",
        "mask": "kg:8339"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6076"
      },
      {
        "uri": "wd:Q220394",
        "mask": "kg:3639"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2920"
      },
      {
        "uri": "wd:Q542216",
        "mask": "kg:8409"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7158"
      },
      {
        "uri": "wd:Q1857205",
        "mask": "kg:0465"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4869"
      },
      {
        "uri": "wd:Q220394",
        "mask": "kg:5981"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8651"
      },
      {
        "uri": "wd:Q542216",
        "mask": "kg:5308"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3018"
      },
      {
        "uri": "wd:Q3011043",
        "mask": "kg:4739"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:2513"
      },
      {
        "uri": "wd:Q219400",
        "mask": "kg:2555"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:7815"
      },
      {
        "uri": "wd:Q64434913",
        "mask": "kg:9546"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:9383"
      }
    ],
    "masked": "Translate the question “Did the founder of D.W. Griffith Productions, United Artists Corporation, and David W. Griffith Corp., who is also a film producer, direct and write \"The Brahma Diamond\", \"His Lost Love\", and \"The Birth of a Nation\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0465 is His Lost Love\nkg:7158 is director\nkg:5308 is The Brahma Diamond\nkg:3018 is screenwriter\nkg:2555 is United Artists\nkg:5981 is The Birth of a Nation\nkg:2810 is film producer\nkg:9383 is founded by\nkg:8812 is occupation\nkg:4739 is D.W. Griffith Productions\nkg:9546 is David W. Griffith Corp."
  },
  {
    "CFQquestionIdx": 153893,
    "expectedResponse": [
      "Iván Noel"
    ],
    "questionPatternModEntities": "What executive producer , editor , composer , cinematographer , and director of M2 edited and wrote M0 and M1",
    "questionPatternModEntities_he": "איזה מפיק בפועל, עורך, מלחין, צלם קולנוע ובמאי של M2 ערך וכתב את M0 ו-M1",
    "questionPatternModEntities_kn": "M2 ನ ಯಾವ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ, ಸಂಪಾದಕ, ಸಂಯೋಜಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M0 ಮತ್ತು M1 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M2的执行制片人、剪辑师、作曲家、摄影师和导演是哪位编辑和编写M0和M1的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What executive producer , editor , composer , cinematographer , and director of [Brecha] edited and wrote [Primary!] and [In Your Absence]",
    "questionWithBrackets_he": "איזה מפיק בפועל, עורך, מלחין, צלם קולנוע ובמאי של [ברכה] ערך וכתב את [ראשי!] ו[בהיעדרך]",
    "questionWithBrackets_kn": "[ಬ್ರೆಚಾ] ಯಾವ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ, ಸಂಪಾದಕ, ಸಂಯೋಜಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [ಪ್ರಾಥಮಿಕ!] ಮತ್ತು [ನಿಮ್ಮ ಅನುಪಸ್ಥಿತಿಯಲ್ಲಿ] ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Brecha] 的哪个执行制片人、编辑、作曲家、摄影师和导演编辑和编写了 [Primary!] 和 [In Your Absence]？",
    "recursionDepth": 45,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q4959991 wdt:P344 ?x0 . wd:Q4959991 wdt:P57 ?x0 . wd:Q5375110 wdt:P1040 ?x0 . wd:Q7243050 wdt:P1040 ?x0 . wd:Q4959991 wdt:P1040 ?x0 . wd:Q4959991 wdt:P86 ?x0 . wd:Q4959991 wdt:P1431 ?x0 . wd:Q5375110 wdt:P58 ?x0 . wd:Q7243050 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM2 wdt:P344 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM2 wdt:P86 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 153893,
    "split": "gold_test",
    "en": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence",
    "optimized": "Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?",
    "results": [
      [
        "wd:Q3156378"
      ]
    ],
    "direct": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q5375110 is In Your Absence\nwd:Q7243050 is Primary!\nwd:Q4959991 is Brecha\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q4959991",
        "mask": "kg:4336"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1298"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:4735"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0923"
      },
      {
        "uri": "wd:Q5375110",
        "mask": "kg:9583"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9199"
      },
      {
        "uri": "wd:Q7243050",
        "mask": "kg:6218"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7640"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:1847"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6733"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:4423"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:1984"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:1638"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1879"
      },
      {
        "uri": "wd:Q5375110",
        "mask": "kg:2931"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6806"
      },
      {
        "uri": "wd:Q7243050",
        "mask": "kg:0804"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0770"
      }
    ],
    "masked": "Translate the question “Who is the executive producer, editor, composer, cinematographer, and director of 'Brecha' who also edited and wrote 'Primary!' and 'In Your Absence'?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0923 is director\nkg:1984 is composer\nkg:0770 is screenwriter\nkg:6733 is film editor\nkg:1879 is executive producer\nkg:2931 is In Your Absence\nkg:0804 is Primary!\nkg:1638 is Brecha\nkg:1298 is director of photography"
  },
  {
    "CFQquestionIdx": 187343,
    "expectedResponse": [
      "Sally Ride"
    ],
    "questionPatternModEntities": "Which American founder and employee of M0 was employed by M1 and employed by M2 , M3 , and M4",
    "questionPatternModEntities_he": "איזה מייסד ועובד אמריקאי של M0 הועסק על ידי M1 והועסק על ידי M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ಯ ಯಾವ ಅಮೇರಿಕನ್ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿಯನ್ನು M1 ಮತ್ತು M2, M3 ಮತ್ತು M4 ನಿಂದ ನೇಮಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 的哪位美国创始人和雇员受雇于 M1，受雇于 M2、M3 和 M4？",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which American founder and employee of [Sally Ride Science] was employed by [Center for International Security and Cooperation] and employed by [Stanford University] , [National Aeronautics and Space Administration] , and [University of California, San Diego]",
    "questionWithBrackets_he": "איזה מייסדת ועובדת אמריקאית של [Sally Ride Science] הועסקה על ידי [המרכז לביטחון ושיתוף פעולה בינלאומי] והועסקה על ידי [אוניברסיטת סטנפורד], [מינהל האווירונאוטיקה והחלל הלאומי] ו[אוניברסיטת קליפורניה, סן דייגו]",
    "questionWithBrackets_kn": "[ಸ್ಯಾಲಿ ರೈಡ್ ಸೈನ್ಸ್] ನ ಯಾವ ಅಮೇರಿಕನ್ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿ [ಸೆಂಟರ್ ಫಾರ್ ಇಂಟರ್ನ್ಯಾಷನಲ್ ಸೆಕ್ಯುರಿಟಿ ಅಂಡ್ ಸಹಕಾರ] ಮತ್ತು [ಸ್ಟ್ಯಾನ್‌ಫೋರ್ಡ್ ವಿಶ್ವವಿದ್ಯಾಲಯ] , [ನ್ಯಾಷನಲ್ ಏರೋನಾಟಿಕ್ಸ್ ಮತ್ತು ಸ್ಪೇಸ್ ಅಡ್ಮಿನಿಸ್ಟ್ರೇಷನ್] ಮತ್ತು [ಕ್ಯಾಲಿಫೋರ್ನಿಯಾ ವಿಶ್ವವಿದ್ಯಾಲಯ, ಸ್ಯಾನ್ ಡಿಯಾಗೋ] ನಿಂದ ನೇಮಕಗೊಂಡಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Sally Ride Science] 的哪位美国创始人和雇员受雇于 [国际安全与合作中心] 并受雇于 [斯坦福大学]、[美国国家航空航天局] 和 [加州大学圣地亚哥分校]？",
    "recursionDepth": 45,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q55206 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q55206 . ?x0 wdt:P108 wd:Q23548 . ?x0 wdt:P108 wd:Q41506 . ?x0 wdt:P108 wd:Q622664 . ?x0 wdt:P108 wd:Q5059715 . ?x0 wdt:P27 wd:Q30 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P108 M0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4 .\n?x0 wdt:P27 wd:Q30\n}",
    "id": 187343,
    "split": "gold_test",
    "en": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego",
    "optimized": "Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?",
    "results": [
      [
        "wd:Q49285"
      ]
    ],
    "direct": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is employer\nwd:Q41506 is Stanford University\nwd:Q5059715 is Center for International Security and Cooperation\nwd:Q23548 is National Aeronautics and Space Administration\nwd:Q55206 is Sally Ride Science\nwdt:P27 is country of citizenship\nwdt:P112 is founded by\nwd:Q622664 is University of California, San Diego\nwd:Q30 is United States of America",
    "masks": [
      {
        "uri": "wd:Q55206",
        "mask": "kg:6350"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:6627"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2116"
      },
      {
        "uri": "wd:Q55206",
        "mask": "kg:6725"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:0642"
      },
      {
        "uri": "wd:Q23548",
        "mask": "kg:9642"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:0120"
      },
      {
        "uri": "wd:Q41506",
        "mask": "kg:0485"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5276"
      },
      {
        "uri": "wd:Q622664",
        "mask": "kg:9594"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2472"
      },
      {
        "uri": "wd:Q5059715",
        "mask": "kg:8517"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:0862"
      },
      {
        "uri": "wd:Q30",
        "mask": "kg:5939"
      }
    ],
    "masked": "Translate the question “Which American founder and employee of Sally Ride Science also worked at the Center for International Security and Cooperation, Stanford University, NASA, and University of California, San Diego?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2472 is employer\nkg:0485 is Stanford University\nkg:8517 is Center for International Security and Cooperation\nkg:9642 is National Aeronautics and Space Administration\nkg:6725 is Sally Ride Science\nkg:0862 is country of citizenship\nkg:6627 is founded by\nkg:9594 is University of California, San Diego\nkg:5939 is United States of America"
  },
  {
    "CFQquestionIdx": 106924,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a star , writer , and editor of M0 , M1 , and M2 M3 's cinematographer , director , editor , and composer",
    "questionPatternModEntities_he": "האם כוכב, כותב ועורך של M0, M1 ו-M2 M3 היה צלם קולנוע, במאי, עורך ומלחין",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 M3 ನ ಛಾಯಾಗ್ರಾಹಕ , ನಿರ್ದೇಶಕ , ಸಂಪಾದಕ ಮತ್ತು ಸಂಯೋಜಕನ ಸ್ಟಾರ್ , ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 的电影摄影师、导演、剪辑师和作曲家是 M0、M1 和 M2 的明星、作家和剪辑师吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a star , writer , and editor of [The Adventures of Sharkboy and Lavagirl in 3-D] , [Planet Terror] , and [Sin City] [Once Upon a Time in Mexico] 's cinematographer , director , editor , and composer",
    "questionWithBrackets_he": "היה כוכב, כותב ועורך של [הרפתקאותיהם של Sharkboy and Lavagirl in 3-D], [Planet Terror] ו-[Sin City] [פעם במקסיקו] של הקולנוע, הבמאי, העורך והמלחין ",
    "questionWithBrackets_kn": "[ದಿ ಅಡ್ವೆಂಚರ್ಸ್ ಆಫ್ ಶಾರ್ಕ್‌ಬಾಯ್ ಮತ್ತು ಲಾವಾಗರ್ಲ್ ಇನ್ 3-ಡಿ], [ಪ್ಲಾನೆಟ್ ಟೆರರ್] ಮತ್ತು [ಸಿನ್ ಸಿಟಿ] [ಒನ್ಸ್ ಅಪಾನ್ ಎ ಟೈಮ್ ಇನ್ ಮೆಕ್ಸಿಕೋ] ನ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ದೇಶಕ, ಸಂಪಾದಕ ಮತ್ತು ಸಂಯೋಜಕನ ಸ್ಟಾರ್, ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರಾಗಿದ್ದರು. ",
    "questionWithBrackets_zh": "曾是[鲨鱼男孩和熔岩女孩历险记 3-D]、[恐怖星球] 和 [罪恶之城] [墨西哥往事] 的电影摄影师、导演、编辑和作曲家的明星、作家和编辑",
    "recursionDepth": 46,
    "sparql": "ASK WHERE { wd:Q1165050 wdt:P161 ?x0 . wd:Q192115 wdt:P161 ?x0 . wd:Q656357 wdt:P161 ?x0 . wd:Q93853 wdt:P344 ?x0 . wd:Q93853 wdt:P57 ?x0 . wd:Q1165050 wdt:P1040 ?x0 . wd:Q93853 wdt:P1040 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q656357 wdt:P1040 ?x0 . wd:Q93853 wdt:P86 ?x0 . wd:Q1165050 wdt:P58 ?x0 . wd:Q192115 wdt:P58 ?x0 . wd:Q656357 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P344 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 106924,
    "split": "gold_test",
    "en": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer",
    "optimized": "Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Planet Terror\nwdt:P57 is director\nwdt:P86 is composer\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q192115 is Sin City\nwd:Q656357 is The Adventures of Sharkboy and Lavagirl in 3-D\nwd:Q93853 is Once Upon a Time in Mexico\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1165050",
        "mask": "kg:5272"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3085"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:1364"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4904"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6474"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4129"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:9601"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8181"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:6444"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6886"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:7246"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9898"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:4651"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5499"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:1382"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9852"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:5997"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3341"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:4401"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:8596"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:9806"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9314"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:0404"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3649"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:2043"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9344"
      }
    ],
    "masked": "Translate the question “Who served as the star, writer, editor, cinematographer, director, and composer for the films \"The Adventures of Sharkboy and Lavagirl in 3-D\", \"Planet Terror\", \"Sin City\" and \"Once Upon a Time in Mexico\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9806 is Planet Terror\nkg:6886 is director\nkg:8596 is composer\nkg:9344 is screenwriter\nkg:3341 is film editor\nkg:0404 is Sin City\nkg:2043 is The Adventures of Sharkboy and Lavagirl in 3-D\nkg:4401 is Once Upon a Time in Mexico\nkg:4129 is cast member\nkg:8181 is director of photography"
  },
  {
    "CFQquestionIdx": 77647,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 's executive producer and writer employed by M1 , M2 , and M3 and employed by M4 , M5 , and M6",
    "questionPatternModEntities_he": "האם המפיק והכותב הראשי של M0 הועסק על ידי M1 , M2 ו-M3 והועסק על ידי M4 , M5 ו-M6",
    "questionPatternModEntities_kn": "M0 ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಬರಹಗಾರರನ್ನು M1, M2 ಮತ್ತು M3 ಮತ್ತು M4, M5 ಮತ್ತು M6 ನಿಂದ ನೇಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0的执行制片人和编剧是否受雇于M1、M2和M3而受雇于M4、M5和M6？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Howl's Moving Castle] 's executive producer and writer employed by [Nibariki] , [Ghibli Museum] , and [TMS Entertainment] and employed by [Shin-Ei Animation] , [Studio Ghibli] , and [Tokuma Memorial Cultural Foundation for Animation]",
    "questionWithBrackets_he": "האם המפיק והכותב בפועל של [Howl&#39;s Moving Castle] הועסק על ידי [Nibariki], [מוזיאון גיבלי] ו-[TMS Entertainment] והועסק על ידי [Shin-Ei Animation] , [Studio Ghibli] ו[Tokuma Memorial Cultural Cultural Foundation for אנימציה]",
    "questionWithBrackets_kn": "[ಹೌಲ್ಸ್ ಮೂವಿಂಗ್ ಕ್ಯಾಸಲ್] ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಬರಹಗಾರ [ನಿಬಾರಿಕಿ] , [ಘಿಬ್ಲಿ ಮ್ಯೂಸಿಯಂ] ಮತ್ತು [ಟಿಎಂಎಸ್ ಎಂಟರ್‌ಟೈನ್‌ಮೆಂಟ್] ಮತ್ತು [ಶಿನ್-ಈ ಆನಿಮೇಷನ್] , [ಸ್ಟುಡಿಯೋ ಘಿಬ್ಲಿ] , ಮತ್ತು [ಟೋಕುಮಾ ಮೆಮೋರಿಯಲ್ ಕಲ್ಚರಲ್ ಫೌಂಡೇಶನ್ ಕಲ್ಚರಲ್‌ನಿಂದ ನೇಮಕಗೊಂಡಿದ್ದಾರೆ ಬಂಗಾರದ]",
    "questionWithBrackets_zh": "曾受雇于 [Nibariki]、[吉卜力博物馆] 和 [TMS Entertainment] 并受雇于 [Shin-Ei Animation]、[Studio Ghibli] 和 [德间纪念文化基金会]动画片]？",
    "recursionDepth": 46,
    "sparql": "ASK WHERE { wd:Q29011 wdt:P1431 ?x0 . wd:Q29011 wdt:P58 ?x0 . ?x0 wdt:P108 wd:Q1054807 . ?x0 wdt:P108 wd:Q11490471 . ?x0 wdt:P108 wd:Q11371930 . ?x0 wdt:P108 wd:Q182950 . ?x0 wdt:P108 wd:Q1136386 . ?x0 wdt:P108 wd:Q947907 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4 .\n?x0 wdt:P108 M5 .\n?x0 wdt:P108 M6\n}",
    "id": 77647,
    "split": "gold_test",
    "en": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation",
    "optimized": "Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Howl's Moving Castle\nwdt:P108 is employer\nwd:Q1136386 is Shin-Ei Animation\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q11490471 is Tokuma Memorial Cultural Foundation for Animation\nwd:Q947907 is Ghibli Museum\nwd:Q11371930 is Nibariki\nwd:Q182950 is Studio Ghibli\nwd:Q1054807 is TMS Entertainment",
    "masks": [
      {
        "uri": "wd:Q29011",
        "mask": "kg:5891"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4582"
      },
      {
        "uri": "wd:Q29011",
        "mask": "kg:3829"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2791"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1529"
      },
      {
        "uri": "wd:Q1054807",
        "mask": "kg:2192"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:4946"
      },
      {
        "uri": "wd:Q11490471",
        "mask": "kg:9463"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:9581"
      },
      {
        "uri": "wd:Q11371930",
        "mask": "kg:7740"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3812"
      },
      {
        "uri": "wd:Q182950",
        "mask": "kg:6160"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5988"
      },
      {
        "uri": "wd:Q1136386",
        "mask": "kg:1188"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:9948"
      },
      {
        "uri": "wd:Q947907",
        "mask": "kg:6651"
      }
    ],
    "masked": "Translate the question “Did the executive producer and writer of Howl's Moving Castle work for Nibariki, Ghibli Museum, TMS Entertainment, Shin-Ei Animation, Studio Ghibli, and Tokuma Memorial Cultural Foundation for Animation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3829 is Howl's Moving Castle\nkg:9948 is employer\nkg:1188 is Shin-Ei Animation\nkg:2791 is screenwriter\nkg:4582 is executive producer\nkg:9463 is Tokuma Memorial Cultural Foundation for Animation\nkg:6651 is Ghibli Museum\nkg:7740 is Nibariki\nkg:6160 is Studio Ghibli\nkg:2192 is TMS Entertainment"
  },
  {
    "CFQquestionIdx": 139181,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "What cinematographer and writer of M0 , M1 , M2 , and M3 directed , wrote , and executive produced M4",
    "questionPatternModEntities_he": "איזה צלם וכותב של M0, M1, M2 ו-M3 ביים, כתב והפיק מנהלים את M4",
    "questionPatternModEntities_kn": "M0, M1, M2 ಮತ್ತು M3 ನ ಯಾವ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು ಬರಹಗಾರರು M4 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2和M3的哪位电影摄影师和作家导演、编剧和执行制作了M4？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What cinematographer and writer of [Herbie] , [Anyone Lived in a Pretty How Town] , [Filmmaker] , and [1:42.08] directed , wrote , and executive produced [Star Wars: Episode IV – A New Hope]",
    "questionWithBrackets_he": "איזה צלם וכותב של [הרבי], [כל אחד גר בעיר יפה] , [יוצר סרטים] ו-[1:42.08] ביים, כתב והפיק בפועל את [מלחמת הכוכבים: פרק IV - תקווה חדשה]",
    "questionWithBrackets_kn": "ಯಾವ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು ಬರಹಗಾರ [ಹರ್ಬಿ] , [ಯಾರೂ ಲಿವ್ಡ್ ಇನ್ ಎ ಪ್ರೆಟಿ ಹೌ ಟೌನ್] , [ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕ] , ಮತ್ತು [1:42.08] ನಿರ್ದೇಶನ, ಬರೆದ ಮತ್ತು ನಿರ್ವಾಹಕರು [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ IV – ಎ ನ್ಯೂ ಹೋಪ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Herbie]、[Anyone Lived in a Pretty How Town]、[电影制作人] 和 [1:42.08] 的哪位电影摄影师和编剧导演、编剧和执行制作了 [星球大战：第四集 – 新希望]？",
    "recursionDepth": 46,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1415127 wdt:P344 ?x0 . wd:Q208910 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q1609393 wdt:P344 ?x0 . wd:Q17738 wdt:P57 ?x0 . wd:Q17738 wdt:P1431 ?x0 . wd:Q17738 wdt:P58 ?x0 . wd:Q1415127 wdt:P58 ?x0 . wd:Q208910 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q1609393 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P57 ?x0 .\nM4 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 139181,
    "split": "gold_test",
    "en": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope",
    "optimized": "Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1431 is executive producer\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwd:Q1415127 is Filmmaker\nwd:Q208910 is 1:42.08\nwd:Q17738 is Star Wars: Episode IV – A New Hope\nwd:Q1609393 is Herbie\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q1415127",
        "mask": "kg:6487"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2595"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:1210"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5975"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:4715"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5514"
      },
      {
        "uri": "wd:Q1609393",
        "mask": "kg:6128"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0296"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:5442"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7242"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:4030"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8434"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:2634"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8434"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:4519"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8615"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:2452"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8528"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:4375"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2749"
      },
      {
        "uri": "wd:Q1609393",
        "mask": "kg:0815"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7592"
      }
    ],
    "masked": "Translate the question “Who is the cinematographer and writer of \"Herbie,\" \"Anyone Lived in a Pretty How Town,\" \"Filmmaker,\" and \"1:42.08\" that also served as the director, writer, and executive producer for \"Star Wars: Episode IV – A New Hope\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7242 is director\nkg:7592 is screenwriter\nkg:8434 is executive producer\nkg:4375 is Anyone Lived in a Pretty How Town\nkg:4519 is Filmmaker\nkg:2452 is 1:42.08\nkg:2634 is Star Wars: Episode IV – A New Hope\nkg:0815 is Herbie\nkg:0296 is director of photography"
  },
  {
    "CFQquestionIdx": 140224,
    "expectedResponse": [
      "David Lynch"
    ],
    "questionPatternModEntities": "What cinematographer , director , and editor of M3 and M4 executive produced M0 and executive produced M1 and M2",
    "questionPatternModEntities_he": "איזה צלם, במאי ועורך של M3 ו-M4 הפיק את M0 והמנהל הפיק את M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಮತ್ತು M4 ಕಾರ್ಯನಿರ್ವಾಹಕನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕರು, ನಿರ್ದೇಶಕರು ಮತ್ತು ಸಂಪಾದಕರು M0 ಅನ್ನು ನಿರ್ಮಿಸಿದರು ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು M1 ಮತ್ತು M2 ಅನ್ನು ನಿರ್ಮಿಸಿದರು",
    "questionPatternModEntities_zh": "M3和M4的执行制片人M0和执行制片M1和M2是哪个摄影师、导演和剪辑师？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What cinematographer , director , and editor of [Rabbits] and [Six Men Getting Sick] executive produced [Twin Peaks] and executive produced [Twin Peaks: Fire Walk with Me] and [My Son, My Son, What Have Ye Done?]",
    "questionWithBrackets_he": "איזה צלם קולנוע, במאי ועורך של [ארנבים] ו-[Six Men Getting Sick] הפיק את [Twin Peaks] ואיזה הפיק את [Twin Peaks: Fire Walk with Me] ו-[My Son, My Son, What Have Ye Done?] ",
    "questionWithBrackets_kn": "ಯಾವ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ದೇಶಕ ಮತ್ತು ಸಂಪಾದಕರು [ಮೊಲಗಳು] ಮತ್ತು [ಸಿಕ್ಸ್ ಮೆನ್ ಗೆಟ್ಟಿಂಗ್ ಸಿಕ್] ಕಾರ್ಯನಿರ್ವಾಹಕ [ಟ್ವಿನ್ ಪೀಕ್ಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ್ದಾರೆ [ಟ್ವಿನ್ ಪೀಕ್ಸ್: ಫೈರ್ ವಾಕ್ ವಿತ್ ಮಿ] ಮತ್ತು [ಮೈ ಸನ್, ಮೈ ಸನ್, ವಾಟ್ ಹ್ಯಾವ್ ಯೇ ಡನ್?] ",
    "questionWithBrackets_zh": "[兔子]和[六个生病的人]执行制作[双峰]和执行制作[双峰：与我一起走火]和[我的儿子，我的儿子，你做了什么？]的摄影师、导演和编辑",
    "recursionDepth": 46,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q3485595 wdt:P344 ?x0 . wd:Q1473406 wdt:P344 ?x0 . wd:Q3485595 wdt:P57 ?x0 . wd:Q1473406 wdt:P57 ?x0 . wd:Q3485595 wdt:P1040 ?x0 . wd:Q1473406 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1431 ?x0 . wd:Q1511905 wdt:P1431 ?x0 . wd:Q2085 wdt:P1431 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0\n}",
    "id": 140224,
    "split": "gold_test",
    "en": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?",
    "optimized": "Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"",
    "results": [
      [
        "wd:Q2071"
      ]
    ],
    "direct": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P1040 is film editor\nwd:Q1140578 is Twin Peaks: Fire Walk with Me\nwdt:P1431 is executive producer\nwd:Q2085 is Twin Peaks\nwd:Q1473406 is Rabbits\nwd:Q1511905 is My Son, My Son, What Have Ye Done?\nwd:Q3485595 is Six Men Getting Sick\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q3485595",
        "mask": "kg:5070"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6089"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:0618"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4376"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:1169"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9679"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:6760"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4187"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:7819"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2627"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:9557"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3443"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:6602"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0863"
      },
      {
        "uri": "wd:Q1511905",
        "mask": "kg:9722"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5800"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:6263"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4560"
      }
    ],
    "masked": "Translate the question “Who is the cinematographer, director, and editor of \"Rabbits\" and \"Six Men Getting Sick\" who also served as the executive producer for \"Twin Peaks\", \"Twin Peaks: Fire Walk with Me\" and \"My Son, My Son, What Have Ye Done?\"” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4187 is director\nkg:3443 is film editor\nkg:6602 is Twin Peaks: Fire Walk with Me\nkg:4560 is executive producer\nkg:6263 is Twin Peaks\nkg:9557 is Rabbits\nkg:9722 is My Son, My Son, What Have Ye Done?\nkg:7819 is Six Men Getting Sick\nkg:4376 is director of photography"
  },
  {
    "CFQquestionIdx": 31750,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a director and editor of M0 , M1 , M2 , and M3 marry M4 and M5 and marry M6",
    "questionPatternModEntities_he": "האם מנהל ועורך של M0 , M1 , M2 ו-M3 התחתן עם M4 ו-M5 והתחתן עם M6",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ನ ನಿರ್ದೇಶಕರು ಮತ್ತು ಸಂಪಾದಕರು M4 ಮತ್ತು M5 ಅನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ ಮತ್ತು M6 ರನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0、M1、M2、M3的导演和编辑有没有和M4和M5结婚，和M6结婚？",
    "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a director and editor of [The Kid] , [The Floorwalker] , [A Woman] , and [Modern Times] marry [Lita Grey] and [Mildred Harris] and marry [Oona O'Neill]",
    "questionWithBrackets_he": "האם במאי ועורך של [The Kid], [The Floorwalker], [A Woman] ו-[Modern Times] התחתן עם [ליטה גריי] ו[Mildred Harris] והתחתן עם [Oona O&#39;Neill]",
    "questionWithBrackets_kn": "[ದಿ ಕಿಡ್] , [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] , [ಎ ವುಮನ್] ಮತ್ತು [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] ನ ನಿರ್ದೇಶಕರು ಮತ್ತು ಸಂಪಾದಕರು [ಲಿಟಾ ಗ್ರೇ] ಮತ್ತು [ಮಿಲ್ಡ್ರೆಡ್ ಹ್ಯಾರಿಸ್] ಮತ್ತು [ಊನಾ ಓ&#39;ನೀಲ್] ಅವರನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[The Kid]、[The Floorwalker]、[A Woman] 和[Modern Times] 的导演和编辑是否与[Lita Grey] 和[Mildred Harris] 结婚并与[Oona O&#39;Neill] 结婚？",
    "recursionDepth": 47,
    "sparql": "ASK WHERE { wd:Q2449461 wdt:P57 ?x0 . wd:Q45602 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q374172 wdt:P57 ?x0 . wd:Q2449461 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q166739 wdt:P1040 ?x0 . wd:Q374172 wdt:P1040 ?x0 . ?x0 wdt:P26 wd:Q32337 . ?x0 wdt:P26 wd:Q137808 . ?x0 wdt:P26 wd:Q241019 . FILTER ( ?x0 != wd:Q32337 ) . FILTER ( ?x0 != wd:Q137808 ) . FILTER ( ?x0 != wd:Q241019 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\n?x0 wdt:P26 M4 .\n?x0 wdt:P26 M5 .\n?x0 wdt:P26 M6 .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
    "id": 31750,
    "split": "gold_test",
    "en": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill",
    "optimized": "Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q166739 is The Floorwalker\nwd:Q241019 is Mildred Harris\nwdt:P1040 is film editor\nwdt:P26 is spouse\nwd:Q32337 is Lita Grey\nwd:Q137808 is Oona O'Neill\nwd:Q374172 is The Kid\nwd:Q2449461 is A Woman\nwd:Q45602 is Modern Times",
    "masks": [
      {
        "uri": "wd:Q2449461",
        "mask": "kg:1823"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0805"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:5058"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9582"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:6540"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4716"
      },
      {
        "uri": "wd:Q374172",
        "mask": "kg:5237"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0674"
      },
      {
        "uri": "wd:Q2449461",
        "mask": "kg:6094"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5750"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:2607"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8380"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:8420"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1491"
      },
      {
        "uri": "wd:Q374172",
        "mask": "kg:0802"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3374"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:5257"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:3952"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4864"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:5900"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1521"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:7825"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:3253"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:1588"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:2766"
      }
    ],
    "masked": "Translate the question “Did the director and editor of \"The Kid\", \"The Floorwalker\", \"A Woman\", and \"Modern Times\" marry Lita Grey, Mildred Harris and Oona O'Neill?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0674 is director\nkg:8420 is The Floorwalker\nkg:2766 is Mildred Harris\nkg:3374 is film editor\nkg:1521 is spouse\nkg:3253 is Lita Grey\nkg:1588 is Oona O'Neill\nkg:0802 is The Kid\nkg:6094 is A Woman\nkg:2607 is Modern Times"
  },
  {
    "CFQquestionIdx": 49945,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 a male person that M2 , M3 , and M4 were written by , edited by , and directed by",
    "questionPatternModEntities_he": "האם M0 היה אדם זכר ש-M2 , M3 ו-M4 נכתבו על ידי , נערך על ידי ובוימו על ידי",
    "questionPatternModEntities_kn": "M2 , M3 , ಮತ್ತು M4 ಅವರು ಬರೆದ, ಸಂಪಾದಿಸಿದ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ M0 ಪುರುಷ ವ್ಯಕ್ತಿಯೇ",
    "questionPatternModEntities_zh": "M0 是 M2、M3 和 M4 由 编写、编辑和导演的男性吗？",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by",
    "questionWithBrackets": "Was [Charlie Chaplin] a male person that [Charlie Chaplin] , [Charlie Chaplin] , and [Charlie Chaplin] were written by , edited by , and directed by",
    "questionWithBrackets_he": "האם [צ&#39;רלי צ&#39;פלין] היה אדם זכר ש[צ&#39;רלי צ&#39;פלין] , [צ&#39;רלי צ&#39;פלין] ו[צ&#39;רלי צ&#39;פלין] נכתבו על ידי , נערכו על ידי ובוימו על ידי",
    "questionWithBrackets_kn": "[ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಒಬ್ಬ ಪುರುಷ ವ್ಯಕ್ತಿಯೇ [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] , [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಮತ್ತು [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಅವರು ಬರೆದಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[查理卓别林]是[查理卓别林]、[查理卓别林]和[查理卓别林]的编剧、编辑和导演的男性吗？",
    "recursionDepth": 47,
    "sparql": "ASK WHERE { wd:Q882 wdt:P31 wd:Q5 . wd:Q1070468 wdt:P57 wd:Q882 . wd:Q166739 wdt:P57 wd:Q882 . wd:Q214723 wdt:P57 wd:Q882 . wd:Q1070468 wdt:P1040 wd:Q882 . wd:Q166739 wdt:P1040 wd:Q882 . wd:Q214723 wdt:P1040 wd:Q882 . wd:Q1070468 wdt:P58 wd:Q882 . wd:Q166739 wdt:P58 wd:Q882 . wd:Q214723 wdt:P58 wd:Q882 . wd:Q882 wdt:P21 wd:Q6581097 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P31 wd:Q5 .\nM2 wdt:P57 M0 .\nM3 wdt:P57 M0 .\nM4 wdt:P57 M0 .\nM2 wdt:P1040 M0 .\nM3 wdt:P1040 M0 .\nM4 wdt:P1040 M0 .\nM2 wdt:P58 M0 .\nM3 wdt:P58 M0 .\nM4 wdt:P58 M0 .\nM0 wdt:P21 wd:Q6581097\n}",
    "id": 49945,
    "split": "gold_test",
    "en": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by",
    "optimized": "Was Charlie Chaplin a male who wrote, edited, and directed his own works?",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q882 is Charlie Chaplin\nwd:Q166739 is The Floorwalker\nwd:Q214723 is The Gold Rush\nwd:Q5 is human\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P31 is instance of\nwdt:P21 is sex or gender\nwd:Q1070468 is The Immigrant\nwd:Q6581097 is male",
    "masks": [
      {
        "uri": "wd:Q882",
        "mask": "kg:9542"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:2715"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:8562"
      },
      {
        "uri": "wd:Q1070468",
        "mask": "kg:8964"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1468"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:5648"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:7170"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9164"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:3103"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:7486"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9280"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:9180"
      },
      {
        "uri": "wd:Q1070468",
        "mask": "kg:6561"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0956"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:9484"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:7511"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7500"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:1211"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:2175"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7397"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:0621"
      },
      {
        "uri": "wd:Q1070468",
        "mask": "kg:5675"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5559"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:6064"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:5030"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4997"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:4444"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:4517"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6986"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:3532"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:2139"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:2241"
      },
      {
        "uri": "wd:Q6581097",
        "mask": "kg:2114"
      }
    ],
    "masked": "Translate the question “Was Charlie Chaplin a male who wrote, edited, and directed his own works?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9280 is director\nkg:2139 is Charlie Chaplin\nkg:5030 is The Floorwalker\nkg:4517 is The Gold Rush\nkg:8562 is human\nkg:7397 is film editor\nkg:6986 is screenwriter\nkg:2715 is instance of\nkg:2241 is sex or gender\nkg:5675 is The Immigrant\nkg:2114 is male"
  },
  {
    "CFQquestionIdx": 152345,
    "expectedResponse": [
      "The Walt Disney Company"
    ],
    "questionPatternModEntities": "What distributor and producer of M6 was acquired by M0 and M1 and acquired by M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M6 נרכש על ידי M0 ו-M1 ונרכש על ידי M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು M0 ಮತ್ತು M1 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು ಮತ್ತು M2, M3, M4 ಮತ್ತು M5 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆ",
    "questionPatternModEntities_zh": "M0 和 M1 收购了 M6 的哪个分销商和生产商，并被 M2、M3、M4 和 M5 收购？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What distributor and producer of [Grand Canyon] was acquired by [Laurene Powell Jobs] and [Fidelity Investments] and acquired by [BlackRock] , [State Street Global Advisors] , [T. Rowe Price] , and [Capital Group Companies]",
    "questionWithBrackets_he": "המפיץ והמפיק של [גרנד קניון] נרכש על ידי [לורן פאוול ג&#39;ובס] ו-[Fidelity Investments] ונרכש על ידי [BlackRock], [State Street Global Advisors], [T. רו פרייס] , ו[חברות קבוצת קפיטל]",
    "questionWithBrackets_kn": "[ಗ್ರ್ಯಾಂಡ್ ಕ್ಯಾನ್ಯನ್] ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು [ಲಾರೆನ್ ಪೊವೆಲ್ ಜಾಬ್ಸ್] ಮತ್ತು [ಫಿಡೆಲಿಟಿ ಇನ್ವೆಸ್ಟ್‌ಮೆಂಟ್ಸ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡರು ಮತ್ತು [ಬ್ಲ್ಯಾಕ್‌ರಾಕ್] , [ಸ್ಟೇಟ್ ಸ್ಟ್ರೀಟ್ ಗ್ಲೋಬಲ್ ಅಡ್ವೈಸರ್ಸ್] , [ಟಿ. ರೋವ್ ಪ್ರೈಸ್] , ಮತ್ತು [ಕ್ಯಾಪಿಟಲ್ ಗ್ರೂಪ್ ಕಂಪನಿಗಳು]",
    "questionWithBrackets_zh": "[Grand Canyon] 的分销商和生产商被 [Laurene Powell Jobs] 和 [Fidelity Investments] 收购并被 [BlackRock]、[State Street Global Advisors]、[T.罗价格]，和[资本集团公司]？",
    "recursionDepth": 47,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2062523 wdt:P750 ?x0 . wd:Q2062523 wdt:P272 ?x0 . ?x0 wdt:P127 wd:Q3511946 . ?x0 wdt:P127 wd:Q7603552 . ?x0 wdt:P127 wd:Q1411292 . ?x0 wdt:P127 wd:Q3133593 . ?x0 wdt:P127 wd:Q219635 . ?x0 wdt:P127 wd:Q505275 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM6 wdt:P750 ?x0 .\nM6 wdt:P272 ?x0 .\n?x0 wdt:P127 M0 .\n?x0 wdt:P127 M1 .\n?x0 wdt:P127 M2 .\n?x0 wdt:P127 M3 .\n?x0 wdt:P127 M4 .\n?x0 wdt:P127 M5\n}",
    "id": 152345,
    "split": "gold_test",
    "en": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies",
    "optimized": "Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?",
    "results": [],
    "direct": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q1411292 is Fidelity Investments\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q3133593 is Laurene Powell Jobs\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q2062523",
        "mask": "kg:0873"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:3187"
      },
      {
        "uri": "wd:Q2062523",
        "mask": "kg:3172"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0554"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:8783"
      },
      {
        "uri": "wd:Q3511946",
        "mask": "kg:5524"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:4026"
      },
      {
        "uri": "wd:Q7603552",
        "mask": "kg:7596"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:4752"
      },
      {
        "uri": "wd:Q1411292",
        "mask": "kg:1023"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:2034"
      },
      {
        "uri": "wd:Q3133593",
        "mask": "kg:2351"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:6104"
      },
      {
        "uri": "wd:Q219635",
        "mask": "kg:4856"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1549"
      },
      {
        "uri": "wd:Q505275",
        "mask": "kg:5601"
      }
    ],
    "masked": "Translate the question “Which company that distributed and produced \"Grand Canyon\" was acquired by Laurene Powell Jobs, Fidelity Investments, BlackRock, State Street Global Advisors, T. Rowe Price, and the Capital Group Companies?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3187 is distributed by\nkg:1023 is Fidelity Investments\nkg:5601 is Capital Group Companies\nkg:4856 is BlackRock\nkg:2351 is Laurene Powell Jobs\nkg:3172 is Grand Canyon\nkg:1549 is owned by\nkg:5524 is T. Rowe Price\nkg:7596 is State Street Global Advisors\nkg:0554 is production company"
  },
  {
    "CFQquestionIdx": 137957,
    "expectedResponse": [
      "Charlie Chaplin"
    ],
    "questionPatternModEntities": "What composer , editor , and director of M3 and M4 directed M5 and edited M0 , M1 , and M2",
    "questionPatternModEntities_he": "איזה מלחין, עורך ובמאי של M3 ו-M4 ביים את M5 וערך את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಮತ್ತು M4 ರ ಯಾವ ಸಂಯೋಜಕರು, ಸಂಪಾದಕರು ಮತ್ತು ನಿರ್ದೇಶಕರು M5 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು M0, M1 ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M3和M4的作曲家、编辑和导演是什么导演M5和剪辑M0、M1和M2的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What composer , editor , and director of [City Lights] and [Modern Times] directed [The Floorwalker] and edited [His Musical Career] , [The Kid] , and [The Gold Rush]",
    "questionWithBrackets_he": "איזה מלחין, עורך ובמאי של [City Lights] ו-[Modern Times] ביים את [The Floorwalker] וערך את [הקריירה המוזיקלית שלו], [הילד] ו[הבהלה לזהב]",
    "questionWithBrackets_kn": "[ಸಿಟಿ ಲೈಟ್ಸ್] ಮತ್ತು [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] ನ ಯಾವ ಸಂಯೋಜಕರು, ಸಂಪಾದಕರು ಮತ್ತು ನಿರ್ದೇಶಕರು [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು [ಅವರ ಸಂಗೀತ ವೃತ್ತಿಜೀವನ], [ದಿ ಕಿಡ್] ಮತ್ತು [ದಿ ಗೋಲ್ಡ್ ರಶ್] ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[City Lights] 和 [Modern Times] 的作曲家、编辑和导演是什么导演 [The Floorwalker] 并编辑了 [他的音乐生涯]、[The Kid] 和 [The Gold Rush]？",
    "recursionDepth": 47,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q45602 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q238211 wdt:P57 ?x0 . wd:Q2345349 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q214723 wdt:P1040 ?x0 . wd:Q238211 wdt:P1040 ?x0 . wd:Q374172 wdt:P1040 ?x0 . wd:Q45602 wdt:P86 ?x0 . wd:Q238211 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM5 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM4 wdt:P86 ?x0\n}",
    "id": 137957,
    "split": "gold_test",
    "en": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush",
    "results": [
      [
        "wd:Q882"
      ]
    ]
  },
  {
    "CFQquestionIdx": 33041,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film director that M2 and M3 were directed by and starred influence M0 and influence M1",
    "questionPatternModEntities_he": "האם במאי קולנוע ש-M2 ו-M3 בוימו על ידי וכיכבו השפיע על M0 והשפיע על M1",
    "questionPatternModEntities_kn": "M2 ಮತ್ತು M3 ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ನಟಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು M0 ಮತ್ತು ಪ್ರಭಾವ M1 ಅನ್ನು ಪ್ರಭಾವಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M2和M3导演和主演的电影导演对M0和M1有影响吗？",
    "questionTemplate": "Did a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [VP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a film director that [There Will Be No Leave Today] and [The Killers] were directed by and starred influence [Lars von Trier] and influence [Aran Cosentino]",
    "questionWithBrackets_he": "האם במאי קולנוע ש[לא יהיה חופש היום] ו[הרוצחים] בוימו על ידי וכיכבו השפיע על [לארס פון טרייר] והשפיע על [ארן קוסנטינו]",
    "questionWithBrackets_kn": "[ದೇರ್ ವಿಲ್ ಬಿ ನೋ ಲೀವ್ ಟುಡೇ] ಮತ್ತು [ದಿ ಕಿಲ್ಲರ್ಸ್] ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ನಟಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು [ಲಾರ್ಸ್ ವಾನ್ ಟ್ರೈಯರ್] ಮತ್ತು ಪ್ರಭಾವವನ್ನು [ಅರಾನ್ ಕೊಸೆಂಟಿನೊ] ಮಾಡಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "《今日无休》和《杀手锏》的导演和主演影响了[拉尔斯·冯·提尔]并影响了[阿兰·科森蒂诺]？",
    "recursionDepth": 48,
    "sparql": "ASK WHERE { wd:Q1970252 wdt:P161 ?x0 . wd:Q3017093 wdt:P161 ?x0 . wd:Q1970252 wdt:P57 ?x0 . wd:Q3017093 wdt:P57 ?x0 . wd:Q88965291 wdt:P737 ?x0 . wd:Q133730 wdt:P737 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P737 ?x0 .\nM1 wdt:P737 ?x0\n}",
    "id": 33041,
    "split": "gold_test",
    "en": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino",
    "optimized": "Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?",
    "results": [
      false
    ],
    "direct": "Translate the question “Did the director and star of \"There Will Be No Leave Today\" and \"The Killers\" have any influence on Lars von Trier and Aran Cosentino?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query."
  },
  {
    "CFQquestionIdx": 34166,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film editor that married M5 , M6 , and M7 and influenced M1 , M2 , and M3 found M4",
    "questionPatternModEntities_he": "האם עורך סרטים שהתחתן עם M5, M6 ו-M7 והשפיע על M1, M2 ו-M3 מצא את M4",
    "questionPatternModEntities_kn": "M5 , M6 , ಮತ್ತು M7 ಅನ್ನು ವಿವಾಹವಾದ ಮತ್ತು M1 , M2 , ಮತ್ತು M3 ಅನ್ನು ಪ್ರಭಾವಿಸಿದ ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು M4 ಅನ್ನು ಕಂಡುಕೊಂಡಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "一个娶了M5、M6、M7，影响了M1、M2、M3的剪辑师找到了M4吗？",
    "questionTemplate": "Did a [NP_SIMPLE] that [VP_SIMPLE] [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a film editor that married [Oona O'Neill] , [Lita Grey] , and [Mildred Harris] and influenced [Federico Fellini] , [Marcel Marceau] , and [Harold Lloyd] found [United Artists Corporation]",
    "questionWithBrackets_he": "האם עורך סרטים שהתחתן עם [אונה אוניל], [ליטה גריי] ו[מילדרד האריס] והשפיע על [פדריקו פליני], [מרסל מרסו] ו[הרולד לויד] מצא את [United Artists Corporation]",
    "questionWithBrackets_kn": "[ಊನಾ ಓ&#39;ನೀಲ್] , [ಲಿಟಾ ಗ್ರೇ] ಮತ್ತು [ಮಿಲ್ಡ್ರೆಡ್ ಹ್ಯಾರಿಸ್] ಅವರನ್ನು ವಿವಾಹವಾದ ಮತ್ತು [ಫೆಡೆರಿಕೊ ಫೆಲಿನಿ] , [ಮಾರ್ಸೆಲ್ ಮಾರ್ಸಿಯು] ಮತ್ತು [ಹೆರಾಲ್ಡ್ ಲಾಯ್ಡ್] [ಯುನೈಟೆಡ್ ಆರ್ಟಿಸ್ಟ್ಸ್ ಕಾರ್ಪೊರೇಷನ್] ಅನ್ನು ಪ್ರಭಾವಿಸಿದ ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು ಕಂಡುಕೊಂಡಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "与[乌娜·奥尼尔]、[丽塔·格雷]和[米尔德里德·哈里斯]结婚并影响[费德里科·费里尼]、[马塞尔·马索]和[哈罗德·劳埃德]的电影剪辑师找到了[联合艺术家公司]吗？",
    "recursionDepth": 48,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q7371 wdt:P737 ?x0 . wd:Q104340 wdt:P737 ?x0 . wd:Q157191 wdt:P737 ?x0 . wd:Q219400 wdt:P112 ?x0 . ?x0 wdt:P26 wd:Q241019 . ?x0 wdt:P26 wd:Q32337 . ?x0 wdt:P26 wd:Q137808 . FILTER ( ?x0 != wd:Q241019 ) . FILTER ( ?x0 != wd:Q32337 ) . FILTER ( ?x0 != wd:Q137808 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P737 ?x0 .\nM2 wdt:P737 ?x0 .\nM3 wdt:P737 ?x0 .\nM4 wdt:P112 ?x0 .\n?x0 wdt:P26 M5 .\n?x0 wdt:P26 M6 .\n?x0 wdt:P26 M7 .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 ) .\nFILTER ( ?x0 != M7 )\n}",
    "id": 34166,
    "split": "gold_test",
    "en": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation",
    "optimized": "Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q157191 is Marcel Marceau\nwd:Q241019 is Mildred Harris\nwd:Q137808 is Oona O'Neill\nwd:Q219400 is United Artists\nwdt:P26 is spouse\nwd:Q104340 is Harold Lloyd\nwd:Q32337 is Lita Grey\nwdt:P737 is influenced by\nwd:Q7042855 is film editor\nwd:Q7371 is Federico Fellini\nwdt:P112 is founded by\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:4320"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:5368"
      },
      {
        "uri": "wd:Q7371",
        "mask": "kg:9414"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:8532"
      },
      {
        "uri": "wd:Q104340",
        "mask": "kg:9016"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:6145"
      },
      {
        "uri": "wd:Q157191",
        "mask": "kg:3750"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:4505"
      },
      {
        "uri": "wd:Q219400",
        "mask": "kg:7462"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:2541"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1968"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:8911"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9863"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:8156"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9609"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:4694"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:4418"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:0424"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:6642"
      }
    ],
    "masked": "Translate the question “Did the film editor, who married Oona O'Neill, Lita Grey, and Mildred Harris and influenced Federico Fellini, Marcel Marceau, and Harold Lloyd, found the United Artists Corporation?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3750 is Marcel Marceau\nkg:4418 is Mildred Harris\nkg:6642 is Oona O'Neill\nkg:7462 is United Artists\nkg:9609 is spouse\nkg:9016 is Harold Lloyd\nkg:0424 is Lita Grey\nkg:4505 is influenced by\nkg:5368 is film editor\nkg:9414 is Federico Fellini\nkg:2541 is founded by\nkg:4320 is occupation"
  },
  {
    "CFQquestionIdx": 198521,
    "expectedResponse": [
      "Agnès Varda"
    ],
    "questionPatternModEntities": "Which director , star , and writer of M0 , M1 , and M2 married , influenced , and was influenced by M3",
    "questionPatternModEntities_he": "איזה במאי, כוכב וכותב של M0, M1 ו-M2 התחתן, השפיע והושפע מ-M3",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ನ ಯಾವ ನಿರ್ದೇಶಕ, ತಾರೆ ಮತ್ತು ಬರಹಗಾರ M3 ನಿಂದ ವಿವಾಹವಾದರು, ಪ್ರಭಾವಿತರಾದರು ಮತ್ತು ಪ್ರಭಾವಿತರಾದರು",
    "questionPatternModEntities_zh": "M0、M1、M2的哪位导演、明星、编剧结婚、影响、受M3影响？",
    "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Which director , star , and writer of [Jane B. par Agnès V.] , [The Beaches of Agnès] , and [The World of Jacques Demy] married , influenced , and was influenced by [Jacques Demy]",
    "questionWithBrackets_he": "איזה במאי, כוכב וכותב של [Jane B. Par Agnès V.], [The Beaches of Agnès] ו-[The World of Jacques Demy] התחתן, השפיע והושפע מ[Jacques Demy]",
    "questionWithBrackets_kn": "[ಜೇನ್ ಬಿ. ಪಾರ್ ಆಗ್ನೆಸ್ ವಿ.] , [ದಿ ಬೀಚ್ ಆಫ್ ಆಗ್ನೆಸ್] ಮತ್ತು [ದಿ ವರ್ಲ್ಡ್ ಆಫ್ ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ಯಾವ ನಿರ್ದೇಶಕ, ತಾರೆ ಮತ್ತು ಬರಹಗಾರ [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ವಿವಾಹವಾದರು, ಪ್ರಭಾವಿತರು ಮತ್ತು ಪ್ರಭಾವಿತರಾದರು",
    "questionWithBrackets_zh": "[Jane B. par Agnès V.]、[阿涅斯的海滩]和[雅克·德米的世界]的哪位导演、明星和作家与[雅克·德米]结婚、影响并受[雅克·德米]影响？",
    "recursionDepth": 48,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2709504 wdt:P161 ?x0 . wd:Q3204825 wdt:P161 ?x0 . wd:Q3161846 wdt:P161 ?x0 . wd:Q2709504 wdt:P57 ?x0 . wd:Q3204825 wdt:P57 ?x0 . wd:Q3161846 wdt:P57 ?x0 . wd:Q2709504 wdt:P58 ?x0 . wd:Q3204825 wdt:P58 ?x0 . wd:Q3161846 wdt:P58 ?x0 . wd:Q312258 wdt:P737 ?x0 . ?x0 wdt:P737 wd:Q312258 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P737 ?x0 .\n?x0 wdt:P737 M3 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 198521,
    "split": "gold_test",
    "en": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy",
    "optimized": "Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?",
    "results": [
      [
        "wd:Q229990"
      ]
    ],
    "direct": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is The Beaches of Agnès\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q3161846 is Jane B. par Agnès V.\nwd:Q3204825 is The World of Jacques Demy\nwdt:P161 is cast member\nwd:Q312258 is Jacques Demy",
    "masks": [
      {
        "uri": "wd:Q2709504",
        "mask": "kg:6705"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4907"
      },
      {
        "uri": "wd:Q3204825",
        "mask": "kg:0911"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9227"
      },
      {
        "uri": "wd:Q3161846",
        "mask": "kg:7808"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:5571"
      },
      {
        "uri": "wd:Q2709504",
        "mask": "kg:8502"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0505"
      },
      {
        "uri": "wd:Q3204825",
        "mask": "kg:2733"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9784"
      },
      {
        "uri": "wd:Q3161846",
        "mask": "kg:0418"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8751"
      },
      {
        "uri": "wd:Q2709504",
        "mask": "kg:1428"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6936"
      },
      {
        "uri": "wd:Q3204825",
        "mask": "kg:9534"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7489"
      },
      {
        "uri": "wd:Q3161846",
        "mask": "kg:2720"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2163"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:2516"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:5655"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:1806"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:1858"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4393"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:5818"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:7335"
      }
    ],
    "masked": "Translate the question “Who is the director, star, and writer of \"Jane B. par Agnès V.\", \"The Beaches of Agnès\", and \"The World of Jacques Demy\" that had a marital and influential relationship with Jacques Demy?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1428 is The Beaches of Agnès\nkg:8751 is director\nkg:2163 is screenwriter\nkg:4393 is spouse\nkg:1806 is influenced by\nkg:2720 is Jane B. par Agnès V.\nkg:9534 is The World of Jacques Demy\nkg:5571 is cast member\nkg:7335 is Jacques Demy"
  },
  {
    "CFQquestionIdx": 152325,
    "expectedResponse": [
      "Amazon"
    ],
    "questionPatternModEntities": "What distributor and producer of M6 was acquired by M0 and M1 and acquired M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M6 נרכש על ידי M0 ו-M1 ורכש את M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು M0 ಮತ್ತು M1 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು ಮತ್ತು M2 , M3 , M4 ಮತ್ತು M5 ಅನ್ನು ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು",
    "questionPatternModEntities_zh": "M0 和 M1 收购了 M6 的哪个经销商和生产商，并收购了 M2、M3、M4 和 M5？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What distributor and producer of [Mozart in the Jungle] was acquired by [The Vanguard Group] and [BlackRock] and acquired [Amazon CloudFront] , [.amazon] , [Amazon Kindle] , and [AbeBooks]",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [מוצרט בג&#39;ונגל] נרכש על ידי [קבוצת ואנגארד] ו-[BlackRock] ורכש את [Amazon CloudFront], [.amazon], [Amazon Kindle] ו-[AbeBooks]",
    "questionWithBrackets_kn": "[ಮೊಜಾರ್ಟ್ ಇನ್ ದಿ ಜಂಗಲ್] ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು [ದಿ ವ್ಯಾನ್‌ಗಾರ್ಡ್ ಗ್ರೂಪ್] ಮತ್ತು [ಬ್ಲ್ಯಾಕ್‌ರಾಕ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆ ಮತ್ತು [ಅಮೆಜಾನ್ ಕ್ಲೌಡ್‌ಫ್ರಂಟ್] , [.ಅಮೆಜಾನ್] , [ಅಮೆಜಾನ್ ಕಿಂಡಲ್] ಮತ್ತು [ಅಬೆಬುಕ್ಸ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆ",
    "questionWithBrackets_zh": "[The Vanguard Group] 和 [BlackRock] 收购了 [The Vanguard Group] 和 [BlackRock] 并收购了 [Amazon CloudFront]、[.amazon]、[Amazon Kindle] 和 [AbeBooks] 的哪家经销商和制作人？",
    "recursionDepth": 48,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q17070012 wdt:P750 ?x0 . wd:Q17070012 wdt:P272 ?x0 . ?x0 wdt:P127 wd:Q849363 . ?x0 wdt:P127 wd:Q219635 . wd:Q65073147 wdt:P127 ?x0 . wd:Q318128 wdt:P127 ?x0 . wd:Q136469 wdt:P127 ?x0 . wd:Q1628791 wdt:P127 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM6 wdt:P750 ?x0 .\nM6 wdt:P272 ?x0 .\n?x0 wdt:P127 M0 .\n?x0 wdt:P127 M1 .\nM2 wdt:P127 ?x0 .\nM3 wdt:P127 ?x0 .\nM4 wdt:P127 ?x0 .\nM5 wdt:P127 ?x0\n}",
    "id": 152325,
    "split": "gold_test",
    "en": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks",
    "optimized": "Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?",
    "results": [],
    "direct": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q318128 is AbeBooks\nwd:Q136469 is Amazon Kindle\nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q219635 is BlackRock\nwd:Q1628791 is Amazon CloudFront\nwd:Q17070012 is Mozart in the Jungle\nwdt:P127 is owned by\nwd:Q65073147 is .amazon\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q17070012",
        "mask": "kg:3904"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:4947"
      },
      {
        "uri": "wd:Q17070012",
        "mask": "kg:6814"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8044"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1776"
      },
      {
        "uri": "wd:Q849363",
        "mask": "kg:0479"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:6114"
      },
      {
        "uri": "wd:Q219635",
        "mask": "kg:0464"
      },
      {
        "uri": "wd:Q65073147",
        "mask": "kg:3637"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:4450"
      },
      {
        "uri": "wd:Q318128",
        "mask": "kg:8332"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1402"
      },
      {
        "uri": "wd:Q136469",
        "mask": "kg:1784"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1508"
      },
      {
        "uri": "wd:Q1628791",
        "mask": "kg:2485"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:8165"
      }
    ],
    "masked": "Translate the question “Which company, known as the distributor and producer of \"Mozart in the Jungle\", was acquired by The Vanguard Group and BlackRock, and also purchased Amazon CloudFront, .amazon, Amazon Kindle, and AbeBooks?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8332 is AbeBooks\nkg:1784 is Amazon Kindle\nkg:4947 is distributed by\nkg:0479 is The Vanguard Group\nkg:0464 is BlackRock\nkg:2485 is Amazon CloudFront\nkg:6814 is Mozart in the Jungle\nkg:8165 is owned by\nkg:3637 is .amazon\nkg:8044 is production company"
  },
  {
    "CFQquestionIdx": 106868,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a star , editor , and cinematographer of M4 and M5 a Spanish writer and director of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם כוכב, עורך וצלם של M4 ו-M5 היה סופר ובמאי ספרדי של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M4 ಮತ್ತು M5 ನ ಸ್ಟಾರ್, ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ ಸ್ಪ್ಯಾನಿಷ್ ಬರಹಗಾರ ಮತ್ತು M0, M1 ಮತ್ತು M2 ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M4 和 M5 的明星、剪辑师和摄影师是 M0、M1 和 M2 的西班牙作家和导演吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a star , editor , and cinematographer of [Female Vampire] and [No label defined] a Spanish writer and director of [99 Women] , [No label defined] , and [The Blood of Fu Manchu]",
    "questionWithBrackets_he": "האם כוכבת, עורכת וצלמת קולנוע של [ערפדית נשית] ו[אין תווית מוגדרת] סופרת ובמאית ספרדית של [99 נשים], [ללא תווית מוגדרת] ו[הדם של פו מנצ&#39;ו]",
    "questionWithBrackets_kn": "[ಸ್ತ್ರೀ ರಕ್ತಪಿಶಾಚಿ] ನ ನಕ್ಷತ್ರ, ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು [ಯಾವುದೇ ಲೇಬಲ್ ಅನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿಲ್ಲ] [99 ಮಹಿಳೆಯರು] , [ಯಾವುದೇ ಲೇಬಲ್ ಅನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿಲ್ಲ] , ಮತ್ತು [ದಿ ಬ್ಲಡ್ ಆಫ್ ಫೂ ಮಂಚು] ನ ಸ್ಪ್ಯಾನಿಷ್ ಬರಹಗಾರ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[女吸血鬼]和[未定义标签]的明星、编辑和摄影师是[99个女人]、[未定义标签]和[傅满洲之血]的西班牙作家和导演吗？",
    "recursionDepth": 49,
    "sparql": "ASK WHERE { wd:Q4004365 wdt:P161 ?x0 . wd:Q3207690 wdt:P161 ?x0 . wd:Q4004365 wdt:P344 ?x0 . wd:Q3207690 wdt:P344 ?x0 . wd:Q3633009 wdt:P57 ?x0 . wd:Q289021 wdt:P57 ?x0 . wd:Q463946 wdt:P57 ?x0 . wd:Q4004365 wdt:P1040 ?x0 . wd:Q3207690 wdt:P1040 ?x0 . wd:Q3633009 wdt:P58 ?x0 . wd:Q289021 wdt:P58 ?x0 . wd:Q463946 wdt:P58 ?x0 . ?x0 wdt:P27 wd:Q29 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM4 wdt:P161 ?x0 .\nM5 wdt:P161 ?x0 .\nM4 wdt:P344 ?x0 .\nM5 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM4 wdt:P1040 ?x0 .\nM5 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P27 wd:Q29\n}",
    "id": 106868,
    "split": "gold_test",
    "en": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu",
    "optimized": "Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwd:Q3633009 is Bahía blanca\nwd:Q29 is Spain\nwd:Q289021 is 99 Women\nwd:Q4004365 is Una rajita para dos\nwdt:P27 is country of citizenship\nwd:Q3207690 is Female Vampire\nwd:Q463946 is The Blood of Fu Manchu\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q4004365",
        "mask": "kg:0411"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6965"
      },
      {
        "uri": "wd:Q3207690",
        "mask": "kg:2366"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6988"
      },
      {
        "uri": "wd:Q4004365",
        "mask": "kg:4369"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1568"
      },
      {
        "uri": "wd:Q3207690",
        "mask": "kg:0797"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0511"
      },
      {
        "uri": "wd:Q3633009",
        "mask": "kg:2002"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8637"
      },
      {
        "uri": "wd:Q289021",
        "mask": "kg:6807"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2259"
      },
      {
        "uri": "wd:Q463946",
        "mask": "kg:4825"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8501"
      },
      {
        "uri": "wd:Q4004365",
        "mask": "kg:1223"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6752"
      },
      {
        "uri": "wd:Q3207690",
        "mask": "kg:9100"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6914"
      },
      {
        "uri": "wd:Q3633009",
        "mask": "kg:5835"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1135"
      },
      {
        "uri": "wd:Q289021",
        "mask": "kg:2955"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7547"
      },
      {
        "uri": "wd:Q463946",
        "mask": "kg:0414"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8325"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:3675"
      },
      {
        "uri": "wd:Q29",
        "mask": "kg:8626"
      }
    ],
    "masked": "Translate the question “Did the Spanish person who starred in, edited, and directed \"Female Vampire\" and \"No label defined\" also wrote and directed \"99 Women\", \"No label defined\", and \"The Blood of Fu Manchu\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8501 is director\nkg:8325 is screenwriter\nkg:6914 is film editor\nkg:5835 is Bahía blanca\nkg:8626 is Spain\nkg:2955 is 99 Women\nkg:1223 is Una rajita para dos\nkg:3675 is country of citizenship\nkg:9100 is Female Vampire\nkg:0414 is The Blood of Fu Manchu\nkg:6988 is cast member\nkg:0511 is director of photography"
  },
  {
    "CFQquestionIdx": 92810,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a cinematographer that M1 and M2 were founded by and M3 , M4 , and M5 were founded by M6 's spouse",
    "questionPatternModEntities_he": "האם צלם קולנוע ש-M1 ו-M2 נוסדו על ידי ו-M3, M4 ו-M5 הוקמו על ידי בן הזוג של M6",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಅನ್ನು ಸ್ಥಾಪಿಸಿದ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು M3, M4 ಮತ್ತು M5 ಅನ್ನು M6 ಅವರ ಸಂಗಾತಿಯಿಂದ ಸ್ಥಾಪಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M1和M2是由M6的配偶创立的电影摄影师吗？M3，M4和M5是由M6的配偶创立的吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [entity] , [entity] , and [entity] were [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer that [Industrial Light & Magic] and [THX] were founded by and [Jediism] , [Lucasfilm] , and [LucasArts] were founded by [Mellody Hobson] 's spouse",
    "questionWithBrackets_he": "האם צלם קולנוע ש[Industrial Light &amp; Magic] ו-[THX] נוסדו על ידי ו-[Jediism], [Lucasfilm] ו-[LucasArts] הוקמו על ידי בן זוגה של [מלודי הובסון]",
    "questionWithBrackets_kn": "[ಇಂಡಸ್ಟ್ರಿಯಲ್ ಲೈಟ್ &amp; ಮ್ಯಾಜಿಕ್] ಮತ್ತು [THX] ಅನ್ನು ಸ್ಥಾಪಿಸಿದ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು [ಜೇಡಿಸಮ್] , [ಲುಕಾಸ್‌ಫಿಲ್ಮ್] ಮತ್ತು [ಲುಕಾಸ್ ಆರ್ಟ್ಸ್] [ಮೆಲೋಡಿ ಹಾಬ್ಸನ್] ಅವರ ಸಂಗಾತಿಯಿಂದ ಸ್ಥಾಪಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[工业光魔]和[THX]是由[Jediism]、[Lucasfilm]和[LucasArts]创立的电影摄影师，[Melody Hobson]的配偶创立？",
    "recursionDepth": 49,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . wd:Q216611 wdt:P112 ?x0 . wd:Q242446 wdt:P112 ?x0 . wd:Q258945 wdt:P112 ?x0 . wd:Q746676 wdt:P112 ?x0 . wd:Q1044630 wdt:P112 ?x0 . ?x0 wdt:P26 wd:Q6813152 . FILTER ( ?x0 != wd:Q6813152 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\nM1 wdt:P112 ?x0 .\nM2 wdt:P112 ?x0 .\nM3 wdt:P112 ?x0 .\nM4 wdt:P112 ?x0 .\nM5 wdt:P112 ?x0 .\n?x0 wdt:P26 M6 .\nFILTER ( ?x0 != M6 )\n}",
    "id": 92810,
    "split": "gold_test",
    "en": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse",
    "optimized": "Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?",
    "results": [
      false
    ],
    "direct": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q216611 is Lucasfilm Games\nwd:Q746676 is Industrial Light & Magic\nwdt:P26 is spouse\nwd:Q222344 is cinematographer\nwd:Q1044630 is THX\nwd:Q6813152 is Mellody Hobson\nwd:Q258945 is Jediism\nwdt:P112 is founded by\nwdt:P106 is occupation\nwd:Q242446 is Lucasfilm",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8076"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:1091"
      },
      {
        "uri": "wd:Q216611",
        "mask": "kg:5144"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:5979"
      },
      {
        "uri": "wd:Q242446",
        "mask": "kg:8877"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:1252"
      },
      {
        "uri": "wd:Q258945",
        "mask": "kg:1879"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:8504"
      },
      {
        "uri": "wd:Q746676",
        "mask": "kg:3610"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:5258"
      },
      {
        "uri": "wd:Q1044630",
        "mask": "kg:8063"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:7813"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9449"
      },
      {
        "uri": "wd:Q6813152",
        "mask": "kg:5599"
      },
      {
        "uri": "wd:Q6813152",
        "mask": "kg:8556"
      }
    ],
    "masked": "Translate the question “Was Mellody Hobson's spouse a cinematographer and the founder of Industrial Light & Magic, THX, Lucasfilm, LucasArts, and Jediism?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5144 is Lucasfilm Games\nkg:3610 is Industrial Light & Magic\nkg:9449 is spouse\nkg:1091 is cinematographer\nkg:8063 is THX\nkg:8556 is Mellody Hobson\nkg:1879 is Jediism\nkg:7813 is founded by\nkg:8076 is occupation\nkg:8877 is Lucasfilm"
  },
  {
    "CFQquestionIdx": 195687,
    "expectedResponse": [
      "Danial Hajibarat"
    ],
    "questionPatternModEntities": "Which cinematographer and star of M1 , M2 , and M3 wrote , directed , executive produced , and edited M0",
    "questionPatternModEntities_he": "איזה צלם וכוכב של M1, M2 ו-M3 כתב, ביים, הפיק וערך את M0",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆ M0 ಅನ್ನು ಬರೆದು, ನಿರ್ದೇಶಿಸಿದ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ ಮತ್ತು ಸಂಪಾದಿಸಿದ",
    "questionPatternModEntities_zh": "M1、M2和M3的哪位电影摄影师和明星编写、导演、执行制作和剪辑M0？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Which cinematographer and star of [Inception] , [Game Over] , and [Liberation] wrote , directed , executive produced , and edited [The Madness]",
    "questionWithBrackets_he": "איזה צלם וכוכב של [Inception], [Game Over] ו-[Liberation] כתב, ביים, הפיק וערך את [The Madness]",
    "questionWithBrackets_kn": "[ಇನ್ಸೆಪ್ಶನ್] , [ಗೇಮ್ ಓವರ್] ಮತ್ತು [ಲಿಬರೇಶನ್] ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆ ಬರೆದಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು [ದಿ ಮ್ಯಾಡ್ನೆಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[盗梦空间]、[游戏结束]和[解放]的哪位摄影师和明星编剧、导演、执行制作和剪辑了[疯狂]？",
    "recursionDepth": 49,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q85520081 wdt:P161 ?x0 . wd:Q96054985 wdt:P161 ?x0 . wd:Q85532437 wdt:P161 ?x0 . wd:Q85520081 wdt:P344 ?x0 . wd:Q96054985 wdt:P344 ?x0 . wd:Q85532437 wdt:P344 ?x0 . wd:Q87778273 wdt:P57 ?x0 . wd:Q87778273 wdt:P1040 ?x0 . wd:Q87778273 wdt:P1431 ?x0 . wd:Q87778273 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0\n}",
    "id": 195687,
    "split": "gold_test",
    "en": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness",
    "optimized": "Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?",
    "results": [
      [
        "wd:Q84701006"
      ]
    ],
    "direct": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q85532437 is Liberation\nwdt:P58 is screenwriter\nwd:Q85520081 is Inception\nwdt:P1040 is film editor\nwd:Q87778273 is The Madness\nwdt:P1431 is executive producer\nwd:Q96054985 is Game Over\nwdt:P161 is cast member\nwdt:P344 is director of photography",
    "masks": [
      {
        "uri": "wd:Q85520081",
        "mask": "kg:0094"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7693"
      },
      {
        "uri": "wd:Q96054985",
        "mask": "kg:3359"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1254"
      },
      {
        "uri": "wd:Q85532437",
        "mask": "kg:8137"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1348"
      },
      {
        "uri": "wd:Q85520081",
        "mask": "kg:1786"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3628"
      },
      {
        "uri": "wd:Q96054985",
        "mask": "kg:4083"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8294"
      },
      {
        "uri": "wd:Q85532437",
        "mask": "kg:0590"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1505"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:3992"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3026"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:2499"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6680"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:6672"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2395"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:4752"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1594"
      }
    ],
    "masked": "Translate the question “Who is the cinematographer and star of \"Inception\", \"Game Over\", and \"Liberation\" who also took on the roles of writer, director, executive producer, and editor for \"The Madness\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3026 is director\nkg:0590 is Liberation\nkg:1594 is screenwriter\nkg:1786 is Inception\nkg:6680 is film editor\nkg:4752 is The Madness\nkg:2395 is executive producer\nkg:4083 is Game Over\nkg:1348 is cast member\nkg:1505 is director of photography"
  },
  {
    "CFQquestionIdx": 213228,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "Which writer and cinematographer of M0 , M1 , M2 , and M3 married a person and influenced M4 and M5",
    "questionPatternModEntities_he": "איזה סופר וצלם קולנוע של M0, M1, M2 ו-M3 התחתן עם אדם והשפיע על M4 ו-M5",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ವ್ಯಕ್ತಿಯನ್ನು ವಿವಾಹವಾದರು ಮತ್ತು M4 ಮತ್ತು M5 ಅನ್ನು ಪ್ರಭಾವಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2、M3的哪位作家和摄影师嫁给了一个人并影响了M4和M5？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "Which writer and cinematographer of [The Emperor] , [Anyone Lived in a Pretty How Town] , [1:42.08] , and [Herbie] married a person and influenced [Marcus Orelias] and [Lorne Lanning]",
    "questionWithBrackets_he": "איזה סופר וצלם קולנוע של [הקיסר], [כל אחד גר בעיר יפה] , [1:42.08] ו[הרבי] התחתנו עם אדם והשפיעו על [מרקוס אורליאס] ו[לורן לאנינג]",
    "questionWithBrackets_kn": "[ದಿ ಎಂಪರರ್] ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಿನೆಮ್ಯಾಟೋಗ್ರಾಫರ್ , [ಯಾರೂ ಲಿವ್ಡ್ ಇನ್ ಎ ಪ್ರೆಟಿ ಹೌ ಟೌನ್] , [1:42.08] , ಮತ್ತು [ಹರ್ಬಿ] ಒಬ್ಬ ವ್ಯಕ್ತಿಯನ್ನು ವಿವಾಹವಾದರು ಮತ್ತು [ಮಾರ್ಕಸ್ ಒರೆಲಿಯಾಸ್] ಮತ್ತು [ಲೋರ್ನ್ ಲ್ಯಾನಿಂಗ್] ಪ್ರಭಾವ ಬೀರಿದರು",
    "questionWithBrackets_zh": "[皇帝]、[任何人住在漂亮小镇]、[1:42.08] 和[赫比] 的哪位作家和摄影师嫁给了一个人并影响了[马库斯·奥雷利亚斯] 和[洛恩·兰宁]？",
    "recursionDepth": 49,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1609393 wdt:P344 ?x0 . wd:Q2411065 wdt:P344 ?x0 . wd:Q208910 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q1609393 wdt:P58 ?x0 . wd:Q2411065 wdt:P58 ?x0 . wd:Q208910 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q52306598 wdt:P737 ?x0 . wd:Q717378 wdt:P737 ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P31 wd:Q5 . FILTER ( ?x0 != ?x1 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P737 ?x0 .\nM5 wdt:P737 ?x0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P31 wd:Q5 .\nFILTER ( ?x0 != ?x1 )\n}",
    "id": 213228,
    "split": "gold_test",
    "en": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning",
    "optimized": "Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q717378 is Lorne Lanning\nwdt:P58 is screenwriter\nwd:Q5 is human\nwd:Q52306598 is Marcus Orelias\nwdt:P26 is spouse\nwd:Q613974 is Anyone Lived in a Pretty How Town\nwdt:P31 is instance of\nwdt:P737 is influenced by\nwd:Q208910 is 1:42.08\nwdt:P344 is director of photography\nwd:Q1609393 is Herbie\nwd:Q2411065 is The Emperor",
    "masks": [
      {
        "uri": "wd:Q1609393",
        "mask": "kg:1114"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3179"
      },
      {
        "uri": "wd:Q2411065",
        "mask": "kg:0906"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3862"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:0913"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4566"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:4261"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4097"
      },
      {
        "uri": "wd:Q1609393",
        "mask": "kg:1736"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3718"
      },
      {
        "uri": "wd:Q2411065",
        "mask": "kg:4611"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8104"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:1488"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0193"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:3949"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6371"
      },
      {
        "uri": "wd:Q52306598",
        "mask": "kg:5258"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:5944"
      },
      {
        "uri": "wd:Q717378",
        "mask": "kg:7321"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:3628"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4998"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:2129"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:2044"
      }
    ],
    "masked": "Translate the question “Who is the writer and cinematographer of \"The Emperor\", \"Anyone Lived in a Pretty How Town\", \"1:42.08\", and \"Herbie\" who married and influenced Marcus Orelias and Lorne Lanning?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7321 is Lorne Lanning\nkg:6371 is screenwriter\nkg:2044 is human\nkg:5258 is Marcus Orelias\nkg:4998 is spouse\nkg:3949 is Anyone Lived in a Pretty How Town\nkg:2129 is instance of\nkg:3628 is influenced by\nkg:1488 is 1:42.08\nkg:4097 is director of photography\nkg:1736 is Herbie\nkg:4611 is The Emperor"
  },
  {
    "CFQquestionIdx": 92908,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer that M1 and M2 were directed by , executive produced by , edited by , and written by M3 's director",
    "questionPatternModEntities_he": "האם צלם קולנוע ש-M1 ו-M2 בוימו על ידי , הופק על ידי , נערך על ידי , ונכתב על ידי הבמאי של M3",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಅವರು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು M3 ನ ನಿರ್ದೇಶಕರು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1 和 M2 是由 M3 的导演导演、执行制片、编辑和编剧的电影摄影师吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer that [Uzak] and [Clouds of May] were directed by , executive produced by , edited by , and written by [Nuri Bilge Ceylan trilogy] 's director",
    "questionWithBrackets_he": "האם צלם קולנוע ש[עוזק] ו[ענני מאי] בוימו על ידי , הופק על ידי , נערך על ידי , ונכתב על ידי הבמאי של [טרילוגיית נורי בילגה ציילן ]",
    "questionWithBrackets_kn": "[ಉಜಾಕ್] ಮತ್ತು [ಕ್ಲೌಡ್ಸ್ ಆಫ್ ಮೇ] ನಿರ್ದೇಶಿಸಿದ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ [ನುರಿ ಬಿಲ್ಜ್ ಸೆಲಾನ್ ಟ್ರೈಲಾಜಿ] ನಿರ್ದೇಶಕರೇ",
    "questionWithBrackets_zh": "[乌扎克] 和 [五月的云] 是由 [努里·比尔格·锡兰 (Nuri Bilge Ceylan) 三部曲] 的导演导演、执行制片、编辑和编剧的电影摄影师吗？",
    "recursionDepth": 50,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . wd:Q18609037 wdt:P57 ?x0 . wd:Q1361018 wdt:P57 ?x0 . wd:Q2086445 wdt:P57 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2086445 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1431 ?x0 . wd:Q2086445 wdt:P1431 ?x0 . wd:Q1361018 wdt:P58 ?x0 . wd:Q2086445 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 92908,
    "split": "gold_test",
    "en": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director",
    "optimized": "Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2086445 is Clouds of May\nwdt:P57 is director\nwdt:P58 is screenwriter\nwdt:P1040 is film editor\nwdt:P1431 is executive producer\nwd:Q1361018 is Uzak\nwd:Q18609037 is Nuri Bilge Ceylan trilogy\nwd:Q222344 is cinematographer\nwdt:P106 is occupation",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:6836"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:6143"
      },
      {
        "uri": "wd:Q18609037",
        "mask": "kg:9595"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0835"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:5108"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8245"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:0088"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7293"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:4635"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9954"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:3158"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3493"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:1861"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0332"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:8910"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9796"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:8115"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4335"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:6756"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6774"
      }
    ],
    "masked": "Translate the question “Did the director of the Nuri Bilge Ceylan trilogy also serve as the director, executive producer, editor, and writer for \"Uzak and Clouds of May\"?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6756 is Clouds of May\nkg:7293 is director\nkg:6774 is screenwriter\nkg:3493 is film editor\nkg:9796 is executive producer\nkg:8115 is Uzak\nkg:9595 is Nuri Bilge Ceylan trilogy\nkg:6143 is cinematographer\nkg:6836 is occupation"
  },
  {
    "CFQquestionIdx": 33075,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film director that M1 , M2 , and M3 were written by and were edited by marry and influence M4",
    "questionPatternModEntities_he": "האם במאי סרטים ש-M1, M2 ו-M3 נכתבו על ידי ונערכו על ידי התחתן והשפיע על M4",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅನ್ನು ಬರೆದಿರುವ ಮತ್ತು ಸಂಪಾದಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು M4 ಅನ್ನು ಮದುವೆಯಾಗಿ ಪ್ರಭಾವಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1、M2、M3的编剧和剪辑的电影导演结婚影响了M4吗？",
    "questionTemplate": "Did a [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by and were [VP_SIMPLE] by [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a film director that [Vagabond] , [The Gleaners and I] , and [Varda by Agnès] were written by and were edited by marry and influence [Jacques Demy]",
    "questionWithBrackets_he": "האם במאי קולנוע ש[וגאבונד], [המלקטים ואני] ו[ורדה מאת אגנס] נכתבו על ידי ונערך על ידי נישואין והשפעה [ז&#39;אק דמי]",
    "questionWithBrackets_kn": "[ವ್ಯಾಗಾಬಾಂಡ್] , [ದಿ ಗ್ಲೀನರ್ಸ್ ಮತ್ತು ನಾನು] ಮತ್ತು [ಆಗ್ನೆಸ್ ಅವರ ವಾರ್ದಾ] ಅನ್ನು ಮದುವೆಯಾಗಿ ಮತ್ತು ಪ್ರಭಾವದಿಂದ [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ಅವರು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "有没有[流浪者]、[拾穗者和我]和[阿涅斯的瓦尔达]的电影导演是由[雅克·德米][雅克·德米]编写和编辑的？",
    "recursionDepth": 50,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q2526255 . wd:Q63993096 wdt:P1040 ?x0 . wd:Q2298257 wdt:P1040 ?x0 . wd:Q2493884 wdt:P1040 ?x0 . wd:Q63993096 wdt:P58 ?x0 . wd:Q2298257 wdt:P58 ?x0 . wd:Q2493884 wdt:P58 ?x0 . wd:Q312258 wdt:P737 ?x0 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q2526255 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P737 ?x0 .\n?x0 wdt:P26 M4 .\nFILTER ( ?x0 != M4 )\n}",
    "id": 33075,
    "split": "gold_test",
    "en": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy",
    "optimized": "Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?",
    "results": [
      true
    ],
    "direct": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2493884 is The Gleaners and I\nwd:Q2298257 is Vagabond\nwdt:P1040 is film editor\nwdt:P58 is screenwriter\nwdt:P26 is spouse\nwdt:P737 is influenced by\nwd:Q2526255 is film director\nwdt:P106 is occupation\nwd:Q63993096 is Varda by Agnès\nwd:Q312258 is Jacques Demy",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:6454"
      },
      {
        "uri": "wd:Q2526255",
        "mask": "kg:7684"
      },
      {
        "uri": "wd:Q63993096",
        "mask": "kg:9060"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5089"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:8331"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5516"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:3732"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1654"
      },
      {
        "uri": "wd:Q63993096",
        "mask": "kg:8360"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5459"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:3793"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9157"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:4401"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0834"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:5417"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:1597"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:3248"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:9883"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:6665"
      }
    ],
    "masked": "Translate the question “Did the director of \"Vagabond\", \"The Gleaners and I\", and \"Varda by Agnès\", who also edited these films, marry Jacques Demy and influence his work?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4401 is The Gleaners and I\nkg:3793 is Vagabond\nkg:1654 is film editor\nkg:0834 is screenwriter\nkg:3248 is spouse\nkg:1597 is influenced by\nkg:7684 is film director\nkg:6454 is occupation\nkg:8360 is Varda by Agnès\nkg:6665 is Jacques Demy"
  },
  {
    "CFQquestionIdx": 152321,
    "expectedResponse": [
      "The Walt Disney Company"
    ],
    "questionPatternModEntities": "What distributor and producer of M6 was acquired by M0 , M1 , M2 , and M3 and was acquired by M4 and M5",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M6 נרכש על ידי M0 , M1 , M2 ו-M3 ונרכש על ידי M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು M0, M1, M2 ಮತ್ತು M3 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು ಮತ್ತು M4 ಮತ್ತು M5 ನಿಂದ ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು",
    "questionPatternModEntities_zh": "M0、M1、M2、M3收购M6，M4、M5收购哪个分销商和生产商？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "What distributor and producer of [Grand Canyon] was acquired by [State Street Global Advisors] , [BlackRock] , [T. Rowe Price] , and [Capital Group Companies] and was acquired by [State Farm Insurance] and [The Vanguard Group]",
    "questionWithBrackets_he": "המפיץ והמפיק של [גרנד קניון] נרכש על ידי [State Street Global Advisors], [BlackRock], [T. רו פרייס] , ו[חברות קבוצת קפיטל] ונרכשה על ידי [מדינת משק ביטוח] ו[קבוצת ואנגארד]",
    "questionWithBrackets_kn": "[ಗ್ರ್ಯಾಂಡ್ ಕ್ಯಾನ್ಯನ್] ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು [ಸ್ಟೇಟ್ ಸ್ಟ್ರೀಟ್ ಗ್ಲೋಬಲ್ ಅಡ್ವೈಸರ್ಸ್] , [ಬ್ಲ್ಯಾಕ್‌ರಾಕ್] , [ಟಿ. ರೋವ್ ಪ್ರೈಸ್] , ಮತ್ತು [ಕ್ಯಾಪಿಟಲ್ ಗ್ರೂಪ್ ಕಂಪನಿಗಳು] ಮತ್ತು [ಸ್ಟೇಟ್ ಫಾರ್ಮ್ ಇನ್ಶುರೆನ್ಸ್] ಮತ್ತು [ದಿ ವ್ಯಾನ್‌ಗಾರ್ಡ್ ಗ್ರೂಪ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆಯೇ",
    "questionWithBrackets_zh": "[Grand Canyon] 的分销商和生产商被 [State Street Global Advisors]、[BlackRock]、[T. Rowe Price] 和 [Capital Group Companies] 被 [State Farm Insurance] 和 [The Vanguard Group] 收购？",
    "recursionDepth": 50,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2062523 wdt:P750 ?x0 . wd:Q2062523 wdt:P272 ?x0 . ?x0 wdt:P127 wd:Q3511946 . ?x0 wdt:P127 wd:Q7603552 . ?x0 wdt:P127 wd:Q2007336 . ?x0 wdt:P127 wd:Q219635 . ?x0 wdt:P127 wd:Q505275 . ?x0 wdt:P127 wd:Q849363 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM6 wdt:P750 ?x0 .\nM6 wdt:P272 ?x0 .\n?x0 wdt:P127 M0 .\n?x0 wdt:P127 M1 .\n?x0 wdt:P127 M2 .\n?x0 wdt:P127 M3 .\n?x0 wdt:P127 M4 .\n?x0 wdt:P127 M5\n}",
    "id": 152321,
    "split": "gold_test",
    "en": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group",
    "optimized": "Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?",
    "results": [],
    "direct": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is distributed by\nwd:Q849363 is The Vanguard Group\nwd:Q505275 is Capital Group Companies\nwd:Q219635 is BlackRock\nwd:Q2062523 is Grand Canyon\nwdt:P127 is owned by\nwd:Q3511946 is T. Rowe Price\nwd:Q7603552 is State Street Global Advisors\nwd:Q2007336 is State Farm Insurance\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wd:Q2062523",
        "mask": "kg:0379"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:4122"
      },
      {
        "uri": "wd:Q2062523",
        "mask": "kg:8410"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3255"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:2123"
      },
      {
        "uri": "wd:Q3511946",
        "mask": "kg:7561"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1826"
      },
      {
        "uri": "wd:Q7603552",
        "mask": "kg:9245"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:3236"
      },
      {
        "uri": "wd:Q2007336",
        "mask": "kg:1950"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:0651"
      },
      {
        "uri": "wd:Q219635",
        "mask": "kg:8849"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:6414"
      },
      {
        "uri": "wd:Q505275",
        "mask": "kg:3467"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:0622"
      },
      {
        "uri": "wd:Q849363",
        "mask": "kg:8425"
      }
    ],
    "masked": "Translate the question “Which distributor and producer of Grand Canyon was acquired by State Street Global Advisors, BlackRock, T. Rowe Price, Capital Group Companies, State Farm Insurance, and The Vanguard Group?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4122 is distributed by\nkg:8425 is The Vanguard Group\nkg:3467 is Capital Group Companies\nkg:8849 is BlackRock\nkg:8410 is Grand Canyon\nkg:0622 is owned by\nkg:7561 is T. Rowe Price\nkg:9245 is State Street Global Advisors\nkg:1950 is State Farm Insurance\nkg:3255 is production company"
  },
  {
    "CFQquestionIdx": 155236,
    "expectedResponse": [
      "Virginia City"
    ],
    "questionPatternModEntities": "What film directed by , produced by , and written by M3 , M4 , M5 , and M6 starred M1 and M2",
    "questionPatternModEntities_he": "איזה סרט בבימוי, הפיק ונכתב על ידי M3, M4, M5 ו-M6 בכיכובם של M1 ו-M2",
    "questionPatternModEntities_kn": "M3 , M4 , M5 , ಮತ್ತು M6 ಅವರು M1 ಮತ್ತು M2 ನಟಿಸಿದ ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M1和M2由M3、M4、M5和M6导演、制片和编剧的哪部电影？",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What film directed by , produced by , and written by [Randolph Scott] , [Miriam Hopkins] , [Humphrey Bogart] , and [Robert Buckner] starred [Errol Flynn] and [Paul Fix]",
    "questionWithBrackets_he": "איזה סרט בימוי, הפיק ונכתב על ידי [רנדולף סקוט], [מרים הופקינס], [האמפרי בוגרט] ו[רוברט באקנר] כיכבו [ארול פלין] ו[פול פיקס]",
    "questionWithBrackets_kn": "[ರಾಂಡೋಲ್ಫ್ ಸ್ಕಾಟ್] , [ಮಿರಿಯಮ್ ಹಾಪ್ಕಿನ್ಸ್] , [ಹಂಫ್ರೆ ಬೊಗಾರ್ಟ್] ಮತ್ತು [ರಾಬರ್ಟ್ ಬಕ್ನರ್] ಅವರು [ಎರೋಲ್ ಫ್ಲಿನ್] ಮತ್ತು [ಪಾಲ್ ಫಿಕ್ಸ್] ನಟಿಸಿರುವವರು ನಿರ್ದೇಶಿಸಿದ, ನಿರ್ಮಿಸಿದ ಮತ್ತು ಬರೆದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionWithBrackets_zh": "[伦道夫·斯科特]、[米里亚姆·霍普金斯]、[汉弗莱·鲍嘉]和[罗伯特·巴克纳]执导、制作和编剧的哪部电影由[埃罗尔·弗林]和[保罗·菲克斯]主演？",
    "recursionDepth": 50,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q16390 . ?x0 wdt:P57 wd:Q295984 . ?x0 wdt:P57 wd:Q4420093 . ?x0 wdt:P57 wd:Q242477 . ?x0 wdt:P162|wdt:P272 wd:Q16390 . ?x0 wdt:P162|wdt:P272 wd:Q295984 . ?x0 wdt:P162|wdt:P272 wd:Q4420093 . ?x0 wdt:P162|wdt:P272 wd:Q242477 . ?x0 wdt:P161 wd:Q93188 . ?x0 wdt:P161 wd:Q744357 . ?x0 wdt:P58 wd:Q16390 . ?x0 wdt:P58 wd:Q295984 . ?x0 wdt:P58 wd:Q4420093 . ?x0 wdt:P58 wd:Q242477 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P57 M5 .\n?x0 wdt:P57 M6 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P162|wdt:P272 M4 .\n?x0 wdt:P162|wdt:P272 M5 .\n?x0 wdt:P162|wdt:P272 M6 .\n?x0 wdt:P161 M1 .\n?x0 wdt:P161 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4 .\n?x0 wdt:P58 M5 .\n?x0 wdt:P58 M6\n}",
    "id": 155236,
    "split": "gold_test",
    "en": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix",
    "optimized": "What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?",
    "results": [],
    "direct": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is director\nwd:Q4420093 is Robert Buckner\nwd:Q11424 is film\nwdt:P58 is screenwriter\nwd:Q295984 is Randolph Scott\nwd:Q16390 is Humphrey Bogart\nwdt:P31 is instance of\nwdt:P162 is producer\nwd:Q242477 is Miriam Hopkins\nwd:Q93188 is Errol Flynn\nwd:Q744357 is Paul Fix\nwdt:P161 is cast member\nwdt:P272 is production company",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:4101"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:1860"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6534"
      },
      {
        "uri": "wd:Q16390",
        "mask": "kg:7134"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8891"
      },
      {
        "uri": "wd:Q295984",
        "mask": "kg:4991"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9036"
      },
      {
        "uri": "wd:Q4420093",
        "mask": "kg:6370"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3082"
      },
      {
        "uri": "wd:Q242477",
        "mask": "kg:9864"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:4429"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4123"
      },
      {
        "uri": "wd:Q16390",
        "mask": "kg:0943"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:4573"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5602"
      },
      {
        "uri": "wd:Q295984",
        "mask": "kg:1619"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0011"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3691"
      },
      {
        "uri": "wd:Q4420093",
        "mask": "kg:9183"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:9112"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8763"
      },
      {
        "uri": "wd:Q242477",
        "mask": "kg:6300"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9759"
      },
      {
        "uri": "wd:Q93188",
        "mask": "kg:0743"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1087"
      },
      {
        "uri": "wd:Q744357",
        "mask": "kg:8323"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1512"
      },
      {
        "uri": "wd:Q16390",
        "mask": "kg:1608"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7960"
      },
      {
        "uri": "wd:Q295984",
        "mask": "kg:0279"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8685"
      },
      {
        "uri": "wd:Q4420093",
        "mask": "kg:4602"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3580"
      },
      {
        "uri": "wd:Q242477",
        "mask": "kg:6595"
      }
    ],
    "masked": "Translate the question “What movie starring Errol Flynn and Paul Fix was directed, produced, and written by Randolph Scott, Miriam Hopkins, Humphrey Bogart, and Robert Buckner?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3082 is director\nkg:4602 is Robert Buckner\nkg:1860 is film\nkg:3580 is screenwriter\nkg:0279 is Randolph Scott\nkg:1608 is Humphrey Bogart\nkg:4101 is instance of\nkg:9112 is producer\nkg:6595 is Miriam Hopkins\nkg:0743 is Errol Flynn\nkg:8323 is Paul Fix\nkg:1087 is cast member\nkg:8763 is production company"
  }
]