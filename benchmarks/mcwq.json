[
  {
    "CFQquestionIdx": 63797,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 a screenwriter",
    "questionPatternModEntities_he": "האם M0 היה תסריטאי",
    "questionPatternModEntities_kn": "M0 ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionPatternModEntities_zh": "M0是编剧吗？",
    "questionTemplate": "Was [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was [Hans Ertl] a screenwriter",
    "questionWithBrackets_he": "האם [הנס ארטל] היה תסריטאי",
    "questionWithBrackets_kn": "[Hans Ertl] ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionWithBrackets_zh": "[Hans Ertl] 是编剧吗？",
    "recursionDepth": 10,
    "sparql": "ASK WHERE { wd:Q103013 wdt:P106 wd:Q69423232 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q69423232 }",
    "id": 63797,
    "split": "gold_test",
    "en": "Was Hans Ertl a screenwriter",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103013 is Q103013\nwdt:P106 is P106\nwd:Q69423232 is Q69423232",
    "masks": [
      {
        "uri": "wd:Q103013",
        "mask": "kg:5262"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:7910"
      },
      {
        "uri": "wd:Q69423232",
        "mask": "kg:9740"
      }
    ],
    "masked": "Translate the question “Was Hans Ertl a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5262 is Q103013\nkg:7910 is P106\nkg:9740 is Q69423232"
  },
  {
    "CFQquestionIdx": 108918,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a composer M0",
    "questionPatternModEntities_he": "האם מלחין היה M0",
    "questionPatternModEntities_kn": "ಸಂಯೋಜಕ M0 ಆಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "是作曲家M0吗？",
    "questionTemplate": "Was a [NP_SIMPLE] [entity]",
    "questionWithBrackets": "Was a composer [Bob Dylan]",
    "questionWithBrackets_he": "האם היה מלחין [בוב דילן]",
    "questionWithBrackets_kn": "ಸಂಯೋಜಕ [ಬಾಬ್ ಡೈಲನ್]",
    "questionWithBrackets_zh": "是作曲家[鲍勃·迪伦]吗？",
    "recursionDepth": 10,
    "sparql": "ASK WHERE { wd:Q392 wdt:P106 wd:Q36834 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q36834 }",
    "id": 108918,
    "split": "gold_test",
    "en": "Was a composer Bob Dylan",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q392 is Q392\nwdt:P106 is P106\nwd:Q36834 is Q36834",
    "masks": [
      {
        "uri": "wd:Q392",
        "mask": "kg:1692"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:3308"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:9736"
      }
    ],
    "masked": "Translate the question “Was a composer Bob Dylan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1692 is Q392\nkg:3308 is P106\nkg:9736 is Q36834"
  },
  {
    "CFQquestionIdx": 144115,
    "expectedResponse": [
      "L'Harmonie",
      "Waterloo Gardens Inc.",
      "Mevrex",
      "Zale Media LLC",
      "Werlein's for Music"
    ],
    "questionPatternModEntities": "What did M0 found",
    "questionPatternModEntities_he": "מה M0 מצא",
    "questionPatternModEntities_kn": "M0 ಏನು ಕಂಡುಹಿಡಿದಿದೆ",
    "questionPatternModEntities_zh": "M0发现了什么？",
    "questionTemplate": "What did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What did [human] found",
    "questionWithBrackets_he": "מה [אדם] מצא",
    "questionWithBrackets_kn": "[ಮಾನವ] ಏನು ಕಂಡುಹಿಡಿದನು",
    "questionWithBrackets_zh": "[人类]发现了什么？",
    "recursionDepth": 10,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P112 wd:Q5 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 M0\n}",
    "id": 144115,
    "split": "gold_test",
    "en": "What did human found",
    "results": [
      [
        "wd:Q120053021"
      ],
      [
        "wd:Q20475006"
      ],
      [
        "wd:Q105946422"
      ],
      [
        "wd:Q113071363"
      ],
      [
        "wd:Q69997240"
      ]
    ],
    "direct": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What did human found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwd:Q5 is Q5",
    "masks": [
      {
        "uri": "wdt:P112",
        "mask": "kg:0249"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:7493"
      }
    ],
    "masked": "Translate the question “What did human found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0249 is P112\nkg:7493 is Q5"
  },
  {
    "CFQquestionIdx": 145327,
    "expectedResponse": [
      "The Sacrifice"
    ],
    "questionPatternModEntities": "What did M0 edit",
    "questionPatternModEntities_he": "מה M0 ערך",
    "questionPatternModEntities_kn": "M0 ಏನು ಸಂಪಾದಿಸಿದೆ",
    "questionPatternModEntities_zh": "M0编辑了什么？",
    "questionTemplate": "What did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What did [Andrei Tarkovsky] edit",
    "questionWithBrackets_he": "מה ערך [אנדרי טרקובסקי]",
    "questionWithBrackets_kn": "[ಆಂಡ್ರೇ ತಾರ್ಕೋವ್ಸ್ಕಿ] ಏನು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[安德烈·塔可夫斯基] 编辑了什么？",
    "recursionDepth": 10,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q853 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0\n}",
    "id": 145327,
    "split": "gold_test",
    "en": "What did Andrei Tarkovsky edit",
    "results": [
      [
        "wd:Q281988"
      ]
    ],
    "direct": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q853 is Q853",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:5624"
      },
      {
        "uri": "wd:Q853",
        "mask": "kg:0714"
      }
    ],
    "masked": "Translate the question “What did Andrei Tarkovsky edit” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5624 is P1040\nkg:0714 is Q853"
  },
  {
    "CFQquestionIdx": 48730,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 M1 's sequel",
    "questionPatternModEntities_he": "האם היה סרט ההמשך של M0 M1",
    "questionPatternModEntities_kn": "M0 M1 ನ ಮುಂದುವರಿದ ಭಾಗವೇ",
    "questionPatternModEntities_zh": "M0是M1的续集吗？",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was [So Long, and Thanks for All the Fish] [Life, the Universe and Everything] 's sequel",
    "questionWithBrackets_he": "האם [כל כך ארוך, ותודה על כל הדגים] [החיים, היקום והכל] היה ההמשך של",
    "questionWithBrackets_kn": "[ಇಷ್ಟು ದೀರ್ಘ ಮತ್ತು ಎಲ್ಲಾ ಮೀನುಗಳಿಗೆ ಧನ್ಯವಾದಗಳು] [ಲೈಫ್, ಯೂನಿವರ್ಸ್ ಮತ್ತು ಎವೆರಿಥಿಂಗ್] ನ ಉತ್ತರಭಾಗವೇ",
    "questionWithBrackets_zh": "[这么久，感谢所有的鱼] [生命、宇宙和一切] 的续集吗？",
    "recursionDepth": 11,
    "sparql": "ASK WHERE { wd:Q1042294 wdt:P155 wd:Q721 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P155 M1\n}",
    "id": 48730,
    "split": "gold_test",
    "en": "Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel",
    "results": [
      true
    ],
    "direct": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1042294 is Q1042294\nwdt:P155 is P155\nwd:Q721 is Q721",
    "masks": [
      {
        "uri": "wd:Q1042294",
        "mask": "kg:1291"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:1047"
      },
      {
        "uri": "wd:Q721",
        "mask": "kg:9162"
      }
    ],
    "masked": "Translate the question “Was So Long, and Thanks for All the Fish Life, the Universe and Everything 's sequel” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1291 is Q1042294\nkg:1047 is P155\nkg:9162 is Q721"
  },
  {
    "CFQquestionIdx": 49221,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's sequel M0",
    "questionPatternModEntities_he": "האם סרט ההמשך של M1 היה M0",
    "questionPatternModEntities_kn": "M1 ನ ಉತ್ತರಭಾಗ M0 ಆಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M1的续集是M0吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
    "questionWithBrackets": "Was [Π] 's sequel [san]",
    "questionWithBrackets_he": "האם ההמשך של [Π] היה [סן]",
    "questionWithBrackets_kn": "[Π] ನ ಉತ್ತರಭಾಗ [ಸ್ಯಾನ್] ಆಗಿದೆಯೇ",
    "questionWithBrackets_zh": "是 [Π] 的续集 [san] 吗？",
    "recursionDepth": 11,
    "sparql": "ASK WHERE { wd:Q131593 wdt:P155 wd:Q168 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P155 M1\n}",
    "id": 49221,
    "split": "gold_test",
    "en": "Was Π 's sequel san",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Π 's sequel san” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q131593 is Q131593\nwdt:P155 is P155\nwd:Q168 is Q168",
    "masks": [
      {
        "uri": "wd:Q131593",
        "mask": "kg:4953"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:1888"
      },
      {
        "uri": "wd:Q168",
        "mask": "kg:5573"
      }
    ],
    "masked": "Translate the question “Was Π 's sequel san” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4953 is Q131593\nkg:1888 is P155\nkg:5573 is Q168"
  },
  {
    "CFQquestionIdx": 167428,
    "expectedResponse": [
      "Jacques Champollion"
    ],
    "questionPatternModEntities": "What was M0 's parent",
    "questionPatternModEntities_he": "מה היה ההורה של M0",
    "questionPatternModEntities_kn": "M0 ನ ಪೋಷಕ ಯಾವುದು",
    "questionPatternModEntities_zh": "M0 的父母是什么人？",
    "questionTemplate": "What was [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What was [Jean-François Champollion] 's parent",
    "questionWithBrackets_he": "מה היה ההורה של [ז&#39;אן פרנסואה שמפוליון]",
    "questionWithBrackets_kn": "[ಜೀನ್-ಫ್ರಾಂಕೋಯಿಸ್ ಚಾಂಪೋಲಿಯನ್] ಅವರ ಪೋಷಕ ಯಾವುದು",
    "questionWithBrackets_zh": "[Jean-François Champollion] 的父母是谁？",
    "recursionDepth": 11,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P40|wdt:P355 wd:Q260 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 M0\n}",
    "id": 167428,
    "split": "gold_test",
    "en": "What was Jean-François Champollion 's parent",
    "results": [
      [
        "wd:Q66305710"
      ]
    ],
    "direct": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q260 is Q260",
    "masks": [
      {
        "uri": "wdt:P40",
        "mask": "kg:7406"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:4300"
      },
      {
        "uri": "wd:Q260",
        "mask": "kg:2110"
      }
    ],
    "masked": "Translate the question “What was Jean-François Champollion 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7406 is P40\nkg:4300 is P355\nkg:2110 is Q260"
  },
  {
    "CFQquestionIdx": 184847,
    "expectedResponse": [
      "The Pirate Planet",
      "The Hitchhiker's Guide to the Galaxy",
      "The Five Doctors",
      "Shada",
      "City of Death",
      "Hyperland"
    ],
    "questionPatternModEntities": "What was written by M0",
    "questionPatternModEntities_he": "מה נכתב על ידי M0",
    "questionPatternModEntities_kn": "M0 ಏನು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0写了什么？",
    "questionTemplate": "What was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written by [Douglas Adams]",
    "questionWithBrackets_he": "מה נכתב על ידי [דאגלס אדמס]",
    "questionWithBrackets_kn": "[ಡೌಗ್ಲಾಸ್ ಆಡಮ್ಸ್] ಏನು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[道格拉斯·亚当斯] 写了什么？",
    "recursionDepth": 11,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P58 wd:Q42 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 M0\n}",
    "id": 184847,
    "split": "gold_test",
    "en": "What was written by Douglas Adams",
    "results": [
      [
        "wd:Q1768713"
      ],
      [
        "wd:Q513589"
      ],
      [
        "wd:Q3470527"
      ],
      [
        "wd:Q5123647"
      ],
      [
        "wd:Q836821"
      ],
      [
        "wd:Q12858529"
      ]
    ],
    "direct": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written by Douglas Adams” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P58 is P58\nwd:Q42 is Q42",
    "masks": [
      {
        "uri": "wdt:P58",
        "mask": "kg:4901"
      },
      {
        "uri": "wd:Q42",
        "mask": "kg:7075"
      }
    ],
    "masked": "Translate the question “What was written by Douglas Adams” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4901 is P58\nkg:7075 is Q42"
  },
  {
    "CFQquestionIdx": 62531,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 employed by M1",
    "questionPatternModEntities_he": "האם M0 הועסק על ידי M1",
    "questionPatternModEntities_kn": "M1 ನಿಂದ M0 ಅನ್ನು ಬಳಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是 M1 雇佣的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [Max Margules] employed by [Austria]",
    "questionWithBrackets_he": "האם [מקס מרגולס] הועסק על ידי [אוסטריה]",
    "questionWithBrackets_kn": "[ಮ್ಯಾಕ್ಸ್ ಮಾರ್ಗುಲ್ಸ್] ಅವರನ್ನು [ಆಸ್ಟ್ರಿಯಾ] ನೇಮಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[Max Margules] 是否受雇于 [奥地利]？",
    "recursionDepth": 12,
    "sparql": "ASK WHERE { wd:Q79070 wdt:P108 wd:Q40 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P108 M1\n}",
    "id": 62531,
    "split": "gold_test",
    "en": "Was Max Margules employed by Austria",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q79070 is Q79070\nwdt:P108 is P108\nwd:Q40 is Q40",
    "masks": [
      {
        "uri": "wd:Q79070",
        "mask": "kg:4741"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3135"
      },
      {
        "uri": "wd:Q40",
        "mask": "kg:4661"
      }
    ],
    "masked": "Translate the question “Was Max Margules employed by Austria” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4741 is Q79070\nkg:3135 is P108\nkg:4661 is Q40"
  },
  {
    "CFQquestionIdx": 64272,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by M1",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי M1",
    "questionPatternModEntities_kn": "M0 ಅನ್ನು M1 ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0是M1写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] written by [J. R. R. Tolkien]",
    "questionWithBrackets_he": "האם [The Hobbit: An Unexpected Journey] נכתב על ידי [J. ר.ר. טולקין]",
    "questionWithBrackets_kn": "ವಾಸ್ [ದಿ ಹಾಬಿಟ್: ಆನ್ ಎಕ್ಸ್‌ಪೆಕ್ಟೆಡ್ ಜರ್ನಿ] ಬರೆದವರು [ಜೆ. R. R. ಟೋಲ್ಕಿನ್]",
    "questionWithBrackets_zh": "[霍比特人：意外之旅] 是由 [J. R.R.托尔金]？",
    "recursionDepth": 12,
    "sparql": "ASK WHERE { wd:Q80379 wdt:P58 wd:Q892 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P58 M1\n}",
    "id": 64272,
    "split": "gold_test",
    "en": "Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien",
    "results": [
      true
    ],
    "direct": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q80379 is Q80379\nwdt:P58 is P58\nwd:Q892 is Q892",
    "masks": [
      {
        "uri": "wd:Q80379",
        "mask": "kg:7109"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7976"
      },
      {
        "uri": "wd:Q892",
        "mask": "kg:5079"
      }
    ],
    "masked": "Translate the question “Was The Hobbit: An Unexpected Journey written by J. R. R. Tolkien” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7109 is Q80379\nkg:7976 is P58\nkg:5079 is Q892"
  },
  {
    "CFQquestionIdx": 69534,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 executive produced by M1",
    "questionPatternModEntities_he": "האם מנהל M0 הופק על ידי M1",
    "questionPatternModEntities_kn": "M0 ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಅನ್ನು M1 ನಿಂದ ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0执行官是M1出品的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [A Good Day to Die Hard] executive produced by [Bruce Willis]",
    "questionWithBrackets_he": "האם [A Good Day to Die Hard] הופק על ידי [ברוס וויליס]",
    "questionWithBrackets_kn": "[ಎ ಗುಡ್ ಡೇ ಟು ಡೈ ಹಾರ್ಡ್] ಕಾರ್ಯನಿರ್ವಾಹಕ [ಬ್ರೂಸ್ ವಿಲ್ಲೀಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[A Good Day to Die Hard] 是由 [Bruce Willis] 制作的吗？",
    "recursionDepth": 13,
    "sparql": "ASK WHERE { wd:Q72276 wdt:P1431 wd:Q2680 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1431 M1\n}",
    "id": 69534,
    "split": "gold_test",
    "en": "Was A Good Day to Die Hard executive produced by Bruce Willis",
    "results": [
      true
    ],
    "direct": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q72276 is Q72276\nwdt:P1431 is P1431\nwd:Q2680 is Q2680",
    "masks": [
      {
        "uri": "wd:Q72276",
        "mask": "kg:0000"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7729"
      },
      {
        "uri": "wd:Q2680",
        "mask": "kg:8619"
      }
    ],
    "masked": "Translate the question “Was A Good Day to Die Hard executive produced by Bruce Willis” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0000 is Q72276\nkg:7729 is P1431\nkg:8619 is Q2680"
  },
  {
    "CFQquestionIdx": 50653,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's costume designer a composer",
    "questionPatternModEntities_he": "האם מעצב התלבושות של M1 היה מלחין",
    "questionPatternModEntities_kn": "M1 ನ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು ಸಂಯೋಜಕರೇ",
    "questionPatternModEntities_zh": "M1的服装设计师是作曲家吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE]",
    "questionWithBrackets": "Was [White Diamond: A Personal Portrait of Kylie Minogue] 's costume designer a composer",
    "questionWithBrackets_he": "האם מעצב התלבושות של [White Diamond: A Personal Portrait of Kylie Minogue] היה מלחין",
    "questionWithBrackets_kn": "[ವೈಟ್ ಡೈಮಂಡ್: ಕೈಲಿ ಮಿನೋಗ್ ಅವರ ವೈಯಕ್ತಿಕ ಭಾವಚಿತ್ರ] ಅವರ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು ಸಂಯೋಜಕರೇ",
    "questionWithBrackets_zh": "[白钻：凯莉·米洛的个人肖像]的服装设计师是作曲家吗？",
    "recursionDepth": 14,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q36834 . wd:Q2733930 wdt:P2515 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q36834 .\nM1 wdt:P2515 ?x0\n}",
    "id": 50653,
    "split": "gold_test",
    "en": "Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q2733930 is Q2733930\nwdt:P2515 is P2515",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5300"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:7624"
      },
      {
        "uri": "wd:Q2733930",
        "mask": "kg:8685"
      },
      {
        "uri": "wdt:P2515",
        "mask": "kg:8803"
      }
    ],
    "masked": "Translate the question “Was White Diamond: A Personal Portrait of Kylie Minogue 's costume designer a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5300 is P106\nkg:7624 is Q36834\nkg:8685 is Q2733930\nkg:8803 is P2515"
  },
  {
    "CFQquestionIdx": 50798,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's cinematographer a screenwriter",
    "questionPatternModEntities_he": "האם צלם הקולנוע של M1 היה תסריטאי",
    "questionPatternModEntities_kn": "M1 ನ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionPatternModEntities_zh": "M1的摄影师是编剧吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE]",
    "questionWithBrackets": "Was [Olympia] 's cinematographer a screenwriter",
    "questionWithBrackets_he": "האם צלם הקולנוע של [אולימפיה] היה תסריטאי",
    "questionWithBrackets_kn": "[ಒಲಿಂಪಿಯಾ] ನ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಚಿತ್ರಕಥೆಗಾರನೇ",
    "questionWithBrackets_zh": "[奥林匹亚]的摄影师是编剧吗？",
    "recursionDepth": 14,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q69423232 . wd:Q158069 wdt:P344 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q69423232 .\nM1 wdt:P344 ?x0\n}",
    "id": 50798,
    "split": "gold_test",
    "en": "Was Olympia 's cinematographer a screenwriter",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q158069 is Q158069\nwdt:P344 is P344",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2252"
      },
      {
        "uri": "wd:Q69423232",
        "mask": "kg:3749"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:6944"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6390"
      }
    ],
    "masked": "Translate the question “Was Olympia 's cinematographer a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2252 is P106\nkg:3749 is Q69423232\nkg:6944 is Q158069\nkg:6390 is P344"
  },
  {
    "CFQquestionIdx": 49488,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M1 's spouse M0 's employee",
    "questionPatternModEntities_he": "האם בן הזוג של M1 היה עובד של M0",
    "questionPatternModEntities_kn": "M1 ರ ಸಂಗಾತಿ M0 ರ ಉದ್ಯೋಗಿಯೇ",
    "questionPatternModEntities_zh": "M1 的配偶是 M0 的雇员吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was [Erich Honecker] 's spouse [Free German Youth] 's employee",
    "questionWithBrackets_he": "האם בן זוגו של [אריך הונקר] היה עובד של [נוער גרמני חופשי]",
    "questionWithBrackets_kn": "[ಎರಿಕ್ ಹೊನೆಕರ್] ಅವರ ಸಂಗಾತಿಯ [ಫ್ರೀ ಜರ್ಮನ್ ಯೂತ್] ಅವರ ಉದ್ಯೋಗಿಯೇ",
    "questionWithBrackets_zh": "[Erich Honecker] 的配偶 [Free German Youth] 是雇员吗？",
    "recursionDepth": 15,
    "sparql": "ASK WHERE { ?x0 wdt:P108 wd:Q76845 . ?x0 wdt:P26 wd:Q2607 . FILTER ( ?x0 != wd:Q2607 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P108 M0 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M1 )\n}",
    "id": 49488,
    "split": "gold_test",
    "en": "Was Erich Honecker 's spouse Free German Youth 's employee",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q76845 is Q76845\nwdt:P26 is P26\nwd:Q2607 is Q2607\nwd:Q2607 is Q2607",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:5635"
      },
      {
        "uri": "wd:Q76845",
        "mask": "kg:0885"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:2718"
      },
      {
        "uri": "wd:Q2607",
        "mask": "kg:6714"
      },
      {
        "uri": "wd:Q2607",
        "mask": "kg:1941"
      }
    ],
    "masked": "Translate the question “Was Erich Honecker 's spouse Free German Youth 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5635 is P108\nkg:0885 is Q76845\nkg:2718 is P26\nkg:1941 is Q2607\nkg:1941 is Q2607"
  },
  {
    "CFQquestionIdx": 64281,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 produced by a composer",
    "questionPatternModEntities_he": "האם M1 הופק על ידי מלחין",
    "questionPatternModEntities_kn": "M1 ಅನ್ನು ಸಂಯೋಜಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1是作曲家制作的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "questionWithBrackets": "Was [1999] produced by a composer",
    "questionWithBrackets_he": "האם [1999] הופק על ידי מלחין",
    "questionWithBrackets_kn": "ಸಂಯೋಜಕರಿಂದ [1999] ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[1999] 是作曲家制作的吗？",
    "recursionDepth": 15,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q36834 . wd:Q208824 wdt:P162|wdt:P272 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q36834 .\nM1 wdt:P162|wdt:P272 ?x0\n}",
    "id": 64281,
    "split": "gold_test",
    "en": "Was 1999 produced by a composer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwd:Q208824 is Q208824\nwdt:P162 is P162\nwdt:P272 is P272",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0214"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:0295"
      },
      {
        "uri": "wd:Q208824",
        "mask": "kg:7537"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8864"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8026"
      }
    ],
    "masked": "Translate the question “Was 1999 produced by a composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0214 is P106\nkg:0295 is Q36834\nkg:7537 is Q208824\nkg:8864 is P162\nkg:8026 is P272"
  },
  {
    "CFQquestionIdx": 109257,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M1 a screenwriter",
    "questionPatternModEntities_he": "האם מלחין של M1 היה תסריטאי",
    "questionPatternModEntities_kn": "M1 ರ ಸಂಯೋಜಕರು ಚಿತ್ರಕಥೆಗಾರರೇ",
    "questionPatternModEntities_zh": "M1的作曲家是编剧吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was a composer of [Al Compás de tu Mentira] a screenwriter",
    "questionWithBrackets_he": "האם מלחין [Al Compás de tu Mentira] היה תסריטאי",
    "questionWithBrackets_kn": "[Al Compás de tu Mentira] ಸಂಯೋಜಕರು ಚಿತ್ರಕಥೆಗಾರರೇ",
    "questionWithBrackets_zh": "[Al Compás de tu Mentira] 的作曲家是编剧吗？",
    "recursionDepth": 16,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q69423232 . wd:Q577126 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q69423232 .\nM1 wdt:P86 ?x0\n}",
    "id": 109257,
    "split": "gold_test",
    "en": "Was a composer of Al Compás de tu Mentira a screenwriter",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q69423232 is Q69423232\nwd:Q577126 is Q577126\nwdt:P86 is P86",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:3969"
      },
      {
        "uri": "wd:Q69423232",
        "mask": "kg:7339"
      },
      {
        "uri": "wd:Q577126",
        "mask": "kg:0549"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:3068"
      }
    ],
    "masked": "Translate the question “Was a composer of Al Compás de tu Mentira a screenwriter” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3969 is P106\nkg:7339 is Q69423232\nkg:0549 is Q577126\nkg:3068 is P86"
  },
  {
    "CFQquestionIdx": 109298,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M1 a cinematographer",
    "questionPatternModEntities_he": "האם מלחין של M1 היה צלם קולנוע",
    "questionPatternModEntities_kn": "M1 ರ ಸಂಯೋಜಕರು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M1的作曲家是摄影师吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was a composer of [The Chess Players] a cinematographer",
    "questionWithBrackets_he": "האם מלחין של [שחקני השחמט] היה צלם קולנוע",
    "questionWithBrackets_kn": "[ದಿ ಚೆಸ್ ಪ್ಲೇಯರ್ಸ್] ನ ಸಂಯೋಜಕರು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "[The Chess Players] 的作曲家是摄影师吗？",
    "recursionDepth": 16,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . wd:Q76582 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\nM1 wdt:P86 ?x0\n}",
    "id": 109298,
    "split": "gold_test",
    "en": "Was a composer of The Chess Players a cinematographer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q76582 is Q76582\nwdt:P86 is P86",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5106"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:7704"
      },
      {
        "uri": "wd:Q76582",
        "mask": "kg:1865"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:6267"
      }
    ],
    "masked": "Translate the question “Was a composer of The Chess Players a cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5106 is P106\nkg:7704 is Q222344\nkg:1865 is Q76582\nkg:6267 is P86"
  },
  {
    "CFQquestionIdx": 165018,
    "expectedResponse": [],
    "questionPatternModEntities": "What sequel of M1 did M0 distribute",
    "questionPatternModEntities_he": "איזה המשך של M1 הפיץ M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಉತ್ತರಭಾಗವನ್ನು M0 ವಿತರಿಸಿದೆ",
    "questionPatternModEntities_zh": "M0发行了M1的什么续集？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What sequel of [Microsoft Flight Simulator 2004: A Century of Flight] did [Microsoft] distribute",
    "questionWithBrackets_he": "איזה סרט המשך של [Microsoft Flight Simulator 2004: A Century of Flight] הפיצה [Microsoft]",
    "questionWithBrackets_kn": "[ಮೈಕ್ರೋಸಾಫ್ಟ್ ಫ್ಲೈಟ್ ಸಿಮ್ಯುಲೇಟರ್ 2004: ಎ ಸೆಂಚುರಿ ಆಫ್ ಫ್ಲೈಟ್] ಯಾವ ಉತ್ತರಭಾಗವನ್ನು [ಮೈಕ್ರೋಸಾಫ್ಟ್] ವಿತರಿಸಿದೆ",
    "questionWithBrackets_zh": "[Microsoft] 发布了 [Microsoft Flight Simulator 2004: A Century of Flight] 的什么续集？",
    "recursionDepth": 16,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P750 wd:Q2283 . ?x0 wdt:P155 wd:Q4348691 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 M0 .\n?x0 wdt:P155 M1\n}",
    "id": 165018,
    "split": "gold_test",
    "en": "What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute",
    "results": [],
    "direct": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q2283 is Q2283\nwdt:P155 is P155\nwd:Q4348691 is Q4348691",
    "masks": [
      {
        "uri": "wdt:P750",
        "mask": "kg:2898"
      },
      {
        "uri": "wd:Q2283",
        "mask": "kg:6939"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:0040"
      },
      {
        "uri": "wd:Q4348691",
        "mask": "kg:9554"
      }
    ],
    "masked": "Translate the question “What sequel of Microsoft Flight Simulator 2004: A Century of Flight did Microsoft distribute” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2898 is P750\nkg:6939 is Q2283\nkg:0040 is P155\nkg:9554 is Q4348691"
  },
  {
    "CFQquestionIdx": 165191,
    "expectedResponse": [
      "Twin Peaks: Fire Walk with Me"
    ],
    "questionPatternModEntities": "What sequel of M1 starred M0",
    "questionPatternModEntities_he": "באיזה סרט המשך של M1 כיכב M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಸೀಕ್ವೆಲ್ M0 ನಟಿಸಿದೆ",
    "questionPatternModEntities_zh": "M1的什么续集主演了M0？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What sequel of [Twin Peaks] starred [James Parks]",
    "questionWithBrackets_he": "באיזה סרט המשך של [טווין פיקס] כיכב [ג&#39;יימס פארקס]",
    "questionWithBrackets_kn": "[ಜೇಮ್ಸ್ ಪಾರ್ಕ್ಸ್] ನಟಿಸಿದ [ಟ್ವಿನ್ ಪೀಕ್ಸ್] ಯಾವ ಸೀಕ್ವೆಲ್",
    "questionWithBrackets_zh": "[双峰]的哪部续集由[詹姆斯·帕克斯]主演？",
    "recursionDepth": 16,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P155 wd:Q2085 . ?x0 wdt:P161 wd:Q967797 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 M1 .\n?x0 wdt:P161 M0\n}",
    "id": 165191,
    "split": "gold_test",
    "en": "What sequel of Twin Peaks starred James Parks",
    "results": [],
    "direct": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P155 is P155\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q967797 is Q967797",
    "masks": [
      {
        "uri": "wdt:P155",
        "mask": "kg:5276"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:1540"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1182"
      },
      {
        "uri": "wd:Q967797",
        "mask": "kg:7081"
      }
    ],
    "masked": "Translate the question “What sequel of Twin Peaks starred James Parks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5276 is P155\nkg:1540 is Q2085\nkg:1182 is P161\nkg:7081 is Q967797"
  },
  {
    "CFQquestionIdx": 49041,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 's founder a parent of M1",
    "questionPatternModEntities_he": "האם מייסד M0 היה הורה של M1",
    "questionPatternModEntities_kn": "M0 ನ ಸಂಸ್ಥಾಪಕರು M1 ನ ಪೋಷಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0 的创始人是 M1 的父母吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was [Higher Ground Productions] 's founder a parent of [Malia Obama]",
    "questionWithBrackets_he": "האם מייסד [Higher Ground Productions] היה הורה של [מליה אובמה]",
    "questionWithBrackets_kn": "[ಹೈಯರ್ ಗ್ರೌಂಡ್ ಪ್ರೊಡಕ್ಷನ್ಸ್] ಸಂಸ್ಥಾಪಕರು [ಮಾಲಿಯಾ ಒಬಾಮಾ] ಅವರ ಪೋಷಕರಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Higher Ground Productions] 的创始人是 [Malia Obama] 的父母吗？",
    "recursionDepth": 17,
    "sparql": "ASK WHERE { wd:Q81950264 wdt:P112 ?x0 . ?x0 wdt:P40|wdt:P355 wd:Q15070044 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P40|wdt:P355 M1\n}",
    "id": 49041,
    "split": "gold_test",
    "en": "Was Higher Ground Productions 's founder a parent of Malia Obama",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q81950264 is Q81950264\nwdt:P112 is P112\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044",
    "masks": [
      {
        "uri": "wd:Q81950264",
        "mask": "kg:3621"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:5208"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:2362"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:6446"
      },
      {
        "uri": "wd:Q15070044",
        "mask": "kg:9431"
      }
    ],
    "masked": "Translate the question “Was Higher Ground Productions 's founder a parent of Malia Obama” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3621 is Q81950264\nkg:5208 is P112\nkg:2362 is P40\nkg:6446 is P355\nkg:9431 is Q15070044"
  },
  {
    "CFQquestionIdx": 64041,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 's sibling a employee of M1",
    "questionPatternModEntities_he": "האם אח של M0 היה עובד של M1",
    "questionPatternModEntities_kn": "M0 ನ ಒಡಹುಟ್ಟಿದವರು M1 ನ ಉದ್ಯೋಗಿಯೇ",
    "questionPatternModEntities_zh": "M0 的兄弟姐妹是 M1 的雇员吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was [Adolf Hitler] 's sibling a employee of [Uniqa Insurance Group]",
    "questionWithBrackets_he": "האם אחיו של [אדולף היטלר] היה עובד של [קבוצת הביטוח יוניקה]",
    "questionWithBrackets_kn": "[ಅಡಾಲ್ಫ್ ಹಿಟ್ಲರ್] ಅವರ ಒಡಹುಟ್ಟಿದವರು [ಯುನಿಕಾ ಇನ್ಶುರೆನ್ಸ್ ಗ್ರೂಪ್] ಉದ್ಯೋಗಿಯೇ",
    "questionWithBrackets_zh": "[阿道夫希特勒]的兄弟姐妹是[优衣库保险集团]的雇员吗？",
    "recursionDepth": 17,
    "sparql": "ASK WHERE { ?x0 wdt:P108 wd:Q1022419 . ?x0 wdt:P3373 wd:Q352 . FILTER ( ?x0 != wd:Q352 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P108 M1 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 64041,
    "split": "gold_test",
    "en": "Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1022419 is Q1022419\nwdt:P3373 is P3373\nwd:Q352 is Q352\nwd:Q352 is Q352",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:5670"
      },
      {
        "uri": "wd:Q1022419",
        "mask": "kg:6467"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:9040"
      },
      {
        "uri": "wd:Q352",
        "mask": "kg:5646"
      },
      {
        "uri": "wd:Q352",
        "mask": "kg:6535"
      }
    ],
    "masked": "Translate the question “Was Adolf Hitler 's sibling a employee of Uniqa Insurance Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5670 is P108\nkg:6467 is Q1022419\nkg:9040 is P3373\nkg:6535 is Q352\nkg:6535 is Q352"
  },
  {
    "CFQquestionIdx": 153352,
    "expectedResponse": [
      "Apple Inc."
    ],
    "questionPatternModEntities": "What employer of M0 was M1 's distributor",
    "questionPatternModEntities_he": "איזה מעסיק של M0 היה המפיץ של M1",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು M1 ನ ವಿತರಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个雇主是 M1 的经销商？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Dr. Dre] was [Animal Crossing: Pocket Camp] 's distributor",
    "questionWithBrackets_he": "איזה מעסיק של [Dr. דרה] היה המפיץ של [Animal Crossing: Pocket Camp]",
    "questionWithBrackets_kn": "ಯಾವ ಉದ್ಯೋಗದಾತ [ಡಾ. ಡ್ರೆ] [ಅನಿಮಲ್ ಕ್ರಾಸಿಂಗ್: ಪಾಕೆಟ್ ಕ್ಯಾಂಪ್] ನ ವಿತರಕರೇ",
    "questionWithBrackets_zh": "[博士的雇主] Dre] 是 [Animal Crossing: Pocket Camp] 的经销商吗？",
    "recursionDepth": 17,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q6078 wdt:P108 ?x0 . wd:Q42310881 wdt:P750 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P108 ?x0 .\nM1 wdt:P750 ?x0\n}",
    "id": 153352,
    "split": "gold_test",
    "en": "What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor",
    "results": [
      [
        "wd:Q312"
      ]
    ],
    "direct": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6078 is Q6078\nwdt:P108 is P108\nwd:Q42310881 is Q42310881\nwdt:P750 is P750",
    "masks": [
      {
        "uri": "wd:Q6078",
        "mask": "kg:2903"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:9526"
      },
      {
        "uri": "wd:Q42310881",
        "mask": "kg:5020"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:2310"
      }
    ],
    "masked": "Translate the question “What employer of Dr. Dre was Animal Crossing: Pocket Camp 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2903 is Q6078\nkg:9526 is P108\nkg:5020 is Q42310881\nkg:2310 is P750"
  },
  {
    "CFQquestionIdx": 153369,
    "expectedResponse": [
      "Barack Obama"
    ],
    "questionPatternModEntities": "What employer of M1 was M0 's parent",
    "questionPatternModEntities_he": "איזה מעסיק של M1 היה ההורה של M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು M0 ನ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M1 的哪个雇主是 M0 的父母？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Ben LaBolt] was [Malia Obama] 's parent",
    "questionWithBrackets_he": "איזה מעסיק של [בן לבולט] היה ההורה של [מליה אובמה]",
    "questionWithBrackets_kn": "[ಬೆನ್ ಲಾಬೋಲ್ಟ್] ಯಾವ ಉದ್ಯೋಗದಾತರು [ಮಾಲಿಯಾ ಒಬಾಮಾ] ಅವರ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Ben LaBolt] 的哪个雇主是 [Malia Obama] 的父母？",
    "recursionDepth": 17,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q103941992 wdt:P108 ?x0 . ?x0 wdt:P40|wdt:P355 wd:Q15070044 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P108 ?x0 .\n?x0 wdt:P40|wdt:P355 M0\n}",
    "id": 153369,
    "split": "gold_test",
    "en": "What employer of Ben LaBolt was Malia Obama 's parent",
    "results": [
      [
        "wd:Q76"
      ]
    ],
    "direct": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q103941992 is Q103941992\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q15070044 is Q15070044",
    "masks": [
      {
        "uri": "wd:Q103941992",
        "mask": "kg:4817"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3071"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:1689"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:9336"
      },
      {
        "uri": "wd:Q15070044",
        "mask": "kg:7766"
      }
    ],
    "masked": "Translate the question “What employer of Ben LaBolt was Malia Obama 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4817 is Q103941992\nkg:3071 is P108\nkg:1689 is P40\nkg:9336 is P355\nkg:7766 is Q15070044"
  },
  {
    "CFQquestionIdx": 94799,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer 's spouse M0 's sibling",
    "questionPatternModEntities_he": "האם בן זוגה של מעצבת תלבושות היה אח של M0",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಸಂಗಾತಿ M0 ಅವರ ಒಡಹುಟ್ಟಿದವರೇ",
    "questionPatternModEntities_zh": "服装设计师的配偶是M0的兄弟姐妹吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer 's spouse [Pierre Van Dormael] 's sibling",
    "questionWithBrackets_he": "האם בן זוגו של מעצב תלבושות [פייר ואן דורמאל] היה אח של",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಸಂಗಾತಿ [ಪಿಯರ್ ವ್ಯಾನ್ ಡೋರ್ಮೇಲ್] ಅವರ ಒಡಹುಟ್ಟಿದವರು",
    "questionWithBrackets_zh": "服装设计师的配偶 [Pierre Van Dormael] 是兄弟姐妹吗？",
    "recursionDepth": 18,
    "sparql": "ASK WHERE { ?x0 wdt:P3373 wd:Q730300 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P106 wd:Q1323191 . FILTER ( ?x0 != ?x1 ) . FILTER ( ?x0 != wd:Q730300 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P106 wd:Q1323191 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "id": 94799,
    "split": "gold_test",
    "en": "Was a costume designer 's spouse Pierre Van Dormael 's sibling",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q730300 is Q730300\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q730300 is Q730300",
    "masks": [
      {
        "uri": "wdt:P3373",
        "mask": "kg:0002"
      },
      {
        "uri": "wd:Q730300",
        "mask": "kg:7938"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4660"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:9513"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:5504"
      },
      {
        "uri": "wd:Q730300",
        "mask": "kg:2674"
      }
    ],
    "masked": "Translate the question “Was a costume designer 's spouse Pierre Van Dormael 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0002 is P3373\nkg:2674 is Q730300\nkg:4660 is P26\nkg:9513 is P106\nkg:5504 is Q1323191\nkg:2674 is Q730300"
  },
  {
    "CFQquestionIdx": 94801,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a costume designer 's spouse M0 's founder",
    "questionPatternModEntities_he": "האם בן הזוג של מעצב תלבושות היה המייסד של M0",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಸಂಗಾತಿ M0 ಸ್ಥಾಪಕರೇ",
    "questionPatternModEntities_zh": "服装设计师的配偶是M0的创始人吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer 's spouse [ClubJenna] 's founder",
    "questionWithBrackets_he": "האם בן זוגה של מעצבת תלבושות [ClubJenna] היה המייסד של מעצבת התלבושות",
    "questionWithBrackets_kn": "ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರ ಸಂಗಾತಿಯ [ಕ್ಲಬ್‌ಜೆನ್ನಾ] ಸಂಸ್ಥಾಪಕರೇ",
    "questionWithBrackets_zh": "是服装设计师的配偶 [ClubJenna] 的创始人吗？",
    "recursionDepth": 18,
    "sparql": "ASK WHERE { wd:Q1102919 wdt:P112 ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P106 wd:Q1323191 . FILTER ( ?x0 != ?x1 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P106 wd:Q1323191 .\nFILTER ( ?x0 != ?x1 )\n}",
    "id": 94801,
    "split": "gold_test",
    "en": "Was a costume designer 's spouse ClubJenna 's founder",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1102919 is Q1102919\nwdt:P112 is P112\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q1323191 is Q1323191",
    "masks": [
      {
        "uri": "wd:Q1102919",
        "mask": "kg:3343"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:9356"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9700"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:5767"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:0522"
      }
    ],
    "masked": "Translate the question “Was a costume designer 's spouse ClubJenna 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3343 is Q1102919\nkg:9356 is P112\nkg:9700 is P26\nkg:5767 is P106\nkg:0522 is Q1323191"
  },
  {
    "CFQquestionIdx": 183804,
    "expectedResponse": [
      "Magical Mystery Tour"
    ],
    "questionPatternModEntities": "What was written and directed by M0",
    "questionPatternModEntities_he": "מה נכתב וביים M0",
    "questionPatternModEntities_kn": "M0 ಏನು ಬರೆದು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 编剧和导演了什么？",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written and directed by [George Harrison]",
    "questionWithBrackets_he": "מה נכתב וביים על ידי [ג&#39;ורג&#39; הריסון]",
    "questionWithBrackets_kn": "[ಜಾರ್ಜ್ ಹ್ಯಾರಿಸನ್] ಏನು ಬರೆದು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[乔治·哈里森] 编剧和导演了什么？",
    "recursionDepth": 18,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q2643 . ?x0 wdt:P58 wd:Q2643 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 183804,
    "split": "gold_test",
    "en": "What was written and directed by George Harrison",
    "results": [
      [
        "wd:Q901203"
      ]
    ],
    "direct": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q2643 is Q2643\nwdt:P58 is P58\nwd:Q2643 is Q2643",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:4115"
      },
      {
        "uri": "wd:Q2643",
        "mask": "kg:6636"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2538"
      },
      {
        "uri": "wd:Q2643",
        "mask": "kg:8693"
      }
    ],
    "masked": "Translate the question “What was written and directed by George Harrison” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4115 is P57\nkg:8693 is Q2643\nkg:2538 is P58\nkg:8693 is Q2643"
  },
  {
    "CFQquestionIdx": 183840,
    "expectedResponse": [
      "In Daddy's Pocket",
      "No label defined",
      "No label defined"
    ],
    "questionPatternModEntities": "What was written and edited by M0",
    "questionPatternModEntities_he": "מה נכתב ונערך על ידי M0",
    "questionPatternModEntities_kn": "M0 ಅವರು ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 编写和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written and edited by [Anker Sørensen]",
    "questionWithBrackets_he": "מה נכתב וערך על ידי [אנקר סורסן]",
    "questionWithBrackets_kn": "[ಆಂಕರ್ ಸೊರೆನ್ಸೆನ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Anker Sørensen] 编写和编辑了什么？",
    "recursionDepth": 18,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q24907 . ?x0 wdt:P58 wd:Q24907 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 183840,
    "split": "gold_test",
    "en": "What was written and edited by Anker Sørensen",
    "results": [
      [
        "wd:Q12317972"
      ],
      [
        "wd:Q20729292"
      ],
      [
        "wd:Q33540390"
      ]
    ],
    "direct": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q24907 is Q24907\nwdt:P58 is P58\nwd:Q24907 is Q24907",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:1179"
      },
      {
        "uri": "wd:Q24907",
        "mask": "kg:4615"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3729"
      },
      {
        "uri": "wd:Q24907",
        "mask": "kg:9130"
      }
    ],
    "masked": "Translate the question “What was written and edited by Anker Sørensen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1179 is P1040\nkg:9130 is Q24907\nkg:3729 is P58\nkg:9130 is Q24907"
  },
  {
    "CFQquestionIdx": 93962,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer M2 's Swedish parent",
    "questionPatternModEntities_he": "האם היה הורה השוודי של מעצבת התלבושות M2",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ M2 ನ ಸ್ವೀಡಿಷ್ ಪೋಷಕರೇ",
    "questionPatternModEntities_zh": "是服装设计师 M2 的瑞典父母吗？",
    "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer [Nadja Weiss] 's Swedish parent",
    "questionWithBrackets_he": "האם היה הורה השוודי של מעצבת תלבושות [נאדג&#39;ה וייס]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ನಾಡ್ಜಾ ವೈಸ್] ಅವರ ಸ್ವೀಡಿಷ್ ಪೋಷಕರೇ",
    "questionWithBrackets_zh": "是服装设计师 [Nadja Weiss] 的瑞典父母吗？",
    "recursionDepth": 19,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . ?x0 wdt:P40|wdt:P355 wd:Q4990261 . ?x0 wdt:P27 wd:Q34 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\n?x0 wdt:P40|wdt:P355 M2 .\n?x0 wdt:P27 wd:Q34\n}",
    "id": 93962,
    "split": "gold_test",
    "en": "Was a costume designer Nadja Weiss 's Swedish parent",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q4990261 is Q4990261\nwdt:P27 is P27\nwd:Q34 is Q34",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:4138"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:4112"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:9469"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:8412"
      },
      {
        "uri": "wd:Q4990261",
        "mask": "kg:8815"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:3398"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:5057"
      }
    ],
    "masked": "Translate the question “Was a costume designer Nadja Weiss 's Swedish parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4138 is P106\nkg:4112 is Q1323191\nkg:9469 is P40\nkg:8412 is P355\nkg:8815 is Q4990261\nkg:3398 is P27\nkg:5057 is Q34"
  },
  {
    "CFQquestionIdx": 50441,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M2 's spouse a Japanese cinematographer",
    "questionPatternModEntities_he": "האם בן הזוג של M2 היה צלם קולנוע יפני",
    "questionPatternModEntities_kn": "M2 ನ ಸಂಗಾತಿಯು ಜಪಾನಿನ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದಾರಾ",
    "questionPatternModEntities_zh": "M2的配偶是日本摄影师吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "questionWithBrackets": "Was [Takenori Sentō] 's spouse a Japanese cinematographer",
    "questionWithBrackets_he": "האם בן זוגו של [Takenori Sentō] היה צלם קולנוע יפני",
    "questionWithBrackets_kn": "[ಟಕೆನೋರಿ ಸೆಂಟೊ] ಅವರ ಸಂಗಾತಿಯು ಜಪಾನೀಸ್ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಆಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "[仙藤武则]的配偶是日本摄影师吗？",
    "recursionDepth": 19,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . ?x0 wdt:P27 wd:Q17 . ?x0 wdt:P26 wd:Q3514303 . FILTER ( ?x0 != wd:Q3514303 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M2 )\n}",
    "id": 50441,
    "split": "gold_test",
    "en": "Was Takenori Sentō 's spouse a Japanese cinematographer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwdt:P27 is P27\nwd:Q17 is Q17\nwdt:P26 is P26\nwd:Q3514303 is Q3514303\nwd:Q3514303 is Q3514303",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:1102"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:8757"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:1521"
      },
      {
        "uri": "wd:Q17",
        "mask": "kg:5000"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:5652"
      },
      {
        "uri": "wd:Q3514303",
        "mask": "kg:3274"
      },
      {
        "uri": "wd:Q3514303",
        "mask": "kg:5209"
      }
    ],
    "masked": "Translate the question “Was Takenori Sentō 's spouse a Japanese cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1102 is P106\nkg:8757 is Q222344\nkg:1521 is P27\nkg:5000 is Q17\nkg:5652 is P26\nkg:5209 is Q3514303\nkg:5209 is Q3514303"
  },
  {
    "CFQquestionIdx": 153523,
    "expectedResponse": [
      "United Nations"
    ],
    "questionPatternModEntities": "What employer of a film director did M0 found",
    "questionPatternModEntities_he": "איזה מעסיק של במאי קולנוע מצא M0",
    "questionPatternModEntities_kn": "M0 ಯಾವ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರ ಉದ್ಯೋಗದಾತರನ್ನು ಕಂಡುಕೊಂಡರು",
    "questionPatternModEntities_zh": "M0找到了哪个电影导演的雇主？",
    "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What employer of a film director did [Canada] found",
    "questionWithBrackets_he": "איזה מעסיק של במאי קולנוע מצא [קנדה]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರ ಯಾವ ಉದ್ಯೋಗದಾತರು [ಕೆನಡಾ] ಕಂಡುಕೊಂಡರು",
    "questionWithBrackets_zh": "[加拿大] 找到了哪个电影导演的雇主？",
    "recursionDepth": 19,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x1 wdt:P108 ?x0 . ?x0 wdt:P112 wd:Q16 . ?x1 wdt:P106 wd:Q2526255 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x1 wdt:P108 ?x0 .\n?x0 wdt:P112 M0 .\n?x1 wdt:P106 wd:Q2526255 }",
    "id": 153523,
    "split": "gold_test",
    "en": "What employer of a film director did Canada found",
    "results": [
      [
        "wd:Q1065"
      ]
    ],
    "direct": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwdt:P112 is P112\nwd:Q16 is Q16\nwdt:P106 is P106\nwd:Q2526255 is Q2526255",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:1384"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:3245"
      },
      {
        "uri": "wd:Q16",
        "mask": "kg:2398"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:6030"
      },
      {
        "uri": "wd:Q2526255",
        "mask": "kg:7442"
      }
    ],
    "masked": "Translate the question “What employer of a film director did Canada found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1384 is P108\nkg:3245 is P112\nkg:2398 is Q16\nkg:6030 is P106\nkg:7442 is Q2526255"
  },
  {
    "CFQquestionIdx": 185751,
    "expectedResponse": [
      "I Am Because We Are"
    ],
    "questionPatternModEntities": "What was written by and produced by M0",
    "questionPatternModEntities_he": "מה נכתב והפיק על ידי M0",
    "questionPatternModEntities_kn": "M0 ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 写了什么，由 M0 制作了什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written by and produced by [Madonna]",
    "questionWithBrackets_he": "מה נכתב על ידי והפיק [מדונה]",
    "questionWithBrackets_kn": "[ಮಡೋನಾ] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是由[麦当娜]编写和制作的？",
    "recursionDepth": 19,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P162|wdt:P272 wd:Q1744 . ?x0 wdt:P58 wd:Q1744 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 185751,
    "split": "gold_test",
    "en": "What was written by and produced by Madonna",
    "results": [
      [
        "wd:Q15847069"
      ],
      [
        "wd:Q2662913"
      ]
    ],
    "direct": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1744 is Q1744\nwdt:P58 is P58\nwd:Q1744 is Q1744",
    "masks": [
      {
        "uri": "wdt:P162",
        "mask": "kg:2955"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:1388"
      },
      {
        "uri": "wd:Q1744",
        "mask": "kg:3428"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3432"
      },
      {
        "uri": "wd:Q1744",
        "mask": "kg:0694"
      }
    ],
    "masked": "Translate the question “What was written by and produced by Madonna” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2955 is P162\nkg:1388 is P272\nkg:0694 is Q1744\nkg:3432 is P58\nkg:0694 is Q1744"
  },
  {
    "CFQquestionIdx": 94691,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a costume designer 's employer a producer of M0",
    "questionPatternModEntities_he": "האם מעסיקו של מעצב תלבושות היה מפיק של M0",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಉದ್ಯೋಗದಾತರು M0 ನ ನಿರ್ಮಾಪಕರೇ",
    "questionPatternModEntities_zh": "服装设计师的雇主是 M0 的制作人吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a costume designer 's employer a producer of [Joe's Bed-Stuy Barbershop: We Cut Heads]",
    "questionWithBrackets_he": "האם מעסיקו של מעצב תלבושות היה מפיק של [מספרה של ג&#39;ו מיט-סטוי: We Cut Heads]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಉದ್ಯೋಗದಾತರು [ಜೋಸ್ ಬೆಡ್-ಸ್ಟೂಯ್ ಬಾರ್ಬರ್‌ಶಾಪ್: ವಿ ಕಟ್ ಹೆಡ್ಸ್] ನಿರ್ಮಾಪಕರೇ",
    "questionWithBrackets_zh": "服装设计师的雇主是 [Joe&#39;s Bed-Stuy Barbershop: We Cut Heads] 的制作人吗？",
    "recursionDepth": 20,
    "sparql": "ASK WHERE { ?x1 wdt:P108 ?x0 . wd:Q1141467 wdt:P272 ?x0 . ?x1 wdt:P106 wd:Q1323191 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x1 wdt:P108 ?x0 .\nM0 wdt:P272 ?x0 .\n?x1 wdt:P106 wd:Q1323191 }",
    "id": 94691,
    "split": "gold_test",
    "en": "Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q1141467 is Q1141467\nwdt:P272 is P272\nwdt:P106 is P106\nwd:Q1323191 is Q1323191",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:0409"
      },
      {
        "uri": "wd:Q1141467",
        "mask": "kg:3388"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5383"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:2759"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:1388"
      }
    ],
    "masked": "Translate the question “Was a costume designer 's employer a producer of Joe's Bed-Stuy Barbershop: We Cut Heads” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0409 is P108\nkg:3388 is Q1141467\nkg:5383 is P272\nkg:2759 is P106\nkg:1388 is Q1323191"
  },
  {
    "CFQquestionIdx": 94779,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer 's sibling a spouse of M0",
    "questionPatternModEntities_he": "האם אח של מעצבת תלבושות היה בן זוג של M0",
    "questionPatternModEntities_kn": "ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರ ಒಡಹುಟ್ಟಿದವರು M0 ಅವರ ಸಂಗಾತಿಯೇ",
    "questionPatternModEntities_zh": "服装设计师的兄弟姐妹是M0的配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a costume designer 's sibling a spouse of [Nadia Cassini]",
    "questionWithBrackets_he": "האם אח של מעצבת תלבושות היה בן זוג של [נדיה קאסיני]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಅವರ ಒಡಹುಟ್ಟಿದವರು [ನಾಡಿಯಾ ಕ್ಯಾಸಿನಿ] ಅವರ ಸಂಗಾತಿಯೇ",
    "questionWithBrackets_zh": "服装设计师的兄弟姐妹是 [Nadia Cassini] 的配偶吗？",
    "recursionDepth": 20,
    "sparql": "ASK WHERE { ?x0 wdt:P3373 ?x1 . ?x0 wdt:P26 wd:Q461354 . ?x1 wdt:P106 wd:Q1323191 . FILTER ( ?x0 != ?x1 ) . FILTER ( ?x0 != wd:Q461354 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 M0 .\n?x1 wdt:P106 wd:Q1323191 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "id": 94779,
    "split": "gold_test",
    "en": "Was a costume designer 's sibling a spouse of Nadia Cassini",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwdt:P26 is P26\nwd:Q461354 is Q461354\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q461354 is Q461354",
    "masks": [
      {
        "uri": "wdt:P3373",
        "mask": "kg:0622"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:7684"
      },
      {
        "uri": "wd:Q461354",
        "mask": "kg:6615"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:4040"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:5129"
      },
      {
        "uri": "wd:Q461354",
        "mask": "kg:3988"
      }
    ],
    "masked": "Translate the question “Was a costume designer 's sibling a spouse of Nadia Cassini” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0622 is P3373\nkg:7684 is P26\nkg:3988 is Q461354\nkg:4040 is P106\nkg:5129 is Q1323191\nkg:3988 is Q461354"
  },
  {
    "CFQquestionIdx": 153331,
    "expectedResponse": [
      "Audi"
    ],
    "questionPatternModEntities": "What employer of M0 was a company 's parent",
    "questionPatternModEntities_he": "איזה מעסיק של M0 היה הורה של חברה",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು ಕಂಪನಿಯ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个雇主是公司的母公司？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Christian Abt] was a company 's parent",
    "questionWithBrackets_he": "איזה מעסיק של [Christian Abt] היה הורה של חברה",
    "questionWithBrackets_kn": "[ಕ್ರಿಶ್ಚಿಯನ್ ಆಬ್ಟ್] ಯಾವ ಉದ್ಯೋಗದಾತರು ಕಂಪನಿಯ ಪೋಷಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Christian Abt] 的哪个雇主是公司的母公司？",
    "recursionDepth": 20,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q67134 wdt:P108 ?x0 . ?x0 wdt:P40|wdt:P355 ?x1 . ?x1 wdt:P31 wd:Q4830453 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P108 ?x0 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P31 wd:Q4830453 }",
    "id": 153331,
    "split": "gold_test",
    "en": "What employer of Christian Abt was a company 's parent",
    "results": [
      [
        "wd:Q23317"
      ]
    ],
    "direct": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q67134 is Q67134\nwdt:P108 is P108\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P31 is P31\nwd:Q4830453 is Q4830453",
    "masks": [
      {
        "uri": "wd:Q67134",
        "mask": "kg:1897"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:0342"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:0569"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:7139"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:0475"
      },
      {
        "uri": "wd:Q4830453",
        "mask": "kg:8023"
      }
    ],
    "masked": "Translate the question “What employer of Christian Abt was a company 's parent” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1897 is Q67134\nkg:0342 is P108\nkg:0569 is P40\nkg:7139 is P355\nkg:0475 is P31\nkg:8023 is Q4830453"
  },
  {
    "CFQquestionIdx": 153446,
    "expectedResponse": [
      "Arte"
    ],
    "questionPatternModEntities": "What employer of M0 was a film 's distributor",
    "questionPatternModEntities_he": "איזה מעסיק של M0 היה מפיץ סרט",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಉದ್ಯೋಗದಾತರು ಚಲನಚಿತ್ರದ ವಿತರಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个雇主是电影发行商？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "What employer of [Claire Doutriaux] was a film 's distributor",
    "questionWithBrackets_he": "איזה מעסיק של [קלייר דוטריאו] היה מפיץ סרט",
    "questionWithBrackets_kn": "[ಕ್ಲೇರ್ ಡೌಟ್ರಿಯಾಕ್ಸ್] ಯಾವ ಉದ್ಯೋಗದಾತರು ಚಲನಚಿತ್ರದ ವಿತರಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Claire Doutriaux] 的哪个雇主是电影的发行商？",
    "recursionDepth": 20,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1094792 wdt:P108 ?x0 . ?x1 wdt:P750 ?x0 . ?x1 wdt:P31 wd:Q11424 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P108 ?x0 .\n?x1 wdt:P750 ?x0 .\n?x1 wdt:P31 wd:Q11424 }",
    "id": 153446,
    "split": "gold_test",
    "en": "What employer of Claire Doutriaux was a film 's distributor",
    "results": [
      [
        "wd:Q8073"
      ]
    ],
    "direct": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1094792 is Q1094792\nwdt:P108 is P108\nwdt:P750 is P750\nwdt:P31 is P31\nwd:Q11424 is Q11424",
    "masks": [
      {
        "uri": "wd:Q1094792",
        "mask": "kg:8161"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7435"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:1977"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:2298"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:6868"
      }
    ],
    "masked": "Translate the question “What employer of Claire Doutriaux was a film 's distributor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8161 is Q1094792\nkg:7435 is P108\nkg:1977 is P750\nkg:2298 is P31\nkg:6868 is Q11424"
  },
  {
    "CFQquestionIdx": 78404,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M1 's producer and distributor founded by M0",
    "questionPatternModEntities_he": "האם המפיק והמפיץ של M1 הוקם על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ನಿರ್ಮಾಪಕ ಮತ್ತು ವಿತರಕರು M0 ನಿಂದ ಸ್ಥಾಪಿಸಲ್ಪಟ್ಟಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1的生产商和分销商是M0创立的吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [The Magic Flute] 's producer and distributor founded by [Sweden]",
    "questionWithBrackets_he": "האם המפיק והמפיץ של [חליל הקסם] הוקם על ידי [שבדיה]",
    "questionWithBrackets_kn": "[ದಿ ಮ್ಯಾಜಿಕ್ ಕೊಳಲು] ನಿರ್ಮಾಪಕರು ಮತ್ತು ವಿತರಕರು [ಸ್ವೀಡನ್] ಸ್ಥಾಪಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[魔笛]的制作人和发行人是[瑞典]创办的吗？",
    "recursionDepth": 21,
    "sparql": "ASK WHERE { wd:Q1651543 wdt:P750 ?x0 . wd:Q1651543 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q34 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 78404,
    "split": "gold_test",
    "en": "Was The Magic Flute 's producer and distributor founded by Sweden",
    "results": [
      true
    ],
    "direct": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34",
    "masks": [
      {
        "uri": "wd:Q1651543",
        "mask": "kg:1278"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:3140"
      },
      {
        "uri": "wd:Q1651543",
        "mask": "kg:9250"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7989"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:3121"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:8263"
      }
    ],
    "masked": "Translate the question “Was The Magic Flute 's producer and distributor founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9250 is Q1651543\nkg:3140 is P750\nkg:9250 is Q1651543\nkg:7989 is P272\nkg:3121 is P112\nkg:8263 is Q34"
  },
  {
    "CFQquestionIdx": 94044,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer a Swedish spouse of M2",
    "questionPatternModEntities_he": "האם מעצב תלבושות היה בן זוג שבדי של M2",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ M2 ರ ಸ್ವೀಡಿಷ್ ಸಂಗಾತಿಯೇ",
    "questionPatternModEntities_zh": "服装设计师是 M2 的瑞典配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a costume designer a Swedish spouse of [Mark Sylwan]",
    "questionWithBrackets_he": "האם מעצב תלבושות היה בן זוג שוודי של [מארק סילוואן]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ಮಾರ್ಕ್ ಸಿಲ್ವಾನ್] ಅವರ ಸ್ವೀಡಿಷ್ ಸಂಗಾತಿಯಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "服装设计师是 [Mark Sylwan] 的瑞典配偶吗？",
    "recursionDepth": 21,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . ?x0 wdt:P27 wd:Q34 . ?x0 wdt:P26 wd:Q6200573 . FILTER ( ?x0 != wd:Q6200573 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M2 )\n}",
    "id": 94044,
    "split": "gold_test",
    "en": "Was a costume designer a Swedish spouse of Mark Sylwan",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q6200573 is Q6200573\nwd:Q6200573 is Q6200573",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0399"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:0061"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:2954"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:5786"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:7184"
      },
      {
        "uri": "wd:Q6200573",
        "mask": "kg:8307"
      },
      {
        "uri": "wd:Q6200573",
        "mask": "kg:3313"
      }
    ],
    "masked": "Translate the question “Was a costume designer a Swedish spouse of Mark Sylwan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0399 is P106\nkg:0061 is Q1323191\nkg:2954 is P27\nkg:5786 is Q34\nkg:7184 is P26\nkg:3313 is Q6200573\nkg:3313 is Q6200573"
  },
  {
    "CFQquestionIdx": 165870,
    "expectedResponse": [
      "Laodice IV"
    ],
    "questionPatternModEntities": "What spouse and sibling of M0 married M1",
    "questionPatternModEntities_he": "איזה בן זוג ואח של M0 התחתנו עם M1",
    "questionPatternModEntities_kn": "M0 ರ ಯಾವ ಸಂಗಾತಿ ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು M1 ಅನ್ನು ಮದುವೆಯಾದರು",
    "questionPatternModEntities_zh": "M0 的哪个配偶和兄弟姐妹嫁给了 M1？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What spouse and sibling of [Antiochus IV Epiphanes] married [Antiochus]",
    "questionWithBrackets_he": "איזה בן זוג ואחיו של [אנטיוכוס הרביעי אפיפנס] התחתנו עם [אנטיוכוס]",
    "questionWithBrackets_kn": "[ಆಂಟಿಯೋಕಸ್ IV ಎಪಿಫೇನ್ಸ್] ಯಾವ ಸಂಗಾತಿ ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು [ಆಂಟಿಯೋಕಸ್] ವಿವಾಹವಾದರು",
    "questionWithBrackets_zh": "[Antiochus IV Epiphanes] 的哪位配偶和兄弟姐妹嫁给了 [Antiochus]？",
    "recursionDepth": 21,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P3373 wd:Q3356 . ?x0 wdt:P26 wd:Q3356 . ?x0 wdt:P26 wd:Q2045778 . FILTER ( ?x0 != wd:Q3356 ) . FILTER ( ?x0 != wd:Q3356 ) . FILTER ( ?x0 != wd:Q2045778 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 M0 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
    "id": 165870,
    "split": "gold_test",
    "en": "What spouse and sibling of Antiochus IV Epiphanes married Antiochus",
    "results": [
      [
        "wd:Q451082"
      ]
    ],
    "direct": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P3373 is P3373\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q3356 is Q3356\nwdt:P26 is P26\nwd:Q2045778 is Q2045778\nwd:Q3356 is Q3356\nwd:Q3356 is Q3356\nwd:Q2045778 is Q2045778",
    "masks": [
      {
        "uri": "wdt:P3373",
        "mask": "kg:5421"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:1808"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9368"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:4590"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0822"
      },
      {
        "uri": "wd:Q2045778",
        "mask": "kg:8312"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:8265"
      },
      {
        "uri": "wd:Q3356",
        "mask": "kg:5747"
      },
      {
        "uri": "wd:Q2045778",
        "mask": "kg:3622"
      }
    ],
    "masked": "Translate the question “What spouse and sibling of Antiochus IV Epiphanes married Antiochus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5421 is P3373\nkg:5747 is Q3356\nkg:0822 is P26\nkg:5747 is Q3356\nkg:0822 is P26\nkg:3622 is Q2045778\nkg:5747 is Q3356\nkg:5747 is Q3356\nkg:3622 is Q2045778"
  },
  {
    "CFQquestionIdx": 198562,
    "expectedResponse": [
      "Sveriges Radio"
    ],
    "questionPatternModEntities": "Which distributor and producer of M1 did M0 found",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M1 מצא M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು M0 ಅನ್ನು ಕಂಡುಕೊಂಡಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 找到了 M1 的哪个经销商和生产商？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "Which distributor and producer of [The Magic Flute] did [Sweden] found",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [חליל הקסם] מצאה [שבדיה]",
    "questionWithBrackets_kn": "[ಸ್ವೀಡನ್] ಯಾವ ವಿತರಕರು ಮತ್ತು [ದಿ ಮ್ಯಾಜಿಕ್ ಕೊಳಲು] ನಿರ್ಮಾಪಕರು ಕಂಡುಕೊಂಡರು",
    "questionWithBrackets_zh": "[瑞典] 找到了[魔笛] 的哪家经销商和生产商？",
    "recursionDepth": 21,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1651543 wdt:P750 ?x0 . wd:Q1651543 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q34 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 198562,
    "split": "gold_test",
    "en": "Which distributor and producer of The Magic Flute did Sweden found",
    "results": [
      [
        "wd:Q1543058"
      ]
    ],
    "direct": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34",
    "masks": [
      {
        "uri": "wd:Q1651543",
        "mask": "kg:4344"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:8112"
      },
      {
        "uri": "wd:Q1651543",
        "mask": "kg:2549"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6570"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:2760"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:8236"
      }
    ],
    "masked": "Translate the question “Which distributor and producer of The Magic Flute did Sweden found” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2549 is Q1651543\nkg:8112 is P750\nkg:2549 is Q1651543\nkg:6570 is P272\nkg:2760 is P112\nkg:8236 is Q34"
  },
  {
    "CFQquestionIdx": 46428,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M1 's founder a Dutch sibling of M0",
    "questionPatternModEntities_he": "האם מייסד M1 היה אח הולנדי של M0",
    "questionPatternModEntities_kn": "M1 ನ ಸ್ಥಾಪಕರು M0 ನ ಡಚ್ ಸಹೋದರರೇ",
    "questionPatternModEntities_zh": "M1的创始人是M0的荷兰兄弟吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was [World Wide Fund for Nature] 's founder a Dutch sibling of [Prince Aschwin of Lippe-Biesterfeld]",
    "questionWithBrackets_he": "האם מייסד [הקרן העולמית לטבע] היה אח הולנדי של [הנסיך אשווין מליפה-ביסטרפלד]",
    "questionWithBrackets_kn": "[ವರ್ಲ್ಡ್ ವೈಡ್ ಫಂಡ್ ಫಾರ್ ನೇಚರ್] ಸ್ಥಾಪಕರು [ಲಿಪ್ಪೆ-ಬೈಸ್ಟರ್‌ಫೆಲ್ಡ್‌ನ ಪ್ರಿನ್ಸ್ ಆಶ್ವಿನ್] ಅವರ ಡಚ್ ಸಹೋದರರೇ",
    "questionWithBrackets_zh": "[世界自然基金会]的创始人是[Lippe-Biesterfeld的阿施温王子]的荷兰兄弟姐妹吗？",
    "recursionDepth": 22,
    "sparql": "ASK WHERE { wd:Q117892 wdt:P112 ?x0 . ?x0 wdt:P27 wd:Q29999 . ?x0 wdt:P3373 wd:Q2336212 . FILTER ( ?x0 != wd:Q2336212 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM1 wdt:P112 ?x0 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 46428,
    "split": "gold_test",
    "en": "Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld",
    "results": [
      true
    ],
    "direct": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q117892 is Q117892\nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q29999 is Q29999\nwdt:P3373 is P3373\nwd:Q2336212 is Q2336212\nwd:Q2336212 is Q2336212",
    "masks": [
      {
        "uri": "wd:Q117892",
        "mask": "kg:9596"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:1026"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:3660"
      },
      {
        "uri": "wd:Q29999",
        "mask": "kg:9334"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:4469"
      },
      {
        "uri": "wd:Q2336212",
        "mask": "kg:3865"
      },
      {
        "uri": "wd:Q2336212",
        "mask": "kg:7833"
      }
    ],
    "masked": "Translate the question “Was World Wide Fund for Nature 's founder a Dutch sibling of Prince Aschwin of Lippe-Biesterfeld” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9596 is Q117892\nkg:1026 is P112\nkg:3660 is P27\nkg:9334 is Q29999\nkg:4469 is P3373\nkg:7833 is Q2336212\nkg:7833 is Q2336212"
  },
  {
    "CFQquestionIdx": 90036,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a German sibling of M0 M1 's employee",
    "questionPatternModEntities_he": "האם היה אח גרמני של העובד של M0 M1",
    "questionPatternModEntities_kn": "M0 M1 ನ ಉದ್ಯೋಗಿಯ ಜರ್ಮನ್ ಒಡಹುಟ್ಟಿದವರು",
    "questionPatternModEntities_zh": "是 M0 M1 雇员的德国兄弟姐妹吗？",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a German sibling of [Dieter Hoeneß] [FC Bayern Munich] 's employee",
    "questionWithBrackets_he": "מהו אח גרמני של העובד של [Dieter Hoeneß] [FC באיירן מינכן]",
    "questionWithBrackets_kn": "[Dieter Hoeneß] [FC ಬೇಯರ್ನ್ ಮ್ಯೂನಿಚ್] ನ ಉದ್ಯೋಗಿಯ ಜರ್ಮನ್ ಒಡಹುಟ್ಟಿದವರು ಏನು",
    "questionWithBrackets_zh": "[Dieter Hoeneß] [FC Bayern Munich] 的雇员的德国兄弟姐妹是什么？",
    "recursionDepth": 22,
    "sparql": "ASK WHERE { ?x0 wdt:P108 wd:Q15789 . ?x0 wdt:P27 wd:Q183 . ?x0 wdt:P3373 wd:Q60414 . FILTER ( ?x0 != wd:Q60414 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P108 M1 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 90036,
    "split": "gold_test",
    "en": "Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P108 is P108\nwd:Q15789 is Q15789\nwdt:P27 is P27\nwd:Q183 is Q183\nwdt:P3373 is P3373\nwd:Q60414 is Q60414\nwd:Q60414 is Q60414",
    "masks": [
      {
        "uri": "wdt:P108",
        "mask": "kg:4698"
      },
      {
        "uri": "wd:Q15789",
        "mask": "kg:2961"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:2636"
      },
      {
        "uri": "wd:Q183",
        "mask": "kg:8594"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:5481"
      },
      {
        "uri": "wd:Q60414",
        "mask": "kg:6760"
      },
      {
        "uri": "wd:Q60414",
        "mask": "kg:1876"
      }
    ],
    "masked": "Translate the question “Was a German sibling of Dieter Hoeneß FC Bayern Munich 's employee” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4698 is P108\nkg:2961 is Q15789\nkg:2636 is P27\nkg:8594 is Q183\nkg:5481 is P3373\nkg:1876 is Q60414\nkg:1876 is Q60414"
  },
  {
    "CFQquestionIdx": 152348,
    "expectedResponse": [
      "United Artists Corporation"
    ],
    "questionPatternModEntities": "What distributor and producer of M1 was founded by M0",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M1 הוקם על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು M0 ನಿಂದ ಸ್ಥಾಪಿಸಲ್ಪಟ್ಟರು",
    "questionPatternModEntities_zh": "M0创立了M1的哪家经销商和生产商？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What distributor and producer of [Drums of Love] was founded by [Charlie Chaplin]",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [תופים של אהבה] הוקם על ידי [צ&#39;רלי צ&#39;פלין]",
    "questionWithBrackets_kn": "[ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಸ್ಥಾಪಿಸಿದ [ಡ್ರಮ್ಸ್ ಆಫ್ ಲವ್] ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು",
    "questionWithBrackets_zh": "[查理卓别林]创立了[爱之鼓]的哪家发行商和制作人？",
    "recursionDepth": 22,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q3715556 wdt:P750 ?x0 . wd:Q3715556 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q882 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 152348,
    "split": "gold_test",
    "en": "What distributor and producer of Drums of Love was founded by Charlie Chaplin",
    "results": [
      [
        "wd:Q219400"
      ]
    ],
    "direct": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3715556 is Q3715556\nwdt:P750 is P750\nwd:Q3715556 is Q3715556\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882",
    "masks": [
      {
        "uri": "wd:Q3715556",
        "mask": "kg:2102"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:4295"
      },
      {
        "uri": "wd:Q3715556",
        "mask": "kg:3368"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0313"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:6909"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:7784"
      }
    ],
    "masked": "Translate the question “What distributor and producer of Drums of Love was founded by Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3368 is Q3715556\nkg:4295 is P750\nkg:3368 is Q3715556\nkg:0313 is P272\nkg:6909 is P112\nkg:7784 is Q882"
  },
  {
    "CFQquestionIdx": 184773,
    "expectedResponse": [
      "Pulse"
    ],
    "questionPatternModEntities": "What was written by M0 and produced by M1",
    "questionPatternModEntities_he": "מה נכתב על ידי M0 והפיק על ידי M1",
    "questionPatternModEntities_kn": "M0 ಅವರು ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು M1 ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "什么是M0写的，M1生产的？",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written by [Vince Gilligan] and produced by [Bob Weinstein]",
    "questionWithBrackets_he": "מה נכתב על ידי [וינס גיליגן] והפיק [בוב ויינשטיין]",
    "questionWithBrackets_kn": "[ವಿನ್ಸ್ ಗಿಲ್ಲಿಗನ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು [ಬಾಬ್ ವೈನ್ಸ್ಟೈನ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是[文斯·吉利根]写的，[鲍勃·韦恩斯坦]制作的？",
    "recursionDepth": 22,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P162|wdt:P272 wd:Q888311 . ?x0 wdt:P58 wd:Q4500 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P58 M0\n}",
    "id": 184773,
    "split": "gold_test",
    "en": "What was written by Vince Gilligan and produced by Bob Weinstein",
    "results": [
      [
        "wd:Q744911"
      ]
    ],
    "direct": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q888311 is Q888311\nwdt:P58 is P58\nwd:Q4500 is Q4500",
    "masks": [
      {
        "uri": "wdt:P162",
        "mask": "kg:9244"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3400"
      },
      {
        "uri": "wd:Q888311",
        "mask": "kg:8411"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9666"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:1489"
      }
    ],
    "masked": "Translate the question “What was written by Vince Gilligan and produced by Bob Weinstein” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9244 is P162\nkg:3400 is P272\nkg:8411 is Q888311\nkg:9666 is P58\nkg:1489 is Q4500"
  },
  {
    "CFQquestionIdx": 93828,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a company 's founder M0 's French sibling",
    "questionPatternModEntities_he": "האם M0 מייסד חברה היה אח צרפתי",
    "questionPatternModEntities_kn": "ಕಂಪನಿಯ ಸಂಸ್ಥಾಪಕ M0 ನ ಫ್ರೆಂಚ್ ಸಹೋದರರೇ",
    "questionPatternModEntities_zh": "公司创始人 M0 是法国兄弟吗？",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a company 's founder [Alphonse-Louis du Plessis de Richelieu] 's French sibling",
    "questionWithBrackets_he": "האם מייסד חברה [אלפונס-לואי דו פלסיס דה רישליו] היה אח של צרפתי",
    "questionWithBrackets_kn": "ಕಂಪನಿಯ ಸಂಸ್ಥಾಪಕ [ಅಲ್ಫೋನ್ಸ್-ಲೂಯಿಸ್ ಡು ಪ್ಲೆಸಿಸ್ ಡಿ ರಿಚೆಲಿಯು] ಅವರ ಫ್ರೆಂಚ್ ಒಡಹುಟ್ಟಿದವರು",
    "questionWithBrackets_zh": "公司创始人 [Alphonse-Louis du Plessis de Richelieu] 是法国兄弟吗？",
    "recursionDepth": 23,
    "sparql": "ASK WHERE { ?x1 wdt:P112 ?x0 . ?x0 wdt:P27 wd:Q142 . ?x0 wdt:P3373 wd:Q1079409 . ?x1 wdt:P31 wd:Q4830453 . FILTER ( ?x0 != wd:Q1079409 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x1 wdt:P112 ?x0 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 M0 .\n?x1 wdt:P31 wd:Q4830453 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 93828,
    "split": "gold_test",
    "en": "Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling",
    "results": [
      false
    ],
    "direct": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P112 is P112\nwdt:P27 is P27\nwd:Q142 is Q142\nwdt:P3373 is P3373\nwd:Q1079409 is Q1079409\nwdt:P31 is P31\nwd:Q4830453 is Q4830453\nwd:Q1079409 is Q1079409",
    "masks": [
      {
        "uri": "wdt:P112",
        "mask": "kg:4343"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:7878"
      },
      {
        "uri": "wd:Q142",
        "mask": "kg:2765"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:5080"
      },
      {
        "uri": "wd:Q1079409",
        "mask": "kg:0599"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:1816"
      },
      {
        "uri": "wd:Q4830453",
        "mask": "kg:6013"
      },
      {
        "uri": "wd:Q1079409",
        "mask": "kg:1827"
      }
    ],
    "masked": "Translate the question “Was a company 's founder Alphonse-Louis du Plessis de Richelieu 's French sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4343 is P112\nkg:7878 is P27\nkg:2765 is Q142\nkg:5080 is P3373\nkg:1827 is Q1079409\nkg:1816 is P31\nkg:6013 is Q4830453\nkg:1827 is Q1079409"
  },
  {
    "CFQquestionIdx": 65034,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced by M2 and written by M1",
    "questionPatternModEntities_he": "האם M0 הופק על ידי M2 ונכתב על ידי M1",
    "questionPatternModEntities_kn": "M2 ನಿಂದ M0 ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ ಮತ್ತು M1 ನಿಂದ ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0是M2生产的，M1写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [Michael Jackson's Ghosts] produced by [Stan Winston] and written by [Michael Jackson]",
    "questionWithBrackets_he": "האם [הרוחות של מייקל ג&#39;קסון] הופק על ידי [סטן ווינסטון] ונכתב על ידי [מייקל ג&#39;קסון]",
    "questionWithBrackets_kn": "[ಮೈಕೆಲ್ ಜಾಕ್ಸನ್ ಅವರ ಘೋಸ್ಟ್ಸ್] ಅನ್ನು [ಸ್ಟಾನ್ ವಿನ್‌ಸ್ಟನ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು [ಮೈಕೆಲ್ ಜಾಕ್ಸನ್] ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[迈克尔杰克逊的鬼魂]是由[斯坦温斯顿]制作并由[迈克尔杰克逊]编写的吗？",
    "recursionDepth": 23,
    "sparql": "ASK WHERE { wd:Q44477 wdt:P162|wdt:P272 wd:Q320211 . wd:Q44477 wdt:P58 wd:Q2831 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P58 M1\n}",
    "id": 65034,
    "split": "gold_test",
    "en": "Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44477 is Q44477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q320211 is Q320211\nwd:Q44477 is Q44477\nwdt:P58 is P58\nwd:Q2831 is Q2831",
    "masks": [
      {
        "uri": "wd:Q44477",
        "mask": "kg:8033"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:7187"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3913"
      },
      {
        "uri": "wd:Q320211",
        "mask": "kg:4411"
      },
      {
        "uri": "wd:Q44477",
        "mask": "kg:4760"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4994"
      },
      {
        "uri": "wd:Q2831",
        "mask": "kg:9933"
      }
    ],
    "masked": "Translate the question “Was Michael Jackson's Ghosts produced by Stan Winston and written by Michael Jackson” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4760 is Q44477\nkg:7187 is P162\nkg:3913 is P272\nkg:4411 is Q320211\nkg:4760 is Q44477\nkg:4994 is P58\nkg:9933 is Q2831"
  },
  {
    "CFQquestionIdx": 176408,
    "expectedResponse": [
      "Gremlins",
      "The Goonies"
    ],
    "questionPatternModEntities": "What was executive produced by M0 and written by M1",
    "questionPatternModEntities_he": "מה הופק מנהל על ידי M0 ונכתב על ידי M1",
    "questionPatternModEntities_kn": "M0 ನಿಂದ ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಏನನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು M1 ನಿಂದ ಬರೆಯಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 的执行程序是什么，M1 写的是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was executive produced by [Steven Spielberg] and written by [Chris Columbus]",
    "questionWithBrackets_he": "מה הופק על ידי [סטיבן ספילברג] ונכתב על ידי [כריס קולומבוס]",
    "questionWithBrackets_kn": "[ಸ್ಟೀವನ್ ಸ್ಪೀಲ್ಬರ್ಗ್] ಮತ್ತು [ಕ್ರಿಸ್ ಕೊಲಂಬಸ್] ಬರೆದ ಕಾರ್ಯನಿರ್ವಾಹಕ ಏನು",
    "questionWithBrackets_zh": "[史蒂文·斯皮尔伯格] 出品、[克里斯·哥伦布] 编剧的是什么？",
    "recursionDepth": 23,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1431 wd:Q8877 . ?x0 wdt:P58 wd:Q75079 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 M0 .\n?x0 wdt:P58 M1\n}",
    "id": 176408,
    "split": "gold_test",
    "en": "What was executive produced by Steven Spielberg and written by Chris Columbus",
    "results": [
      [
        "wd:Q636043"
      ],
      [
        "wd:Q241958"
      ]
    ],
    "direct": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q8877 is Q8877\nwdt:P58 is P58\nwd:Q75079 is Q75079",
    "masks": [
      {
        "uri": "wdt:P1431",
        "mask": "kg:6047"
      },
      {
        "uri": "wd:Q8877",
        "mask": "kg:9429"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9283"
      },
      {
        "uri": "wd:Q75079",
        "mask": "kg:9692"
      }
    ],
    "masked": "Translate the question “What was executive produced by Steven Spielberg and written by Chris Columbus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6047 is P1431\nkg:9429 is Q8877\nkg:9283 is P58\nkg:9692 is Q75079"
  },
  {
    "CFQquestionIdx": 198593,
    "expectedResponse": [
      "Sveriges Radio"
    ],
    "questionPatternModEntities": "Which distributor and producer of M1 was founded by M0",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M1 הוקם על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು M0 ನಿಂದ ಸ್ಥಾಪಿಸಲ್ಪಟ್ಟರು",
    "questionPatternModEntities_zh": "M1 的哪家经销商和生产商是 M0 创立的？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Which distributor and producer of [The Magic Flute] was founded by [Sweden]",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [חליל הקסם] הוקם על ידי [שבדיה]",
    "questionWithBrackets_kn": "[ಸ್ವೀಡನ್] ಸ್ಥಾಪಿಸಿದ [ದಿ ಮ್ಯಾಜಿಕ್ ಕೊಳಲು] ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರು",
    "questionWithBrackets_zh": "[The Magic Flute] 的哪家分销商和生产商是 [瑞典] 创立的？",
    "recursionDepth": 23,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1651543 wdt:P750 ?x0 . wd:Q1651543 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q34 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P750 ?x0 .\nM1 wdt:P272 ?x0 .\n?x0 wdt:P112 M0\n}",
    "id": 198593,
    "split": "gold_test",
    "en": "Which distributor and producer of The Magic Flute was founded by Sweden",
    "results": [
      [
        "wd:Q1543058"
      ]
    ],
    "direct": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1651543 is Q1651543\nwdt:P750 is P750\nwd:Q1651543 is Q1651543\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q34 is Q34",
    "masks": [
      {
        "uri": "wd:Q1651543",
        "mask": "kg:6703"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:4497"
      },
      {
        "uri": "wd:Q1651543",
        "mask": "kg:9202"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5876"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:3114"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:6890"
      }
    ],
    "masked": "Translate the question “Which distributor and producer of The Magic Flute was founded by Sweden” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9202 is Q1651543\nkg:4497 is P750\nkg:9202 is Q1651543\nkg:5876 is P272\nkg:3114 is P112\nkg:6890 is Q34"
  },
  {
    "CFQquestionIdx": 15858,
    "expectedResponse": false,
    "questionPatternModEntities": "Did M0 's parent , spouse , and sibling marry M1",
    "questionPatternModEntities_he": "האם ההורה, בן הזוג והאח של M0 התחתנו עם M1",
    "questionPatternModEntities_kn": "M0 ರ ಪೋಷಕರು, ಸಂಗಾತಿಗಳು ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು M1 ರನ್ನು ಮದುವೆಯಾದರೇ",
    "questionPatternModEntities_zh": "M0 的父母、配偶和兄弟姐妹是否与 M1 结婚？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did [Henutmire] 's parent , spouse , and sibling marry [Nefertarilllala]",
    "questionWithBrackets_he": "האם ההורה, בן הזוג ואחיו של [הנוטמיר] התחתנו עם [Nefertarilllala]",
    "questionWithBrackets_kn": "[ಹೆನುಟ್‌ಮೈರ್] ಅವರ ಪೋಷಕರು, ಸಂಗಾತಿಗಳು ಮತ್ತು ಒಡಹುಟ್ಟಿದವರು [ನೆಫೆರ್ಟಾರಿಲ್ಲಾಲಾ] ಅವರನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Henutmire] 的父母、配偶和兄弟姐妹与 [Nefertarillalla] 结婚了吗？",
    "recursionDepth": 24,
    "sparql": "ASK WHERE { ?x0 wdt:P40|wdt:P355 wd:Q443473 . ?x0 wdt:P3373 wd:Q443473 . ?x0 wdt:P26 wd:Q443473 . ?x0 wdt:P26 wd:Q210535 . FILTER ( ?x0 != wd:Q443473 ) . FILTER ( ?x0 != wd:Q443473 ) . FILTER ( ?x0 != wd:Q210535 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P40|wdt:P355 M0 .\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 M0 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
    "id": 15858,
    "split": "gold_test",
    "en": "Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P40 is P40\nwdt:P355 is P355\nwd:Q443473 is Q443473\nwdt:P3373 is P3373\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q443473 is Q443473\nwdt:P26 is P26\nwd:Q210535 is Q210535\nwd:Q443473 is Q443473\nwd:Q443473 is Q443473\nwd:Q210535 is Q210535",
    "masks": [
      {
        "uri": "wdt:P40",
        "mask": "kg:2312"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:9021"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:5707"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:0899"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:5493"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9985"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:3285"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:6012"
      },
      {
        "uri": "wd:Q210535",
        "mask": "kg:5332"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:3185"
      },
      {
        "uri": "wd:Q443473",
        "mask": "kg:0479"
      },
      {
        "uri": "wd:Q210535",
        "mask": "kg:0220"
      }
    ],
    "masked": "Translate the question “Did Henutmire 's parent , spouse , and sibling marry Nefertarilllala” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2312 is P40\nkg:9021 is P355\nkg:0479 is Q443473\nkg:0899 is P3373\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0479 is Q443473\nkg:6012 is P26\nkg:0220 is Q210535\nkg:0479 is Q443473\nkg:0479 is Q443473\nkg:0220 is Q210535"
  },
  {
    "CFQquestionIdx": 94018,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer M3 's Canadian male spouse",
    "questionPatternModEntities_he": "האם היה בן הזוג הקנדי של מעצבת תלבושות M3",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ M3 ರ ಕೆನಡಾದ ಪುರುಷ ಸಂಗಾತಿಯೇ",
    "questionPatternModEntities_zh": "是服装设计师M3的加拿大男性配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a costume designer [Jessica Drake] 's Canadian male spouse",
    "questionWithBrackets_he": "האם היה בן הזוג הקנדי של מעצבת תלבושות [ג&#39;סיקה דרייק]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ಜೆಸ್ಸಿಕಾ ಡ್ರೇಕ್] ಅವರ ಕೆನಡಾದ ಪುರುಷ ಸಂಗಾತಿಯೇ",
    "questionWithBrackets_zh": "服装设计师[杰西卡·德雷克]是加拿大男性配偶吗？",
    "recursionDepth": 24,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . ?x0 wdt:P21 wd:Q6581097 . ?x0 wdt:P27 wd:Q16 . ?x0 wdt:P26 wd:Q233128 . FILTER ( ?x0 != wd:Q233128 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 94018,
    "split": "gold_test",
    "en": "Was a costume designer Jessica Drake 's Canadian male spouse",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwdt:P21 is P21\nwd:Q6581097 is Q6581097\nwdt:P27 is P27\nwd:Q16 is Q16\nwdt:P26 is P26\nwd:Q233128 is Q233128\nwd:Q233128 is Q233128",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8565"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:5053"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:3944"
      },
      {
        "uri": "wd:Q6581097",
        "mask": "kg:9486"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:3720"
      },
      {
        "uri": "wd:Q16",
        "mask": "kg:7839"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9681"
      },
      {
        "uri": "wd:Q233128",
        "mask": "kg:3957"
      },
      {
        "uri": "wd:Q233128",
        "mask": "kg:7081"
      }
    ],
    "masked": "Translate the question “Was a costume designer Jessica Drake 's Canadian male spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8565 is P106\nkg:5053 is Q1323191\nkg:3944 is P21\nkg:9486 is Q6581097\nkg:3720 is P27\nkg:7839 is Q16\nkg:9681 is P26\nkg:7081 is Q233128\nkg:7081 is Q233128"
  },
  {
    "CFQquestionIdx": 164815,
    "expectedResponse": [
      "Las Vías del Amor"
    ],
    "questionPatternModEntities": "What sequel of M1 was distributed and produced by M0",
    "questionPatternModEntities_he": "איזה סרט המשך של M1 הופץ והופק על ידי M0",
    "questionPatternModEntities_kn": "M1 ನ ಯಾವ ಉತ್ತರಭಾಗವನ್ನು M0 ವಿತರಿಸಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಿದೆ",
    "questionPatternModEntities_zh": "M0发行并制作了M1的什么续集？",
    "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What sequel of [Between Love and Hatred] was distributed and produced by [Televisa]",
    "questionWithBrackets_he": "איזה סרט המשך של [בין אהבה לשנאה] הופץ והופק על ידי [טלוויזה]",
    "questionWithBrackets_kn": "[ಟೆಲಿವಿಸಾ] ಮೂಲಕ [ಪ್ರೀತಿ ಮತ್ತು ದ್ವೇಷದ ನಡುವೆ] ಯಾವ ಉತ್ತರಭಾಗವನ್ನು ವಿತರಿಸಲಾಗಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಲಾಗಿದೆ",
    "questionWithBrackets_zh": "[Televisa]发行并制作了[爱与恨之间]的什么续集？",
    "recursionDepth": 24,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P750 wd:Q47099 . ?x0 wdt:P155 wd:Q115945 . ?x0 wdt:P162|wdt:P272 wd:Q47099 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 M0 .\n?x0 wdt:P155 M1 .\n?x0 wdt:P162|wdt:P272 M0\n}",
    "id": 164815,
    "split": "gold_test",
    "en": "What sequel of Between Love and Hatred was distributed and produced by Televisa",
    "results": [
      [
        "wd:Q471588"
      ]
    ],
    "direct": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P750 is P750\nwd:Q47099 is Q47099\nwdt:P155 is P155\nwd:Q115945 is Q115945\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q47099 is Q47099",
    "masks": [
      {
        "uri": "wdt:P750",
        "mask": "kg:0424"
      },
      {
        "uri": "wd:Q47099",
        "mask": "kg:7179"
      },
      {
        "uri": "wdt:P155",
        "mask": "kg:7869"
      },
      {
        "uri": "wd:Q115945",
        "mask": "kg:8668"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1224"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6778"
      },
      {
        "uri": "wd:Q47099",
        "mask": "kg:2408"
      }
    ],
    "masked": "Translate the question “What sequel of Between Love and Hatred was distributed and produced by Televisa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0424 is P750\nkg:2408 is Q47099\nkg:7869 is P155\nkg:8668 is Q115945\nkg:1224 is P162\nkg:6778 is P272\nkg:2408 is Q47099"
  },
  {
    "CFQquestionIdx": 138510,
    "expectedResponse": [
      "Verizon"
    ],
    "questionPatternModEntities": "What child and parent of a company did M0 acquire",
    "questionPatternModEntities_he": "איזה ילד והורה של חברה רכשה M0",
    "questionPatternModEntities_kn": "M0 ಕಂಪನಿಯ ಯಾವ ಮಗು ಮತ್ತು ಪೋಷಕರು ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡರು",
    "questionPatternModEntities_zh": "M0 收购了一家公司的哪个孩子和母公司？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What child and parent of a company did [Verizon] acquire",
    "questionWithBrackets_he": "איזה ילד והורה של חברה רכשה [Verizon]",
    "questionWithBrackets_kn": "ಕಂಪನಿಯ ಯಾವ ಮಗು ಮತ್ತು ಪೋಷಕರು [ವೆರಿಝೋನ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡರು",
    "questionWithBrackets_zh": "[Verizon] 收购了一家公司的哪个孩子和母公司？",
    "recursionDepth": 24,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P127 wd:Q467752 . ?x0 wdt:P40|wdt:P355 ?x1 . ?x0 wdt:P749 ?x1 . ?x1 wdt:P31 wd:Q4830453 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P127 M0 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P749 ?x1 .\n?x1 wdt:P31 wd:Q4830453 }",
    "id": 138510,
    "split": "gold_test",
    "en": "What child and parent of a company did Verizon acquire",
    "results": [],
    "direct": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P127 is P127\nwd:Q467752 is Q467752\nwdt:P40 is P40\nwdt:P355 is P355\nwdt:P749 is P749\nwdt:P31 is P31\nwd:Q4830453 is Q4830453",
    "masks": [
      {
        "uri": "wdt:P127",
        "mask": "kg:4917"
      },
      {
        "uri": "wd:Q467752",
        "mask": "kg:2536"
      },
      {
        "uri": "wdt:P40",
        "mask": "kg:9404"
      },
      {
        "uri": "wdt:P355",
        "mask": "kg:6878"
      },
      {
        "uri": "wdt:P749",
        "mask": "kg:1164"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:9373"
      },
      {
        "uri": "wd:Q4830453",
        "mask": "kg:8291"
      }
    ],
    "masked": "Translate the question “What child and parent of a company did Verizon acquire” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4917 is P127\nkg:2536 is Q467752\nkg:9404 is P40\nkg:6878 is P355\nkg:1164 is P749\nkg:9373 is P31\nkg:8291 is Q4830453"
  },
  {
    "CFQquestionIdx": 77614,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M2 's producer and distributor founded by M0 and M1",
    "questionPatternModEntities_he": "האם המפיק והמפיץ של M2 הוקם על ידי M0 ו-M1",
    "questionPatternModEntities_kn": "M2 ನ ನಿರ್ಮಾಪಕ ಮತ್ತು ವಿತರಕರನ್ನು M0 ಮತ್ತು M1 ಸ್ಥಾಪಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M2的生产商和经销商是M0和M1创立的吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "Was [Barbary Coast] 's producer and distributor founded by [Mary Pickford] and [Charlie Chaplin]",
    "questionWithBrackets_he": "האם המפיק והמפיץ של [ברברי קוסט] הוקם על ידי [מרי פיקפורד] ו[צ&#39;רלי צ&#39;פלין]",
    "questionWithBrackets_kn": "[ಬಾರ್ಬರಿ ಕೋಸ್ಟ್] ನಿರ್ಮಾಪಕ ಮತ್ತು ವಿತರಕರನ್ನು [ಮೇರಿ ಪಿಕ್‌ಫೋರ್ಡ್] ಮತ್ತು [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಸ್ಥಾಪಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[巴巴里海岸] 的制作人和发行人是由 [玛丽·皮克福德] 和 [查理·卓别林] 创立的吗？",
    "recursionDepth": 25,
    "sparql": "ASK WHERE { wd:Q524849 wdt:P750 ?x0 . wd:Q524849 wdt:P272 ?x0 . ?x0 wdt:P112 wd:Q882 . ?x0 wdt:P112 wd:Q104109 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM2 wdt:P750 ?x0 .\nM2 wdt:P272 ?x0 .\n?x0 wdt:P112 M0 .\n?x0 wdt:P112 M1\n}",
    "id": 77614,
    "split": "gold_test",
    "en": "Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q524849 is Q524849\nwdt:P750 is P750\nwd:Q524849 is Q524849\nwdt:P272 is P272\nwdt:P112 is P112\nwd:Q882 is Q882\nwdt:P112 is P112\nwd:Q104109 is Q104109",
    "masks": [
      {
        "uri": "wd:Q524849",
        "mask": "kg:0856"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:8180"
      },
      {
        "uri": "wd:Q524849",
        "mask": "kg:2817"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4956"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:9362"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:7881"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:8410"
      },
      {
        "uri": "wd:Q104109",
        "mask": "kg:7296"
      }
    ],
    "masked": "Translate the question “Was Barbary Coast 's producer and distributor founded by Mary Pickford and Charlie Chaplin” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2817 is Q524849\nkg:8180 is P750\nkg:2817 is Q524849\nkg:4956 is P272\nkg:8410 is P112\nkg:7881 is Q882\nkg:8410 is P112\nkg:7296 is Q104109"
  },
  {
    "CFQquestionIdx": 108475,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a actor that M2 was influenced by M0 's sibling",
    "questionPatternModEntities_he": "האם היה שחקן ש-M2 הושפע מאחיו של M0",
    "questionPatternModEntities_kn": "M0 ನ ಒಡಹುಟ್ಟಿದವರಿಂದ M2 ಪ್ರಭಾವಿತರಾದ ನಟರೇ",
    "questionPatternModEntities_zh": "M2是受M0兄弟影响的演员吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a actor that [Pearl Jam] was influenced by [Astrid Young] 's sibling",
    "questionWithBrackets_he": "האם שחקן ש[פרל ג&#39;אם] הושפע מאחיו של [אסטריד יאנג]",
    "questionWithBrackets_kn": "[ಆಸ್ಟ್ರಿಡ್ ಯಂಗ್] ಅವರ ಒಡಹುಟ್ಟಿದವರಿಂದ [ಪರ್ಲ್ ಜಾಮ್] ಪ್ರಭಾವಿತರಾದ ನಟರೇ",
    "questionWithBrackets_zh": "[Pearl Jam] 是受[Astrid Young] 弟弟影响的演员吗？",
    "recursionDepth": 25,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q33999 . wd:Q142701 wdt:P737 ?x0 . ?x0 wdt:P3373 wd:Q4811453 . FILTER ( ?x0 != wd:Q4811453 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q33999 .\nM2 wdt:P737 ?x0 .\n?x0 wdt:P3373 M0 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 108475,
    "split": "gold_test",
    "en": "Was a actor that Pearl Jam was influenced by Astrid Young 's sibling",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q142701 is Q142701\nwdt:P737 is P737\nwdt:P3373 is P3373\nwd:Q4811453 is Q4811453\nwd:Q4811453 is Q4811453",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:7006"
      },
      {
        "uri": "wd:Q33999",
        "mask": "kg:5606"
      },
      {
        "uri": "wd:Q142701",
        "mask": "kg:5938"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:9972"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:0538"
      },
      {
        "uri": "wd:Q4811453",
        "mask": "kg:8537"
      },
      {
        "uri": "wd:Q4811453",
        "mask": "kg:1929"
      }
    ],
    "masked": "Translate the question “Was a actor that Pearl Jam was influenced by Astrid Young 's sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7006 is P106\nkg:5606 is Q33999\nkg:5938 is Q142701\nkg:9972 is P737\nkg:0538 is P3373\nkg:1929 is Q4811453\nkg:1929 is Q4811453"
  },
  {
    "CFQquestionIdx": 183833,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was written and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה נכתב ונערך על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರು ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 编写和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was written and edited by [Jens Jørgen Thorsen] , [Ole John] , and [Jørgen Leth]",
    "questionWithBrackets_he": "מה נכתב וערך על ידי [Jens Jørgen Thorsen], [Ole John], ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್], [ಓಲೆ ಜಾನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jens Jørgen Thorsen]、[Ole John] 和 [Jørgen Leth] 撰写和编辑了什么？",
    "recursionDepth": 25,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 183833,
    "split": "gold_test",
    "en": "What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:4834"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7975"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0570"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5892"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4288"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3614"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2568"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7573"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2156"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3255"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3870"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0406"
      }
    ],
    "masked": "Translate the question “What was written and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4288 is P1040\nkg:7573 is Q562108\nkg:4288 is P1040\nkg:3255 is Q1687239\nkg:4288 is P1040\nkg:0406 is Q35979475\nkg:3870 is P58\nkg:7573 is Q562108\nkg:3870 is P58\nkg:3255 is Q1687239\nkg:3870 is P58\nkg:0406 is Q35979475"
  },
  {
    "CFQquestionIdx": 141096,
    "expectedResponse": [
      "Geli Albaladejo"
    ],
    "questionPatternModEntities": "What costume designer of a film was M0 's Spanish sibling",
    "questionPatternModEntities_he": "איזה מעצב תלבושות של סרט היה אחיו הספרדי של M0",
    "questionPatternModEntities_kn": "M0 ರ ಸ್ಪ್ಯಾನಿಷ್ ಒಡಹುಟ್ಟಿದ ಯಾವ ಚಲನಚಿತ್ರದ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು",
    "questionPatternModEntities_zh": "M0的西班牙兄弟是哪部电影的服装设计师？",
    "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "questionWithBrackets": "What costume designer of a film was [Miguel Albaladejo] 's Spanish sibling",
    "questionWithBrackets_he": "איזה מעצב תלבושות של סרט היה אחיו הספרדי של [מיגל אלבלדג&#39;ו]",
    "questionWithBrackets_kn": "[ಮಿಗುಯೆಲ್ ಅಲ್ಬಲಾಡೆಜೊ] ಅವರ ಸ್ಪ್ಯಾನಿಷ್ ಒಡಹುಟ್ಟಿದವರ ಚಲನಚಿತ್ರದ ಯಾವ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರು",
    "questionWithBrackets_zh": "[Miguel Albaladejo] 的西班牙兄弟姐妹是哪部电影的服装设计师？",
    "recursionDepth": 25,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x1 wdt:P2515 ?x0 . ?x0 wdt:P27 wd:Q29 . ?x0 wdt:P3373 wd:Q3083718 . ?x1 wdt:P31 wd:Q11424 . FILTER ( ?x0 != wd:Q3083718 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x1 wdt:P2515 ?x0 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 M0 .\n?x1 wdt:P31 wd:Q11424 .\nFILTER ( ?x0 != M0 )\n}",
    "id": 141096,
    "split": "gold_test",
    "en": "What costume designer of a film was Miguel Albaladejo 's Spanish sibling",
    "results": [
      [
        "wd:Q5876635"
      ]
    ],
    "direct": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P2515 is P2515\nwdt:P27 is P27\nwd:Q29 is Q29\nwdt:P3373 is P3373\nwd:Q3083718 is Q3083718\nwdt:P31 is P31\nwd:Q11424 is Q11424\nwd:Q3083718 is Q3083718",
    "masks": [
      {
        "uri": "wdt:P2515",
        "mask": "kg:2748"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:8099"
      },
      {
        "uri": "wd:Q29",
        "mask": "kg:8721"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:8474"
      },
      {
        "uri": "wd:Q3083718",
        "mask": "kg:0603"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:5014"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:3867"
      },
      {
        "uri": "wd:Q3083718",
        "mask": "kg:5093"
      }
    ],
    "masked": "Translate the question “What costume designer of a film was Miguel Albaladejo 's Spanish sibling” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2748 is P2515\nkg:8099 is P27\nkg:8721 is Q29\nkg:8474 is P3373\nkg:5093 is Q3083718\nkg:5014 is P31\nkg:3867 is Q11424\nkg:5093 is Q3083718"
  },
  {
    "CFQquestionIdx": 109001,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a composer a Swedish female spouse of M3",
    "questionPatternModEntities_he": "האם מלחין הייתה בת זוג שוודית של M3",
    "questionPatternModEntities_kn": "ಸಂಯೋಜಕರು M3 ನ ಸ್ವೀಡಿಷ್ ಸ್ತ್ರೀ ಸಂಗಾತಿಯಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "作曲家是 M3 的瑞典女性配偶吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "Was a composer a Swedish female spouse of [Mattias Järvinen Palme]",
    "questionWithBrackets_he": "האם מלחין היה בן זוג שוודית של [מתיאס ירווין פאלמה]",
    "questionWithBrackets_kn": "ಸಂಯೋಜಕರು [ಮಟ್ಟಿಯಾಸ್ ಜಾರ್ವಿನೆನ್ ಪಾಲ್ಮೆ] ಅವರ ಸ್ವೀಡಿಷ್ ಸ್ತ್ರೀ ಸಂಗಾತಿಯಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "作曲家是 [Mattias Järvinen Palme] 的瑞典女性配偶吗？",
    "recursionDepth": 26,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q36834 . ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P27 wd:Q34 . ?x0 wdt:P26 wd:Q96203723 . FILTER ( ?x0 != wd:Q96203723 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q36834 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 109001,
    "split": "gold_test",
    "en": "Was a composer a Swedish female spouse of Mattias Järvinen Palme",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q36834 is Q36834\nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P27 is P27\nwd:Q34 is Q34\nwdt:P26 is P26\nwd:Q96203723 is Q96203723\nwd:Q96203723 is Q96203723",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:3144"
      },
      {
        "uri": "wd:Q36834",
        "mask": "kg:3259"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:8756"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:8271"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:2252"
      },
      {
        "uri": "wd:Q34",
        "mask": "kg:5568"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0594"
      },
      {
        "uri": "wd:Q96203723",
        "mask": "kg:8607"
      },
      {
        "uri": "wd:Q96203723",
        "mask": "kg:3276"
      }
    ],
    "masked": "Translate the question “Was a composer a Swedish female spouse of Mattias Järvinen Palme” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3144 is P106\nkg:3259 is Q36834\nkg:8756 is P21\nkg:8271 is Q6581072\nkg:2252 is P27\nkg:5568 is Q34\nkg:0594 is P26\nkg:3276 is Q96203723\nkg:3276 is Q96203723"
  },
  {
    "CFQquestionIdx": 65399,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 הופק ונערך על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನಿಂದ M0 ಅನ್ನು ಉತ್ಪಾದಿಸಲಾಗಿದೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1 、 M2 和 M3 制作和编辑的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] produced and edited by [Jens Jørgen Thorsen] , [Ole John] , and [Jørgen Leth]",
    "questionWithBrackets_he": "האם [Stop for Bud] הופק ונערך על ידי [Jens Jørgen Thorsen], [Ole John], ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್], [ಓಲೆ ಜಾನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Jens Jørgen Thorsen]、[Ole John] 和 [Jørgen Leth] 制作和编辑的吗？",
    "recursionDepth": 26,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3\n}",
    "id": 65399,
    "split": "gold_test",
    "en": "Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:6987"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6980"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0472"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:0426"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9704"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7977"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:0439"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8715"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:8544"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:3159"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:4185"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9002"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:3644"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4465"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2146"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7740"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2981"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:5777"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:9246"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7250"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2285"
      }
    ],
    "masked": "Translate the question “Was Stop for Bud produced and edited by Jens Jørgen Thorsen , Ole John , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:8715 is P1040\nkg:2285 is Q35979475\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:3644 is Q562108\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2981 is Q1687239\nkg:5777 is Q20729551\nkg:9246 is P162\nkg:7250 is P272\nkg:2285 is Q35979475"
  },
  {
    "CFQquestionIdx": 154812,
    "expectedResponse": [
      "Cleopatra IV of Egypt",
      "Cleopatra Selene of Egypt and Syria"
    ],
    "questionPatternModEntities": "What female sibling and spouse of M0 did M2 marry",
    "questionPatternModEntities_he": "עם איזה אח ובן זוג של M0 נישאו M2",
    "questionPatternModEntities_kn": "M0 ರ ಯಾವ ಸ್ತ್ರೀ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯು M2 ಅನ್ನು ಮದುವೆಯಾದರು",
    "questionPatternModEntities_zh": "M2 嫁给了 M0 的哪个女性同胞和配偶？",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What female sibling and spouse of [Ptolemy IX Lathyros] did [Antiochus IX Cyzicenus] marry",
    "questionWithBrackets_he": "עם איזה אח ובן זוג של [תלמי התשיעי לתירוס] נישאו [אנטיוכוס התשיעי Cyzicenus]",
    "questionWithBrackets_kn": "[ಪ್ಟೋಲೆಮಿ IX ಲ್ಯಾಥಿರೋಸ್] ಯಾವ ಸ್ತ್ರೀ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯು [ಆಂಟಿಯೋಕಸ್ IX ಸಿಜಿಸೆನಸ್] ವಿವಾಹವಾದರು",
    "questionWithBrackets_zh": "[Antiochus IX Cyzicenus]娶了[托勒密九世拉希罗斯]的哪个兄弟姐妹和配偶？",
    "recursionDepth": 26,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P3373 wd:Q3340 . ?x0 wdt:P26 wd:Q296446 . ?x0 wdt:P26 wd:Q3340 . FILTER ( ?x0 != wd:Q296446 ) . FILTER ( ?x0 != wd:Q3340 ) . FILTER ( ?x0 != wd:Q3340 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 M0 .\n?x0 wdt:P26 M0 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
    "id": 154812,
    "split": "gold_test",
    "en": "What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry",
    "results": [
      [
        "wd:Q40023"
      ],
      [
        "wd:Q40027"
      ]
    ],
    "direct": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q296446 is Q296446\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q296446 is Q296446\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340",
    "masks": [
      {
        "uri": "wdt:P21",
        "mask": "kg:3719"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:5862"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:8252"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:5979"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:6851"
      },
      {
        "uri": "wd:Q296446",
        "mask": "kg:2529"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1012"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:1386"
      },
      {
        "uri": "wd:Q296446",
        "mask": "kg:6160"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:7219"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:1479"
      }
    ],
    "masked": "Translate the question “What female sibling and spouse of Ptolemy IX Lathyros did Antiochus IX Cyzicenus marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3719 is P21\nkg:5862 is Q6581072\nkg:8252 is P3373\nkg:1479 is Q3340\nkg:1012 is P26\nkg:6160 is Q296446\nkg:1012 is P26\nkg:1479 is Q3340\nkg:6160 is Q296446\nkg:1479 is Q3340\nkg:1479 is Q3340"
  },
  {
    "CFQquestionIdx": 185610,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was written by and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה נכתב ונערך על ידי M0 , M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರಿಂದ ಏನು ಬರೆಯಲಾಗಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 编写和编辑的内容是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was written by and edited by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "מה נכתב על ידי ונערך על ידי [Jens Jørgen Thorsen], [Jørgen Leth], ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಏನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 撰写和编辑的内容是什么？",
    "recursionDepth": 26,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 185610,
    "split": "gold_test",
    "en": "What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:9170"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2295"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2120"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9202"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5943"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2063"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8202"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:6763"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2894"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9719"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6908"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:4762"
      }
    ],
    "masked": "Translate the question “What was written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5943 is P1040\nkg:6763 is Q562108\nkg:5943 is P1040\nkg:9719 is Q1687239\nkg:5943 is P1040\nkg:4762 is Q35979475\nkg:6908 is P58\nkg:6763 is Q562108\nkg:6908 is P58\nkg:9719 is Q1687239\nkg:6908 is P58\nkg:4762 is Q35979475"
  },
  {
    "CFQquestionIdx": 79318,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב ונערך על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆಯಲಾಗಿದೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1 、 M2 和 M3 编写和编辑？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] written by and edited by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "האם [Stop for Bud] נכתב על ידי ונערך על ידי [Jens Jørgen Thorsen], [Jørgen Leth], ו-[Ole John]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 编写和编辑的吗？",
    "recursionDepth": 27,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 79318,
    "split": "gold_test",
    "en": "Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8521"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8306"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:9960"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8320"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5032"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:8460"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8237"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6699"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:5356"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:2953"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6011"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7434"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:8509"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3476"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9084"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:6826"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2004"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7959"
      }
    ],
    "masked": "Translate the question “Was Stop for Bud written by and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:6699 is P1040\nkg:7959 is Q35979475\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7434 is Q562108\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:9084 is Q1687239\nkg:6826 is Q20729551\nkg:2004 is P58\nkg:7959 is Q35979475"
  },
  {
    "CFQquestionIdx": 65400,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced by and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 הופק ונערך על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನಿಂದ M0 ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 制作和编辑？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] produced by and edited by [Ole John] , [Jørgen Leth] , and [Jens Jørgen Thorsen]",
    "questionWithBrackets_he": "האם [Stop for Bud] הופק ונערך על ידי [Ole John], [Jørgen Leth], ו-[Jens Jørgen Thorsen]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಓಲೆ ಜಾನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] ಅವರು ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Ole John]、[Jørgen Leth] 和 [Jens Jørgen Thorsen] 制作和编辑的吗？",
    "recursionDepth": 27,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 . wd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3\n}",
    "id": 65400,
    "split": "gold_test",
    "en": "Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4423"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3266"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2045"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:3659"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8598"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4657"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:5932"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1522"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:8156"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:7856"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3968"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6083"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4280"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:7701"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1048"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3643"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0356"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4646"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8791"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8452"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9844"
      }
    ],
    "masked": "Translate the question “Was Stop for Bud produced by and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:1522 is P1040\nkg:9844 is Q35979475\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:4280 is Q562108\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:0356 is Q1687239\nkg:4646 is Q20729551\nkg:8791 is P162\nkg:8452 is P272\nkg:9844 is Q35979475"
  },
  {
    "CFQquestionIdx": 182779,
    "expectedResponse": [
      "The Simpsons"
    ],
    "questionPatternModEntities": "What was produced by and executive produced by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה הופק על ידי והמנהל על ידי M0 , M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ನಿಂದ ಏನು ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 、 M1 和 M2 制作和执行制作的是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was produced by and executive produced by [Sam Simon] , [James L. Brooks] , and [Matt Groening]",
    "questionWithBrackets_he": "מה הופק על ידי והופק על ידי [סם סיימון], [ג&#39;יימס ל. ברוקס] ו[מאט גרונינג]",
    "questionWithBrackets_kn": "[ಸ್ಯಾಮ್ ಸೈಮನ್] , [ಜೇಮ್ಸ್ ಎಲ್. ಬ್ರೂಕ್ಸ್] ಮತ್ತು [ಮ್ಯಾಟ್ ಗ್ರೋನಿಂಗ್] ನಿರ್ಮಿಸಿದ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ಏನು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "由 [Sam Simon]、[James L. Brooks] 和 [Matt Groening] 制作和执行制作的是什么？",
    "recursionDepth": 27,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1431 wd:Q43994 . ?x0 wdt:P1431 wd:Q95125 . ?x0 wdt:P1431 wd:Q365090 . ?x0 wdt:P162|wdt:P272 wd:Q43994 . ?x0 wdt:P162|wdt:P272 wd:Q95125 . ?x0 wdt:P162|wdt:P272 wd:Q365090 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 M0 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P162|wdt:P272 M0 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2\n}",
    "id": 182779,
    "split": "gold_test",
    "en": "What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening",
    "results": [
      [
        "wd:Q886"
      ]
    ],
    "direct": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1431 is P1431\nwd:Q43994 is Q43994\nwdt:P1431 is P1431\nwd:Q95125 is Q95125\nwdt:P1431 is P1431\nwd:Q365090 is Q365090\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q43994 is Q43994\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q95125 is Q95125\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q365090 is Q365090",
    "masks": [
      {
        "uri": "wdt:P1431",
        "mask": "kg:6924"
      },
      {
        "uri": "wd:Q43994",
        "mask": "kg:6105"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2976"
      },
      {
        "uri": "wd:Q95125",
        "mask": "kg:2885"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1033"
      },
      {
        "uri": "wd:Q365090",
        "mask": "kg:1426"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3272"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6684"
      },
      {
        "uri": "wd:Q43994",
        "mask": "kg:0211"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:5021"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3758"
      },
      {
        "uri": "wd:Q95125",
        "mask": "kg:8925"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1348"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0318"
      },
      {
        "uri": "wd:Q365090",
        "mask": "kg:2822"
      }
    ],
    "masked": "Translate the question “What was produced by and executive produced by Sam Simon , James L. Brooks , and Matt Groening” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1033 is P1431\nkg:0211 is Q43994\nkg:1033 is P1431\nkg:8925 is Q95125\nkg:1033 is P1431\nkg:2822 is Q365090\nkg:1348 is P162\nkg:0318 is P272\nkg:0211 is Q43994\nkg:1348 is P162\nkg:0318 is P272\nkg:8925 is Q95125\nkg:1348 is P162\nkg:0318 is P272\nkg:2822 is Q365090"
  },
  {
    "CFQquestionIdx": 154845,
    "expectedResponse": [
      "Cleopatra IV of Egypt",
      "Cleopatra Selene of Egypt and Syria"
    ],
    "questionPatternModEntities": "What female sibling of M0 was M1 's sibling and spouse",
    "questionPatternModEntities_he": "איזה אח של M0 היה אח ובן זוגה של M1",
    "questionPatternModEntities_kn": "M0 ನ ಯಾವ ಮಹಿಳಾ ಒಡಹುಟ್ಟಿದವರು M1 ನ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0 的哪个女性兄弟姐妹是 M1 的兄弟姐妹和配偶？",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "questionWithBrackets": "What female sibling of [Ptolemy X Alexander I] was [Ptolemy IX Lathyros] 's sibling and spouse",
    "questionWithBrackets_he": "איזה אח של [תלמי העשירי אלכסנדר הראשון] היה אחיו ובן זוגו של [תלמי התשיעי לתירוס]",
    "questionWithBrackets_kn": "[ಪ್ಟೋಲೆಮಿ X ಅಲೆಕ್ಸಾಂಡರ್ I] ರ ಯಾವ ಸ್ತ್ರೀ ಒಡಹುಟ್ಟಿದವರು [ಪ್ಟೋಲೆಮಿ IX ಲ್ಯಾಥಿರೋಸ್] ಅವರ ಒಡಹುಟ್ಟಿದವರು ಮತ್ತು ಸಂಗಾತಿಯಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[托勒密 X 亚历山大一世] 的哪个女性兄弟姐妹是 [托勒密 IX 拉西罗斯] 的兄弟姐妹和配偶？",
    "recursionDepth": 27,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P3373 wd:Q3345 . ?x0 wdt:P3373 wd:Q3340 . ?x0 wdt:P26 wd:Q3340 . FILTER ( ?x0 != wd:Q3345 ) . FILTER ( ?x0 != wd:Q3340 ) . FILTER ( ?x0 != wd:Q3340 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 M0 .\n?x0 wdt:P3373 M1 .\n?x0 wdt:P26 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "id": 154845,
    "split": "gold_test",
    "en": "What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse",
    "results": [
      [
        "wd:Q40023"
      ],
      [
        "wd:Q40027"
      ]
    ],
    "direct": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P21 is P21\nwd:Q6581072 is Q6581072\nwdt:P3373 is P3373\nwd:Q3345 is Q3345\nwdt:P3373 is P3373\nwd:Q3340 is Q3340\nwdt:P26 is P26\nwd:Q3340 is Q3340\nwd:Q3345 is Q3345\nwd:Q3340 is Q3340\nwd:Q3340 is Q3340",
    "masks": [
      {
        "uri": "wdt:P21",
        "mask": "kg:8383"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:5838"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:1973"
      },
      {
        "uri": "wd:Q3345",
        "mask": "kg:7961"
      },
      {
        "uri": "wdt:P3373",
        "mask": "kg:7620"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:2036"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0080"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:4462"
      },
      {
        "uri": "wd:Q3345",
        "mask": "kg:3742"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:1245"
      },
      {
        "uri": "wd:Q3340",
        "mask": "kg:4916"
      }
    ],
    "masked": "Translate the question “What female sibling of Ptolemy X Alexander I was Ptolemy IX Lathyros 's sibling and spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8383 is P21\nkg:5838 is Q6581072\nkg:7620 is P3373\nkg:3742 is Q3345\nkg:7620 is P3373\nkg:4916 is Q3340\nkg:0080 is P26\nkg:4916 is Q3340\nkg:3742 is Q3345\nkg:4916 is Q3340\nkg:4916 is Q3340"
  },
  {
    "CFQquestionIdx": 64702,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 produced , directed , and written by M1 and M2",
    "questionPatternModEntities_he": "האם M0 הופק, ביים ונכתב על ידי M1 ו-M2",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ನಿಂದ M0 ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆ, ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1 和 M2 制作、导演和编写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "Was [Breaking Bad] produced , directed , and written by [Vince Gilligan] and [George Mastras]",
    "questionWithBrackets_he": "האם [שובר שורות] הופק, ביים ונכתב על ידי [וינס גיליגן] ו[ג&#39;ורג&#39; מאסטרס]",
    "questionWithBrackets_kn": "[ಬ್ರೇಕಿಂಗ್ ಬ್ಯಾಡ್] ಅನ್ನು [ವಿನ್ಸ್ ಗಿಲ್ಲಿಗನ್] ಮತ್ತು [ಜಾರ್ಜ್ ಮಾಸ್ಟ್ರಾಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Breaking Bad] 是由 [Vince Gilligan] 和 [George Mastras] 制作、导演和编剧的吗？",
    "recursionDepth": 28,
    "sparql": "ASK WHERE { wd:Q1079 wdt:P57 wd:Q4500 . wd:Q1079 wdt:P57 wd:Q5542223 . wd:Q1079 wdt:P162|wdt:P272 wd:Q4500 . wd:Q1079 wdt:P162|wdt:P272 wd:Q5542223 . wd:Q1079 wdt:P58 wd:Q4500 . wd:Q1079 wdt:P58 wd:Q5542223 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2\n}",
    "id": 64702,
    "split": "gold_test",
    "en": "Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5542223 is Q5542223\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwd:Q1079 is Q1079\nwdt:P58 is P58\nwd:Q5542223 is Q5542223",
    "masks": [
      {
        "uri": "wd:Q1079",
        "mask": "kg:1503"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6843"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:1986"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:6999"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5045"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:8332"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:4657"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2544"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8941"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:2934"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:6059"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0037"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7159"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:1922"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:6009"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9026"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:6250"
      },
      {
        "uri": "wd:Q1079",
        "mask": "kg:8022"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3585"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:3033"
      }
    ],
    "masked": "Translate the question “Was Breaking Bad produced , directed , and written by Vince Gilligan and George Mastras” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8022 is Q1079\nkg:5045 is P57\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:5045 is P57\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:0037 is P162\nkg:7159 is P272\nkg:3033 is Q5542223\nkg:8022 is Q1079\nkg:3585 is P58\nkg:6250 is Q4500\nkg:8022 is Q1079\nkg:3585 is P58\nkg:3033 is Q5542223"
  },
  {
    "CFQquestionIdx": 94090,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a costume designer a star and editor of M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מעצב תלבושות היה כוכב ועורך של M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ ಒಬ್ಬ ಸ್ಟಾರ್ ಮತ್ತು M1 , M2 , ಮತ್ತು M3 ನ ಸಂಪಾದಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "服装设计师是M1、M2、M3的明星和编辑吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a costume designer a star and editor of [Tom at the Farm] , [Heartbeats] , and [Laurence Anyways]",
    "questionWithBrackets_he": "האם מעצב תלבושות היה כוכב ועורך של [טום בחווה], [פעימות לב] ו[לורנס בכל מקרה]",
    "questionWithBrackets_kn": "ಕಾಸ್ಟ್ಯೂಮ್ ಡಿಸೈನರ್ [ಟಾಮ್ ಅಟ್ ದಿ ಫಾರ್ಮ್] , [ಹಾರ್ಟ್ ಬೀಟ್ಸ್] ಮತ್ತು [ಲಾರೆನ್ಸ್ ಎನಿವೇಸ್] ನ ಸ್ಟಾರ್ ಮತ್ತು ಸಂಪಾದಕರಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "服装设计师是[农场里的汤姆]、[心跳]和[无论如何劳伦斯]的明星和编辑吗？",
    "recursionDepth": 28,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q1323191 . wd:Q2336453 wdt:P161 ?x0 . wd:Q2615443 wdt:P161 ?x0 . wd:Q3530946 wdt:P161 ?x0 . wd:Q2336453 wdt:P1040 ?x0 . wd:Q2615443 wdt:P1040 ?x0 . wd:Q3530946 wdt:P1040 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q1323191 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0\n}",
    "id": 94090,
    "split": "gold_test",
    "en": "Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q2336453 is Q2336453\nwdt:P161 is P161\nwd:Q2615443 is Q2615443\nwdt:P161 is P161\nwd:Q3530946 is Q3530946\nwdt:P161 is P161\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2303"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:0094"
      },
      {
        "uri": "wd:Q2336453",
        "mask": "kg:6234"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:5728"
      },
      {
        "uri": "wd:Q2615443",
        "mask": "kg:1165"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8538"
      },
      {
        "uri": "wd:Q3530946",
        "mask": "kg:3637"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2244"
      },
      {
        "uri": "wd:Q2336453",
        "mask": "kg:2932"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7013"
      },
      {
        "uri": "wd:Q2615443",
        "mask": "kg:2954"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2688"
      },
      {
        "uri": "wd:Q3530946",
        "mask": "kg:9009"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1467"
      }
    ],
    "masked": "Translate the question “Was a costume designer a star and editor of Tom at the Farm , Heartbeats , and Laurence Anyways” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2303 is P106\nkg:0094 is Q1323191\nkg:2932 is Q2336453\nkg:2244 is P161\nkg:2954 is Q2615443\nkg:2244 is P161\nkg:9009 is Q3530946\nkg:2244 is P161\nkg:2932 is Q2336453\nkg:1467 is P1040\nkg:2954 is Q2615443\nkg:1467 is P1040\nkg:9009 is Q3530946\nkg:1467 is P1040"
  },
  {
    "CFQquestionIdx": 234100,
    "expectedResponse": [
      "Charlie Chaplin"
    ],
    "questionPatternModEntities": "Who was a editor and star of M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "מי היה עורך וכוכב של M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆ ಯಾರು",
    "questionPatternModEntities_zh": "谁是 M1 、 M2 、 M3 和 M4 的编辑和明星？",
    "questionTemplate": "Who was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Who was a editor and star of [In the Park] , [Shanghaied] , [Modern Times] , and [The Professor]",
    "questionWithBrackets_he": "מי היה עורך וכוכב של [בפארק], [שנגחאיד], [זמנים מודרניים] ו[הפרופסור]",
    "questionWithBrackets_kn": "[ಇನ್ ದಿ ಪಾರ್ಕ್] , [ಶಾಂಘೈಡ್] , [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] ಮತ್ತು [ದಿ ಪ್ರೊಫೆಸರ್] ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆ ಯಾರು",
    "questionWithBrackets_zh": "谁是[公园里]、[上海人]、[摩登时代]和[教授]的编辑和明星？",
    "recursionDepth": 28,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q5 . wd:Q2718259 wdt:P161 ?x0 . wd:Q658822 wdt:P161 ?x0 . wd:Q45602 wdt:P161 ?x0 . wd:Q921678 wdt:P161 ?x0 . wd:Q2718259 wdt:P1040 ?x0 . wd:Q658822 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q921678 wdt:P1040 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q5 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM4 wdt:P161 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0\n}",
    "id": 234100,
    "split": "gold_test",
    "en": "Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor",
    "results": [
      [
        "wd:Q882"
      ]
    ],
    "direct": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q2718259 is Q2718259\nwdt:P161 is P161\nwd:Q658822 is Q658822\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q921678 is Q921678\nwdt:P161 is P161\nwd:Q2718259 is Q2718259\nwdt:P1040 is P1040\nwd:Q658822 is Q658822\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q921678 is Q921678\nwdt:P1040 is P1040",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:7262"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:7402"
      },
      {
        "uri": "wd:Q2718259",
        "mask": "kg:2170"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4620"
      },
      {
        "uri": "wd:Q658822",
        "mask": "kg:0266"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6842"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:9151"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9003"
      },
      {
        "uri": "wd:Q921678",
        "mask": "kg:9461"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3901"
      },
      {
        "uri": "wd:Q2718259",
        "mask": "kg:7746"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7603"
      },
      {
        "uri": "wd:Q658822",
        "mask": "kg:6275"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5324"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:4400"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9878"
      },
      {
        "uri": "wd:Q921678",
        "mask": "kg:6696"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8586"
      }
    ],
    "masked": "Translate the question “Who was a editor and star of In the Park , Shanghaied , Modern Times , and The Professor” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7262 is P31\nkg:7402 is Q5\nkg:7746 is Q2718259\nkg:3901 is P161\nkg:6275 is Q658822\nkg:3901 is P161\nkg:4400 is Q45602\nkg:3901 is P161\nkg:6696 is Q921678\nkg:3901 is P161\nkg:7746 is Q2718259\nkg:8586 is P1040\nkg:6275 is Q658822\nkg:8586 is P1040\nkg:4400 is Q45602\nkg:8586 is P1040\nkg:6696 is Q921678\nkg:8586 is P1040"
  },
  {
    "CFQquestionIdx": 142840,
    "expectedResponse": [
      "V/H/S/2"
    ],
    "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit and direct",
    "questionPatternModEntities_he": "מה ערכו והכוונו M0, M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ಏನು ಸಂಪಾದಿಸಿವೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿವೆ",
    "questionPatternModEntities_zh": "M0 、 M1 、 M2 和 M3 编辑和指导了什么？",
    "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "questionWithBrackets": "What did [Eduardo Sánchez] , [Gareth Evans] , [Jason Eisener] , and [Adam Wingard] edit and direct",
    "questionWithBrackets_he": "מה ערכו ובימו [אדוארדו סאנצ&#39;ז], [גארת&#39; אוונס], [ג&#39;ייסון אייזנר] ו[אדם וינגארד]",
    "questionWithBrackets_kn": "[ಎಡ್ವರ್ಡೊ ಸ್ಯಾಂಚೆಜ್] , [ಗ್ಯಾರೆತ್ ಇವಾನ್ಸ್] , [ಜೇಸನ್ ಐಸೆನರ್] ಮತ್ತು [ಆಡಮ್ ವಿಂಗಾರ್ಡ್] ಏನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Eduardo Sánchez]、[Gareth Evans]、[Jason Eisener] 和 [Adam Wingard] 编辑和导演了什么？",
    "recursionDepth": 28,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q1291210 . ?x0 wdt:P57 wd:Q16198328 . ?x0 wdt:P57 wd:Q4207234 . ?x0 wdt:P57 wd:Q4679987 . ?x0 wdt:P1040 wd:Q1291210 . ?x0 wdt:P1040 wd:Q16198328 . ?x0 wdt:P1040 wd:Q4207234 . ?x0 wdt:P1040 wd:Q4679987 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3\n}",
    "id": 142840,
    "split": "gold_test",
    "en": "What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct",
    "results": [
      [
        "wd:Q7906333"
      ]
    ],
    "direct": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q1291210 is Q1291210\nwdt:P57 is P57\nwd:Q16198328 is Q16198328\nwdt:P57 is P57\nwd:Q4207234 is Q4207234\nwdt:P57 is P57\nwd:Q4679987 is Q4679987\nwdt:P1040 is P1040\nwd:Q1291210 is Q1291210\nwdt:P1040 is P1040\nwd:Q16198328 is Q16198328\nwdt:P1040 is P1040\nwd:Q4207234 is Q4207234\nwdt:P1040 is P1040\nwd:Q4679987 is Q4679987",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:8450"
      },
      {
        "uri": "wd:Q1291210",
        "mask": "kg:8936"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8017"
      },
      {
        "uri": "wd:Q16198328",
        "mask": "kg:5733"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7999"
      },
      {
        "uri": "wd:Q4207234",
        "mask": "kg:7533"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1842"
      },
      {
        "uri": "wd:Q4679987",
        "mask": "kg:9927"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9107"
      },
      {
        "uri": "wd:Q1291210",
        "mask": "kg:3767"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8352"
      },
      {
        "uri": "wd:Q16198328",
        "mask": "kg:1625"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2281"
      },
      {
        "uri": "wd:Q4207234",
        "mask": "kg:0187"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6722"
      },
      {
        "uri": "wd:Q4679987",
        "mask": "kg:5240"
      }
    ],
    "masked": "Translate the question “What did Eduardo Sánchez , Gareth Evans , Jason Eisener , and Adam Wingard edit and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1842 is P57\nkg:3767 is Q1291210\nkg:1842 is P57\nkg:1625 is Q16198328\nkg:1842 is P57\nkg:0187 is Q4207234\nkg:1842 is P57\nkg:5240 is Q4679987\nkg:6722 is P1040\nkg:3767 is Q1291210\nkg:6722 is P1040\nkg:1625 is Q16198328\nkg:6722 is P1040\nkg:0187 is Q4207234\nkg:6722 is P1040\nkg:5240 is Q4679987"
  },
  {
    "CFQquestionIdx": 78933,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 directed and written by M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם M0 ביים ונכתב על ידי M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ಅವರಿಂದ M0 ಅನ್ನು ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1 、 M2 、 M3 和 M4 导演和编写的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Four Rooms] directed and written by [Alexandre Rockwell] , [Quentin Tarantino] , [Allison Anders] , and [Robert Rodriguez]",
    "questionWithBrackets_he": "האם [ארבעה חדרים] ביים ונכתב על ידי [אלכסנדר רוקוול], [קוונטין טרנטינו], [אליסון אנדרס] ו[רוברט רודריגז]",
    "questionWithBrackets_kn": "[ನಾಲ್ಕು ಕೋಣೆಗಳು] [ಅಲೆಕ್ಸಾಂಡ್ರೆ ರಾಕ್‌ವೆಲ್] , [ಕ್ವೆಂಟಿನ್ ಟ್ಯಾರಂಟಿನೋ] , [ಆಲಿಸನ್ ಆಂಡರ್ಸ್] ಮತ್ತು [ರಾಬರ್ಟ್ ರೋಡ್ರಿಗಸ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "《四个房间》是由[亚历山大·洛克威尔]、[昆汀·塔伦蒂诺]、[艾莉森·安德斯]和[罗伯特·罗德里格斯]导演和编剧的吗？",
    "recursionDepth": 29,
    "sparql": "ASK WHERE { wd:Q1137372 wdt:P57 wd:Q3772 . wd:Q1137372 wdt:P57 wd:Q47284 . wd:Q1137372 wdt:P57 wd:Q549956 . wd:Q1137372 wdt:P57 wd:Q2838329 . wd:Q1137372 wdt:P58 wd:Q3772 . wd:Q1137372 wdt:P58 wd:Q47284 . wd:Q1137372 wdt:P58 wd:Q549956 . wd:Q1137372 wdt:P58 wd:Q2838329 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P57 M4 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3 .\nM0 wdt:P58 M4\n}",
    "id": 78933,
    "split": "gold_test",
    "en": "Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P57 is P57\nwd:Q2838329 is Q2838329\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q549956 is Q549956\nwd:Q1137372 is Q1137372\nwdt:P58 is P58\nwd:Q2838329 is Q2838329",
    "masks": [
      {
        "uri": "wd:Q1137372",
        "mask": "kg:1083"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1020"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:9128"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:7381"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0067"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:2598"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:0497"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8489"
      },
      {
        "uri": "wd:Q549956",
        "mask": "kg:1151"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:0494"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8582"
      },
      {
        "uri": "wd:Q2838329",
        "mask": "kg:1627"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:5169"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3658"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:9444"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:1280"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8267"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:6367"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:8815"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7069"
      },
      {
        "uri": "wd:Q549956",
        "mask": "kg:8076"
      },
      {
        "uri": "wd:Q1137372",
        "mask": "kg:8800"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2845"
      },
      {
        "uri": "wd:Q2838329",
        "mask": "kg:2370"
      }
    ],
    "masked": "Translate the question “Was Four Rooms directed and written by Alexandre Rockwell , Quentin Tarantino , Allison Anders , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8800 is Q1137372\nkg:8582 is P57\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:8582 is P57\nkg:2370 is Q2838329\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:9444 is Q3772\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:6367 is Q47284\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:8076 is Q549956\nkg:8800 is Q1137372\nkg:2845 is P58\nkg:2370 is Q2838329"
  },
  {
    "CFQquestionIdx": 64683,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 directed and produced by M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם M0 ביים והופק על ידי M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ನಿಂದ M0 ಅನ್ನು ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1、M2、M3 和 M4 导演和制作的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Super Rhino] directed and produced by [Susie Essman] , [Malcolm McDowell] , [Clark Spencer] , and [Miley Cyrus]",
    "questionWithBrackets_he": "האם [Super Rhino] ביימה והופקה על ידי [סוזי אסמן], [מלקולם מקדואל], [קלארק ספנסר] ו[מיילי סיירוס]",
    "questionWithBrackets_kn": "[ಸೂಪರ್ ರೈನೋ] ಅನ್ನು [ಸೂಸಿ ಎಸ್ಸ್‌ಮನ್] , [ಮಾಲ್ಕಮ್ ಮೆಕ್‌ಡೊವೆಲ್] , [ಕ್ಲಾರ್ಕ್ ಸ್ಪೆನ್ಸರ್] ಮತ್ತು [ಮೈಲಿ ಸೈರಸ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[超级犀牛] 是由 [苏茜·埃斯曼]、[马尔科姆·麦克道威尔]、[克拉克·斯宾塞] 和 [麦莉·赛勒斯] 执导和制作的吗？",
    "recursionDepth": 29,
    "sparql": "ASK WHERE { wd:Q3977597 wdt:P57 wd:Q4235 . wd:Q3977597 wdt:P57 wd:Q40220 . wd:Q3977597 wdt:P57 wd:Q117392 . wd:Q3977597 wdt:P57 wd:Q5127380 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q4235 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q40220 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q117392 . wd:Q3977597 wdt:P162|wdt:P272 wd:Q5127380 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P57 M4 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3 .\nM0 wdt:P162|wdt:P272 M4\n}",
    "id": 64683,
    "split": "gold_test",
    "en": "Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P57 is P57\nwd:Q5127380 is Q5127380\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4235 is Q4235\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q40220 is Q40220\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q117392 is Q117392\nwd:Q3977597 is Q3977597\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q5127380 is Q5127380",
    "masks": [
      {
        "uri": "wd:Q3977597",
        "mask": "kg:6391"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0983"
      },
      {
        "uri": "wd:Q4235",
        "mask": "kg:0376"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:3293"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1326"
      },
      {
        "uri": "wd:Q40220",
        "mask": "kg:4297"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:9964"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0726"
      },
      {
        "uri": "wd:Q117392",
        "mask": "kg:1893"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:2499"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4947"
      },
      {
        "uri": "wd:Q5127380",
        "mask": "kg:6974"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:4198"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:6915"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9577"
      },
      {
        "uri": "wd:Q4235",
        "mask": "kg:7140"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:2420"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:6773"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2454"
      },
      {
        "uri": "wd:Q40220",
        "mask": "kg:7519"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:6246"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2300"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:1792"
      },
      {
        "uri": "wd:Q117392",
        "mask": "kg:0436"
      },
      {
        "uri": "wd:Q3977597",
        "mask": "kg:9597"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:4827"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7598"
      },
      {
        "uri": "wd:Q5127380",
        "mask": "kg:6489"
      }
    ],
    "masked": "Translate the question “Was Super Rhino directed and produced by Susie Essman , Malcolm McDowell , Clark Spencer , and Miley Cyrus” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4947 is P57\nkg:6489 is Q5127380\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7140 is Q4235\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:7519 is Q40220\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:0436 is Q117392\nkg:9597 is Q3977597\nkg:4827 is P162\nkg:7598 is P272\nkg:6489 is Q5127380"
  },
  {
    "CFQquestionIdx": 186596,
    "expectedResponse": [
      "Star Wars: Episode IV – A New Hope"
    ],
    "questionPatternModEntities": "What was written , executive produced , produced , and edited by M0",
    "questionPatternModEntities_he": "מה נכתב, הפיק, הפיק ונערך על ידי M0",
    "questionPatternModEntities_kn": "M0 ನಿಂದ ಏನು ಬರೆಯಲಾಗಿದೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಲಾಗಿದೆ, ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 编写、执行制作、制作和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What was written , executive produced , produced , and edited by [George Lucas]",
    "questionWithBrackets_he": "מה נכתב, הפיק, הפיק ונערך על ידי [ג&#39;ורג&#39; לוקאס]",
    "questionWithBrackets_kn": "[ಜಾರ್ಜ್ ಲ್ಯೂಕಾಸ್] ಏನು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[乔治·卢卡斯] 编写、执行制作、制作和编辑了什么？",
    "recursionDepth": 29,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P1040 wd:Q38222 . ?x0 wdt:P1431 wd:Q38222 . ?x0 wdt:P162|wdt:P272 wd:Q38222 . ?x0 wdt:P58 wd:Q38222 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1431 M0 .\n?x0 wdt:P162|wdt:P272 M0 .\n?x0 wdt:P58 M0\n}",
    "id": 186596,
    "split": "gold_test",
    "en": "What was written , executive produced , produced , and edited by George Lucas",
    "results": [
      [
        "wd:Q17738"
      ]
    ],
    "direct": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P1040 is P1040\nwd:Q38222 is Q38222\nwdt:P1431 is P1431\nwd:Q38222 is Q38222\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q38222 is Q38222\nwdt:P58 is P58\nwd:Q38222 is Q38222",
    "masks": [
      {
        "uri": "wdt:P1040",
        "mask": "kg:2686"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:6841"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2961"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:4004"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:7271"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2977"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:9047"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3833"
      },
      {
        "uri": "wd:Q38222",
        "mask": "kg:4247"
      }
    ],
    "masked": "Translate the question “What was written , executive produced , produced , and edited by George Lucas” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2686 is P1040\nkg:4247 is Q38222\nkg:2961 is P1431\nkg:4247 is Q38222\nkg:7271 is P162\nkg:2977 is P272\nkg:4247 is Q38222\nkg:3833 is P58\nkg:4247 is Q38222"
  },
  {
    "CFQquestionIdx": 186761,
    "expectedResponse": [
      "Jean-Luc Godard"
    ],
    "questionPatternModEntities": "What writer and editor of M0 , M1 , and M2 was employed by M3",
    "questionPatternModEntities_he": "איזה סופר ועורך של M0, M1 ו-M2 הועסק ב-M3",
    "questionPatternModEntities_kn": "M0, M1 ಮತ್ತು M2 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರನ್ನು M3 ನೇಮಿಸಿಕೊಂಡಿದೆ",
    "questionPatternModEntities_zh": "M3 聘请了 M0、M1 和 M2 的哪位作家和编辑？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "What writer and editor of [Every Man for Himself] , [Passion] , and [Notre musique] was employed by [Cahiers du cinéma]",
    "questionWithBrackets_he": "איזה סופר ועורך של [כל איש לעצמו], [תשוקה] ו-[נוטר מוזיקלי] הועסק על ידי [Chiers du cinéma]",
    "questionWithBrackets_kn": "[ಎವೆರಿ ಮ್ಯಾನ್ ಫಾರ್ ಹಿಮ್ಸೆಲ್ಫ್] , [ಪ್ಯಾಶನ್] ಮತ್ತು [ನೋಟ್ರೆ ಮ್ಯೂಸಿಕ್] ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರನ್ನು [ಕಾಹಿಯರ್ಸ್ ಡು ಸಿನಿಮಾ] ನೇಮಿಸಿಕೊಂಡರು",
    "questionWithBrackets_zh": "[电影手册] 雇用了[每个人都为自己]、[激情] 和[巴黎音乐] 的哪位作家和编辑？",
    "recursionDepth": 29,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q972787 wdt:P1040 ?x0 . wd:Q672061 wdt:P1040 ?x0 . wd:Q3141131 wdt:P1040 ?x0 . wd:Q972787 wdt:P58 ?x0 . wd:Q672061 wdt:P58 ?x0 . wd:Q3141131 wdt:P58 ?x0 . ?x0 wdt:P108 wd:Q909176 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P108 M3\n}",
    "id": 186761,
    "split": "gold_test",
    "en": "What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma",
    "results": [
      [
        "wd:Q53001"
      ]
    ],
    "direct": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q972787 is Q972787\nwdt:P1040 is P1040\nwd:Q672061 is Q672061\nwdt:P1040 is P1040\nwd:Q3141131 is Q3141131\nwdt:P1040 is P1040\nwd:Q972787 is Q972787\nwdt:P58 is P58\nwd:Q672061 is Q672061\nwdt:P58 is P58\nwd:Q3141131 is Q3141131\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q909176 is Q909176",
    "masks": [
      {
        "uri": "wd:Q972787",
        "mask": "kg:2181"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0533"
      },
      {
        "uri": "wd:Q672061",
        "mask": "kg:7367"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3877"
      },
      {
        "uri": "wd:Q3141131",
        "mask": "kg:9650"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5020"
      },
      {
        "uri": "wd:Q972787",
        "mask": "kg:5091"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9645"
      },
      {
        "uri": "wd:Q672061",
        "mask": "kg:1090"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0308"
      },
      {
        "uri": "wd:Q3141131",
        "mask": "kg:7506"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3129"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:8835"
      },
      {
        "uri": "wd:Q909176",
        "mask": "kg:6665"
      }
    ],
    "masked": "Translate the question “What writer and editor of Every Man for Himself , Passion , and Notre musique was employed by Cahiers du cinéma” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5091 is Q972787\nkg:5020 is P1040\nkg:1090 is Q672061\nkg:5020 is P1040\nkg:7506 is Q3141131\nkg:5020 is P1040\nkg:5091 is Q972787\nkg:3129 is P58\nkg:1090 is Q672061\nkg:3129 is P58\nkg:7506 is Q3141131\nkg:3129 is P58\nkg:8835 is P108\nkg:6665 is Q909176"
  },
  {
    "CFQquestionIdx": 47432,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 executive produced and produced by M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם M0 executive הופק והופק על ידי M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಅನ್ನು M1, M2, M3 ಮತ್ತು M4 ನಿಂದ ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0执行器是M1、M2、M3、M4出品吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Laws of Attraction] executive produced and produced by [Bob Yari] , [Pierce Brosnan] , [Toby Emmerich] , and [Elie Samaha]",
    "questionWithBrackets_he": "האם [חוקי המשיכה] הופק והופק על ידי [בוב יארי], [פירס ברוסנן], [טובי אמריך] ו[אלי סמאהה]",
    "questionWithBrackets_kn": "[ಬಾಬ್ ಯಾರಿ] , [ಪಿಯರ್ಸ್ ಬ್ರಾನ್ಸನ್] , [ಟೋಬಿ ಎಮ್ಮೆರಿಚ್] , ಮತ್ತು [ಎಲೀ ಸಮಾಹಾ] ಅವರಿಂದ [ಲಾಸ್ ಆಫ್ ಅಟ್ರಾಕ್ಷನ್] ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು ನಿರ್ಮಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "《吸引力法则》的执行官是由[鲍勃·亚里]、[皮尔斯·布鲁斯南]、[托比·艾默里奇]和[埃利·萨马哈]制作和制作的吗？",
    "recursionDepth": 30,
    "sparql": "ASK WHERE { wd:Q819109 wdt:P1431 wd:Q1295611 . wd:Q819109 wdt:P1431 wd:Q81520 . wd:Q819109 wdt:P1431 wd:Q381545 . wd:Q819109 wdt:P1431 wd:Q1969128 . wd:Q819109 wdt:P162|wdt:P272 wd:Q1295611 . wd:Q819109 wdt:P162|wdt:P272 wd:Q81520 . wd:Q819109 wdt:P162|wdt:P272 wd:Q381545 . wd:Q819109 wdt:P162|wdt:P272 wd:Q1969128 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1431 M1 .\nM0 wdt:P1431 M2 .\nM0 wdt:P1431 M3 .\nM0 wdt:P1431 M4 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P162|wdt:P272 M2 .\nM0 wdt:P162|wdt:P272 M3 .\nM0 wdt:P162|wdt:P272 M4\n}",
    "id": 47432,
    "split": "gold_test",
    "en": "Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P1431 is P1431\nwd:Q1969128 is Q1969128\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1295611 is Q1295611\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q81520 is Q81520\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q381545 is Q381545\nwd:Q819109 is Q819109\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1969128 is Q1969128",
    "masks": [
      {
        "uri": "wd:Q819109",
        "mask": "kg:4596"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0393"
      },
      {
        "uri": "wd:Q1295611",
        "mask": "kg:6431"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:7228"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0504"
      },
      {
        "uri": "wd:Q81520",
        "mask": "kg:9824"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:3618"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5467"
      },
      {
        "uri": "wd:Q381545",
        "mask": "kg:6366"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:8728"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3418"
      },
      {
        "uri": "wd:Q1969128",
        "mask": "kg:2916"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:0191"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0302"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:8121"
      },
      {
        "uri": "wd:Q1295611",
        "mask": "kg:2180"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:3895"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2202"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0983"
      },
      {
        "uri": "wd:Q81520",
        "mask": "kg:5787"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:3274"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2855"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4547"
      },
      {
        "uri": "wd:Q381545",
        "mask": "kg:6364"
      },
      {
        "uri": "wd:Q819109",
        "mask": "kg:6811"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:2384"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:3566"
      },
      {
        "uri": "wd:Q1969128",
        "mask": "kg:1759"
      }
    ],
    "masked": "Translate the question “Was Laws of Attraction executive produced and produced by Bob Yari , Pierce Brosnan , Toby Emmerich , and Elie Samaha” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6811 is Q819109\nkg:3418 is P1431\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:3418 is P1431\nkg:1759 is Q1969128\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:2180 is Q1295611\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:5787 is Q81520\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:6364 is Q381545\nkg:6811 is Q819109\nkg:2384 is P162\nkg:3566 is P272\nkg:1759 is Q1969128"
  },
  {
    "CFQquestionIdx": 64315,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 edited , executive produced , produced , and written by M1",
    "questionPatternModEntities_he": "האם M0 נערך, הופק, הופק ונכתב על ידי M1",
    "questionPatternModEntities_kn": "M0 ಅನ್ನು ಎಡಿಟ್ ಮಾಡಲಾಗಿದೆಯೇ , ಎಕ್ಸಿಕ್ಯೂಟಿವ್ ಅನ್ನು ನಿರ್ಮಿಸಲಾಗಿದೆ , ನಿರ್ಮಿಸಲಾಗಿದೆ ಮತ್ತು M1 ನಿಂದ ಬರೆಯಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1 编辑、执行制作、制作和编写？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was [Kagemusha] edited , executive produced , produced , and written by [Akira Kurosawa]",
    "questionWithBrackets_he": "האם [Kagemusha] נערך, הופק, הופק ונכתב על ידי [Akira Kurosawa]",
    "questionWithBrackets_kn": "[Kagemusha] ಸಂಪಾದಿಸಲಾಗಿದೆ , ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಣ , ನಿರ್ಮಾಣ , ಮತ್ತು ಬರೆದವರು [ಅಕಿರಾ ಕುರೊಸಾವಾ]",
    "questionWithBrackets_zh": "[影武者]是由[黑泽明]编辑、执行制作、制作和编写的吗？",
    "recursionDepth": 30,
    "sparql": "ASK WHERE { wd:Q854990 wdt:P1040 wd:Q8006 . wd:Q854990 wdt:P1431 wd:Q8006 . wd:Q854990 wdt:P162|wdt:P272 wd:Q8006 . wd:Q854990 wdt:P58 wd:Q8006 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 M1 .\nM0 wdt:P1431 M1 .\nM0 wdt:P162|wdt:P272 M1 .\nM0 wdt:P58 M1\n}",
    "id": 64315,
    "split": "gold_test",
    "en": "Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q854990 is Q854990\nwdt:P1040 is P1040\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P1431 is P1431\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q8006 is Q8006\nwd:Q854990 is Q854990\nwdt:P58 is P58\nwd:Q8006 is Q8006",
    "masks": [
      {
        "uri": "wd:Q854990",
        "mask": "kg:6752"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0687"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:3569"
      },
      {
        "uri": "wd:Q854990",
        "mask": "kg:9467"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1512"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:5237"
      },
      {
        "uri": "wd:Q854990",
        "mask": "kg:7131"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3256"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7529"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:4284"
      },
      {
        "uri": "wd:Q854990",
        "mask": "kg:4528"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5101"
      },
      {
        "uri": "wd:Q8006",
        "mask": "kg:5037"
      }
    ],
    "masked": "Translate the question “Was Kagemusha edited , executive produced , produced , and written by Akira Kurosawa” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4528 is Q854990\nkg:0687 is P1040\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:1512 is P1431\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:3256 is P162\nkg:7529 is P272\nkg:5037 is Q8006\nkg:4528 is Q854990\nkg:5101 is P58\nkg:5037 is Q8006"
  },
  {
    "CFQquestionIdx": 171827,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was directed , edited , and written by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה ביים, ערך ונכתב על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 导演、编辑和编写了什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed , edited , and written by [Jørgen Leth] , [Jens Jørgen Thorsen] , and [Ole John]",
    "questionWithBrackets_he": "מה ביים, נערך ונכתב על ידי [Jørgen Leth], [Jens Jørgen Thorsen], ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೋರ್ಗೆನ್ ಲೆತ್], [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jørgen Leth]、[Jens Jørgen Thorsen] 和 [Ole John] 导演、编辑和编写了什么？",
    "recursionDepth": 30,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 171827,
    "split": "gold_test",
    "en": "What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:7529"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8172"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9316"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5895"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0502"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1669"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9692"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0163"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4472"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2745"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7161"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2455"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7024"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:3211"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5699"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1867"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6436"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1654"
      }
    ],
    "masked": "Translate the question “What was directed , edited , and written by Jørgen Leth , Jens Jørgen Thorsen , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0502 is P57\nkg:3211 is Q562108\nkg:0502 is P57\nkg:1867 is Q1687239\nkg:0502 is P57\nkg:1654 is Q35979475\nkg:7161 is P1040\nkg:3211 is Q562108\nkg:7161 is P1040\nkg:1867 is Q1687239\nkg:7161 is P1040\nkg:1654 is Q35979475\nkg:6436 is P58\nkg:3211 is Q562108\nkg:6436 is P58\nkg:1867 is Q1687239\nkg:6436 is P58\nkg:1654 is Q35979475"
  },
  {
    "CFQquestionIdx": 172052,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was directed , written , and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה ביים, נכתב ונערך על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 导演、编写和编辑了什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed , written , and edited by [Ole John] , [Jørgen Leth] , and [Jens Jørgen Thorsen]",
    "questionWithBrackets_he": "מה ביים, כתב וערך [אול ג&#39;ון], [יורגן לט] ו[ג&#39;נס יורגן תורסן]",
    "questionWithBrackets_kn": "[ಓಲೆ ಜಾನ್], [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್] ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Ole John]、[Jørgen Leth] 和 [Jens Jørgen Thorsen] 导演、编剧和编辑了什么？",
    "recursionDepth": 30,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 172052,
    "split": "gold_test",
    "en": "What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:9121"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:9205"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7034"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:8873"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3265"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:6718"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8164"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0245"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3207"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1834"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4666"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2239"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0702"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4591"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8420"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7394"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5048"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2292"
      }
    ],
    "masked": "Translate the question “What was directed , written , and edited by Ole John , Jørgen Leth , and Jens Jørgen Thorsen” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3265 is P57\nkg:4591 is Q562108\nkg:3265 is P57\nkg:7394 is Q1687239\nkg:3265 is P57\nkg:2292 is Q35979475\nkg:4666 is P1040\nkg:4591 is Q562108\nkg:4666 is P1040\nkg:7394 is Q1687239\nkg:4666 is P1040\nkg:2292 is Q35979475\nkg:5048 is P58\nkg:4591 is Q562108\nkg:5048 is P58\nkg:7394 is Q1687239\nkg:5048 is P58\nkg:2292 is Q35979475"
  },
  {
    "CFQquestionIdx": 92507,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer and director of M1 , M2 , M3 , and M4 a film producer",
    "questionPatternModEntities_he": "האם צלם קולנוע ובמאי של M1, M2, M3 ו-M4 היה מפיק סרטים",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರೇ",
    "questionPatternModEntities_zh": "M1、M2、M3和M4的摄影师和导演是电影制片人吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] a [NP_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer and director of [The Whip and the Body] , [Hatchet for the Honeymoon] , [Danger: Diabolik] , and [Black Sunday] a film producer",
    "questionWithBrackets_he": "האם צלם קולנוע ובמאי של [השוט והגוף], [גרזן לירח הדבש], [סכנה: דיאבוליק] ו[יום ראשון השחור] היה מפיק סרטים",
    "questionWithBrackets_kn": "[ದಿ ವಿಪ್ ಅಂಡ್ ದಿ ಬಾಡಿ] , [ಹ್ಯಾಚೆಟ್ ಫಾರ್ ದಿ ಹನಿಮೂನ್] , [ಡೇಂಜರ್: ಡಯಾಬೊಲಿಕ್] , ಮತ್ತು [ಬ್ಲ್ಯಾಕ್ ಸಂಡೆ] ಚಿತ್ರಗಳ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದಾರಾ",
    "questionWithBrackets_zh": "[The Whip and the Body]、[Hatchet for the Honeymoon]、[Danger: Diabolik] 和 [Black Sunday] 的摄影师和导演是电影制片人吗？",
    "recursionDepth": 31,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q1216566 wdt:P344 ?x0 . wd:Q600762 wdt:P344 ?x0 . wd:Q629819 wdt:P344 ?x0 . wd:Q283699 wdt:P344 ?x0 . wd:Q1216566 wdt:P57 ?x0 . wd:Q600762 wdt:P57 ?x0 . wd:Q629819 wdt:P57 ?x0 . wd:Q283699 wdt:P57 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0\n}",
    "id": 92507,
    "split": "gold_test",
    "en": "Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1216566 is Q1216566\nwdt:P344 is P344\nwd:Q600762 is Q600762\nwdt:P344 is P344\nwd:Q629819 is Q629819\nwdt:P344 is P344\nwd:Q283699 is Q283699\nwdt:P344 is P344\nwd:Q1216566 is Q1216566\nwdt:P57 is P57\nwd:Q600762 is Q600762\nwdt:P57 is P57\nwd:Q629819 is Q629819\nwdt:P57 is P57\nwd:Q283699 is Q283699\nwdt:P57 is P57",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5089"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:6872"
      },
      {
        "uri": "wd:Q1216566",
        "mask": "kg:3676"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0094"
      },
      {
        "uri": "wd:Q600762",
        "mask": "kg:4601"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3473"
      },
      {
        "uri": "wd:Q629819",
        "mask": "kg:1183"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8030"
      },
      {
        "uri": "wd:Q283699",
        "mask": "kg:8108"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0565"
      },
      {
        "uri": "wd:Q1216566",
        "mask": "kg:3725"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7563"
      },
      {
        "uri": "wd:Q600762",
        "mask": "kg:4560"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0278"
      },
      {
        "uri": "wd:Q629819",
        "mask": "kg:6811"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3536"
      },
      {
        "uri": "wd:Q283699",
        "mask": "kg:1277"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4231"
      }
    ],
    "masked": "Translate the question “Was a cinematographer and director of The Whip and the Body , Hatchet for the Honeymoon , Danger: Diabolik , and Black Sunday a film producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5089 is P106\nkg:6872 is Q3282637\nkg:3725 is Q1216566\nkg:0565 is P344\nkg:4560 is Q600762\nkg:0565 is P344\nkg:6811 is Q629819\nkg:0565 is P344\nkg:1277 is Q283699\nkg:0565 is P344\nkg:3725 is Q1216566\nkg:4231 is P57\nkg:4560 is Q600762\nkg:4231 is P57\nkg:6811 is Q629819\nkg:4231 is P57\nkg:1277 is Q283699\nkg:4231 is P57"
  },
  {
    "CFQquestionIdx": 108087,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a actor a cinematographer and director of M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם שחקן היה צלם קולנוע ובמאי של M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "ಒಬ್ಬ ನಟ M1 , M2 , M3 , ಮತ್ತು M4 ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "演员是 M1、M2、M3 和 M4 的电影摄影师和导演吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a actor a cinematographer and director of [Six Men Getting Sick] , [Inland Empire] , [Darkened Room] , and [Rabbits]",
    "questionWithBrackets_he": "האם שחקן היה צלם קולנוע ובמאי של [Six Men Getting Sick], [Inland Empire], [חדר חשוך] ו[ארנבים]",
    "questionWithBrackets_kn": "[ಸಿಕ್ಸ್ ಮೆನ್ ಗೆಟ್ಟಿಂಗ್ ಸಿಕ್] , [ಇನ್‌ಲ್ಯಾಂಡ್ ಎಂಪೈರ್] , [ಡಾರ್ಕನ್ಡ್ ರೂಮ್] ಮತ್ತು [ಮೊಲಗಳು] ಒಬ್ಬ ನಟ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "演员是[六个生病的人]、[内陆帝国]、[暗室]和[兔子]的摄影师和导演吗？",
    "recursionDepth": 31,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q33999 . wd:Q3485595 wdt:P344 ?x0 . wd:Q1473406 wdt:P344 ?x0 . wd:Q3016313 wdt:P344 ?x0 . wd:Q862058 wdt:P344 ?x0 . wd:Q3485595 wdt:P57 ?x0 . wd:Q1473406 wdt:P57 ?x0 . wd:Q3016313 wdt:P57 ?x0 . wd:Q862058 wdt:P57 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q33999 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0\n}",
    "id": 108087,
    "split": "gold_test",
    "en": "Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3016313 is Q3016313\nwdt:P344 is P344\nwd:Q862058 is Q862058\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3016313 is Q3016313\nwdt:P57 is P57\nwd:Q862058 is Q862058\nwdt:P57 is P57",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0059"
      },
      {
        "uri": "wd:Q33999",
        "mask": "kg:5148"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:5663"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4142"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:4989"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2626"
      },
      {
        "uri": "wd:Q3016313",
        "mask": "kg:9401"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9734"
      },
      {
        "uri": "wd:Q862058",
        "mask": "kg:8325"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5460"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:9749"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3424"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:8843"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8245"
      },
      {
        "uri": "wd:Q3016313",
        "mask": "kg:6182"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3410"
      },
      {
        "uri": "wd:Q862058",
        "mask": "kg:9120"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3455"
      }
    ],
    "masked": "Translate the question “Was a actor a cinematographer and director of Six Men Getting Sick , Inland Empire , Darkened Room , and Rabbits” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0059 is P106\nkg:5148 is Q33999\nkg:9749 is Q3485595\nkg:5460 is P344\nkg:8843 is Q1473406\nkg:5460 is P344\nkg:6182 is Q3016313\nkg:5460 is P344\nkg:9120 is Q862058\nkg:5460 is P344\nkg:9749 is Q3485595\nkg:3455 is P57\nkg:8843 is Q1473406\nkg:3455 is P57\nkg:6182 is Q3016313\nkg:3455 is P57\nkg:9120 is Q862058\nkg:3455 is P57"
  },
  {
    "CFQquestionIdx": 186538,
    "expectedResponse": [
      "Airplane!"
    ],
    "questionPatternModEntities": "What was written , executive produced , and directed by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה נכתב, הופק וביים על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ರವರು ಏನು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "由 M0、M1 和 M2 编写、执行制作和指导的内容是什么？",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was written , executive produced , and directed by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]",
    "questionWithBrackets_he": "מה נכתב, הופק ובוים על ידי [דיוויד צוקר], [ג&#39;ים אברהמס] ו[ג&#39;רי צוקר]",
    "questionWithBrackets_kn": "[ಡೇವಿಡ್ ಜುಕರ್] , [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] ಮತ್ತು [ಜೆರ್ರಿ ಜುಕರ್] ಏನು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[David Zucker]、[Jim Abrahams] 和 [Jerry Zucker] 编写、执行制作和导演了什么？",
    "recursionDepth": 31,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q448604 . ?x0 wdt:P57 wd:Q363666 . ?x0 wdt:P57 wd:Q452794 . ?x0 wdt:P1431 wd:Q448604 . ?x0 wdt:P1431 wd:Q363666 . ?x0 wdt:P1431 wd:Q452794 . ?x0 wdt:P58 wd:Q448604 . ?x0 wdt:P58 wd:Q363666 . ?x0 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1431 M0 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 186538,
    "split": "gold_test",
    "en": "What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker",
    "results": [
      [
        "wd:Q497256"
      ]
    ],
    "direct": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:2701"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:5928"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2953"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:7528"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7157"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:8129"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4414"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:1365"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5816"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:7843"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3970"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:9280"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5492"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:2091"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8824"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:7027"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0837"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:2575"
      }
    ],
    "masked": "Translate the question “What was written , executive produced , and directed by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7157 is P57\nkg:2091 is Q448604\nkg:7157 is P57\nkg:7027 is Q363666\nkg:7157 is P57\nkg:2575 is Q452794\nkg:3970 is P1431\nkg:2091 is Q448604\nkg:3970 is P1431\nkg:7027 is Q363666\nkg:3970 is P1431\nkg:2575 is Q452794\nkg:0837 is P58\nkg:2091 is Q448604\nkg:0837 is P58\nkg:7027 is Q363666\nkg:0837 is P58\nkg:2575 is Q452794"
  },
  {
    "CFQquestionIdx": 142769,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What did M0 , M1 , and M2 direct , edit , and write",
    "questionPatternModEntities_he": "מה כיוונו, ערכו וכתבו M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಏನು ನಿರ್ದೇಶಿಸುತ್ತವೆ, ಸಂಪಾದಿಸುತ್ತವೆ ಮತ್ತು ಬರೆಯುತ್ತವೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 指导、编辑和编写了什么？",
    "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "questionWithBrackets": "What did [Ole John] , [Jens Jørgen Thorsen] , and [Jørgen Leth] direct , edit , and write",
    "questionWithBrackets_he": "מה ביימו, ערכו וכתבו [אול ג&#39;ון], [ג&#39;נס יורגן תורסן] ו[יורגן לית&#39;",
    "questionWithBrackets_kn": "[ಓಲೆ ಜಾನ್], [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಏನು ನಿರ್ದೇಶಿಸಿದರು, ಸಂಪಾದಿಸಿದರು ಮತ್ತು ಬರೆದರು",
    "questionWithBrackets_zh": "[Ole John]、[Jens Jørgen Thorsen] 和 [Jørgen Leth] 导演、编辑和创作了什么？",
    "recursionDepth": 31,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 142769,
    "split": "gold_test",
    "en": "What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:4010"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7027"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0365"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:6948"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8377"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1167"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2918"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7307"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8872"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:6025"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8096"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:6559"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2922"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2104"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8997"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:6065"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6973"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7162"
      }
    ],
    "masked": "Translate the question “What did Ole John , Jens Jørgen Thorsen , and Jørgen Leth direct , edit , and write” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8377 is P57\nkg:2104 is Q562108\nkg:8377 is P57\nkg:6065 is Q1687239\nkg:8377 is P57\nkg:7162 is Q35979475\nkg:8096 is P1040\nkg:2104 is Q562108\nkg:8096 is P1040\nkg:6065 is Q1687239\nkg:8096 is P1040\nkg:7162 is Q35979475\nkg:6973 is P58\nkg:2104 is Q562108\nkg:6973 is P58\nkg:6065 is Q1687239\nkg:6973 is P58\nkg:7162 is Q35979475"
  },
  {
    "CFQquestionIdx": 79227,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written and directed by M1 , M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "האם M0 נכתב וביים על ידי M1 , M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , M4 , ಮತ್ತು M5 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆದು ನಿರ್ದೇಶಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是由 M1、M2、M3、M4 和 M5 编写和导演的吗？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Grindhouse] written and directed by [Eli Roth] , [Edgar Wright] , [Rob Zombie] , [Quentin Tarantino] , and [Robert Rodriguez]",
    "questionWithBrackets_he": "האם [Grindhouse] נכתב וביים על ידי [אלי רוט], [אדגר רייט], [רוב זומבי], [קוונטין טרנטינו] ו[רוברט רודריגז]",
    "questionWithBrackets_kn": "[ಗ್ರೈಂಡ್‌ಹೌಸ್] ಅನ್ನು [ಎಲಿ ರಾತ್] , [ಎಡ್ಗರ್ ರೈಟ್] , [ರಾಬ್ ಝಾಂಬಿ] , [ಕ್ವೆಂಟಿನ್ ಟ್ಯಾರಂಟಿನೋ] ಮತ್ತು [ರಾಬರ್ಟ್ ರೊಡ್ರಿಗಸ್] ಬರೆದು ನಿರ್ದೇಶಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[Grindhouse] 是由 [Eli Roth]、[Edgar Wright]、[Rob Zombie]、[Quentin Tarantino] 和 [Robert Rodriguez] 编写和导演的吗？",
    "recursionDepth": 32,
    "sparql": "ASK WHERE { wd:Q679023 wdt:P57 wd:Q3772 . wd:Q679023 wdt:P57 wd:Q298255 . wd:Q679023 wdt:P57 wd:Q358714 . wd:Q679023 wdt:P57 wd:Q47284 . wd:Q679023 wdt:P57 wd:Q522057 . wd:Q679023 wdt:P58 wd:Q3772 . wd:Q679023 wdt:P58 wd:Q298255 . wd:Q679023 wdt:P58 wd:Q358714 . wd:Q679023 wdt:P58 wd:Q47284 . wd:Q679023 wdt:P58 wd:Q522057 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P57 M4 .\nM0 wdt:P57 M5 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3 .\nM0 wdt:P58 M4 .\nM0 wdt:P58 M5\n}",
    "id": 79227,
    "split": "gold_test",
    "en": "Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P57 is P57\nwd:Q522057 is Q522057\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q3772 is Q3772\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q298255 is Q298255\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q358714 is Q358714\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q47284 is Q47284\nwd:Q679023 is Q679023\nwdt:P58 is P58\nwd:Q522057 is Q522057",
    "masks": [
      {
        "uri": "wd:Q679023",
        "mask": "kg:0310"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5976"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:5360"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:3015"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0898"
      },
      {
        "uri": "wd:Q298255",
        "mask": "kg:6171"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:5861"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5767"
      },
      {
        "uri": "wd:Q358714",
        "mask": "kg:9374"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:2487"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1693"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:6954"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:4031"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4381"
      },
      {
        "uri": "wd:Q522057",
        "mask": "kg:0957"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:2048"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6456"
      },
      {
        "uri": "wd:Q3772",
        "mask": "kg:1364"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:9567"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5446"
      },
      {
        "uri": "wd:Q298255",
        "mask": "kg:6928"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:5316"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3279"
      },
      {
        "uri": "wd:Q358714",
        "mask": "kg:2428"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:8567"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8113"
      },
      {
        "uri": "wd:Q47284",
        "mask": "kg:5433"
      },
      {
        "uri": "wd:Q679023",
        "mask": "kg:6456"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0251"
      },
      {
        "uri": "wd:Q522057",
        "mask": "kg:3272"
      }
    ],
    "masked": "Translate the question “Was Grindhouse written and directed by Eli Roth , Edgar Wright , Rob Zombie , Quentin Tarantino , and Robert Rodriguez” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6456 is Q679023\nkg:4381 is P57\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:4381 is P57\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:4381 is P57\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:4381 is P57\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:4381 is P57\nkg:3272 is Q522057\nkg:6456 is Q679023\nkg:0251 is P58\nkg:1364 is Q3772\nkg:6456 is Q679023\nkg:0251 is P58\nkg:6928 is Q298255\nkg:6456 is Q679023\nkg:0251 is P58\nkg:2428 is Q358714\nkg:6456 is Q679023\nkg:0251 is P58\nkg:5433 is Q47284\nkg:6456 is Q679023\nkg:0251 is P58\nkg:3272 is Q522057"
  },
  {
    "CFQquestionIdx": 34484,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film producer edit and write M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם מפיק סרטים ערך וכתב את M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影制片人是否编辑并编写了 M1、M2、M3 和 M4？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer edit and write [Katzelmacher] , [Lili Marleen] , [Whity] , and [The Niklashausen Journey]",
    "questionWithBrackets_he": "האם מפיק סרטים ערך וכתב את [כצלמאכר], [לילי מרלין], [Whity] ו[מסע ניקלאסהאוזן]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ಕಟ್ಜೆಲ್ಮಾಕರ್] , [ಲಿಲಿ ಮರ್ಲೀನ್] , [ವೈಟಿ] , ಮತ್ತು [ದಿ ನಿಕ್ಲಾಶೌಸೆನ್ ಜರ್ನಿ] ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影制片人是否编辑和编写了 [Katzelmacher]、[Lili Marleen]、[Whity] 和 [The Niklashausen Journey]？",
    "recursionDepth": 32,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q2789885 wdt:P1040 ?x0 . wd:Q686125 wdt:P1040 ?x0 . wd:Q567519 wdt:P1040 ?x0 . wd:Q327427 wdt:P1040 ?x0 . wd:Q2789885 wdt:P58 ?x0 . wd:Q686125 wdt:P58 ?x0 . wd:Q567519 wdt:P58 ?x0 . wd:Q327427 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 34484,
    "split": "gold_test",
    "en": "Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q2789885 is Q2789885\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q2789885 is Q2789885\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:5732"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:6262"
      },
      {
        "uri": "wd:Q2789885",
        "mask": "kg:9284"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2450"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:9602"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6187"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:7098"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5843"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:8929"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6212"
      },
      {
        "uri": "wd:Q2789885",
        "mask": "kg:4507"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0775"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:8984"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6733"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:3199"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8587"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:4313"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7497"
      }
    ],
    "masked": "Translate the question “Did a film producer edit and write Katzelmacher , Lili Marleen , Whity , and The Niklashausen Journey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5732 is P106\nkg:6262 is Q3282637\nkg:4507 is Q2789885\nkg:6212 is P1040\nkg:8984 is Q686125\nkg:6212 is P1040\nkg:3199 is Q567519\nkg:6212 is P1040\nkg:4313 is Q327427\nkg:6212 is P1040\nkg:4507 is Q2789885\nkg:7497 is P58\nkg:8984 is Q686125\nkg:7497 is P58\nkg:3199 is Q567519\nkg:7497 is P58\nkg:4313 is Q327427\nkg:7497 is P58"
  },
  {
    "CFQquestionIdx": 171227,
    "expectedResponse": [
      "Breaking Bad"
    ],
    "questionPatternModEntities": "What was directed by and written by M0 , M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "מה ביים ונכתב על ידי M0 , M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , M3 , ಮತ್ತು M4 ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0 、 M1 、 M2 、 M3 和 M4 的导演和编剧是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed by and written by [Thomas Schnauz] , [Peter Gould] , [George Mastras] , [Sam Catlin] , and [Vince Gilligan]",
    "questionWithBrackets_he": "מה ביים ונכתב על ידי [תומס שנאוז], [פיטר גולד], [ג&#39;ורג&#39; מאסטרס], [סם קטלין] ו[וינס גיליגן]",
    "questionWithBrackets_kn": "[ಥಾಮಸ್ ಷ್ನಾಜ್] , [ಪೀಟರ್ ಗೌಲ್ಡ್] , [ಜಾರ್ಜ್ ಮಾಸ್ಟ್ರಾಸ್] , [ಸ್ಯಾಮ್ ಕ್ಯಾಟ್ಲಿನ್] ಮತ್ತು [ವಿನ್ಸ್ ಗಿಲ್ಲಿಗನ್] ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是由 [Thomas Schnauz]、[Peter Gould]、[George Mastras]、[Sam Catlin] 和 [Vince Gilligan] 导演和编剧的？",
    "recursionDepth": 32,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q4500 . ?x0 wdt:P57 wd:Q15042700 . ?x0 wdt:P57 wd:Q5542223 . ?x0 wdt:P57 wd:Q7174311 . ?x0 wdt:P57 wd:Q7407299 . ?x0 wdt:P58 wd:Q4500 . ?x0 wdt:P58 wd:Q15042700 . ?x0 wdt:P58 wd:Q5542223 . ?x0 wdt:P58 wd:Q7174311 . ?x0 wdt:P58 wd:Q7407299 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4\n}",
    "id": 171227,
    "split": "gold_test",
    "en": "What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan",
    "results": [
      [
        "wd:Q1079"
      ]
    ],
    "direct": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q4500 is Q4500\nwdt:P57 is P57\nwd:Q15042700 is Q15042700\nwdt:P57 is P57\nwd:Q5542223 is Q5542223\nwdt:P57 is P57\nwd:Q7174311 is Q7174311\nwdt:P57 is P57\nwd:Q7407299 is Q7407299\nwdt:P58 is P58\nwd:Q4500 is Q4500\nwdt:P58 is P58\nwd:Q15042700 is Q15042700\nwdt:P58 is P58\nwd:Q5542223 is Q5542223\nwdt:P58 is P58\nwd:Q7174311 is Q7174311\nwdt:P58 is P58\nwd:Q7407299 is Q7407299",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:2281"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:1702"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3198"
      },
      {
        "uri": "wd:Q15042700",
        "mask": "kg:0501"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9580"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:9972"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5982"
      },
      {
        "uri": "wd:Q7174311",
        "mask": "kg:3414"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9048"
      },
      {
        "uri": "wd:Q7407299",
        "mask": "kg:0635"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3670"
      },
      {
        "uri": "wd:Q4500",
        "mask": "kg:9478"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8676"
      },
      {
        "uri": "wd:Q15042700",
        "mask": "kg:0114"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4592"
      },
      {
        "uri": "wd:Q5542223",
        "mask": "kg:4893"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8609"
      },
      {
        "uri": "wd:Q7174311",
        "mask": "kg:1411"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7634"
      },
      {
        "uri": "wd:Q7407299",
        "mask": "kg:1187"
      }
    ],
    "masked": "Translate the question “What was directed by and written by Thomas Schnauz , Peter Gould , George Mastras , Sam Catlin , and Vince Gilligan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9048 is P57\nkg:9478 is Q4500\nkg:9048 is P57\nkg:0114 is Q15042700\nkg:9048 is P57\nkg:4893 is Q5542223\nkg:9048 is P57\nkg:1411 is Q7174311\nkg:9048 is P57\nkg:1187 is Q7407299\nkg:7634 is P58\nkg:9478 is Q4500\nkg:7634 is P58\nkg:0114 is Q15042700\nkg:7634 is P58\nkg:4893 is Q5542223\nkg:7634 is P58\nkg:1411 is Q7174311\nkg:7634 is P58\nkg:1187 is Q7407299"
  },
  {
    "CFQquestionIdx": 171684,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was directed by , written by , and edited by M0 , M1 , and M2",
    "questionPatternModEntities_he": "מה ביים, נכתב על ידי ונערך על ידי M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ಅವರಿಂದ ಏನು ನಿರ್ದೇಶಿಸಲ್ಪಟ್ಟಿದೆ, ಬರೆದಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 的导演、编剧和编辑是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed by , written by , and edited by [Ole John] , [Jens Jørgen Thorsen] , and [Jørgen Leth]",
    "questionWithBrackets_he": "מה ביים, נכתב על ידי, ונערך על ידי [אול ג&#39;ון], [Jens Jørgen Thorsen] ו[יורגן לט]",
    "questionWithBrackets_kn": "[ಓಲೆ ಜಾನ್] , [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Ole John]、[Jens Jørgen Thorsen] 和 [Jørgen Leth] 的导演、编剧和编辑是什么？",
    "recursionDepth": 32,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2\n}",
    "id": 171684,
    "split": "gold_test",
    "en": "What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:2711"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5284"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6246"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9334"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9462"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0133"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9960"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:9260"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3538"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5554"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1278"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0752"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6114"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8696"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0191"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1769"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0104"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9839"
      }
    ],
    "masked": "Translate the question “What was directed by , written by , and edited by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9462 is P57\nkg:8696 is Q562108\nkg:9462 is P57\nkg:1769 is Q1687239\nkg:9462 is P57\nkg:9839 is Q35979475\nkg:1278 is P1040\nkg:8696 is Q562108\nkg:1278 is P1040\nkg:1769 is Q1687239\nkg:1278 is P1040\nkg:9839 is Q35979475\nkg:0104 is P58\nkg:8696 is Q562108\nkg:0104 is P58\nkg:1769 is Q1687239\nkg:0104 is P58\nkg:9839 is Q35979475"
  },
  {
    "CFQquestionIdx": 33894,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor executive produce and write M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם עורך סרטים הפיק וכתב את M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "ಫಿಲ್ಮ್ ಎಡಿಟರ್ ಎಕ್ಸಿಕ್ಯೂಟಿವ್ M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ನಿರ್ಮಿಸಿ ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影编辑执行是否制作和编写了 M1、M2、M3 和 M4？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor executive produce and write [Star Wars: Episode IV – A New Hope] , [Star Wars: Episode I – The Phantom Menace] , [Star Wars: Episode VI – Return of the Jedi] , and [Star Whores]",
    "questionWithBrackets_he": "האם עורך סרטים הפיק וכתב [מלחמת הכוכבים: פרק IV - תקווה חדשה], [מלחמת הכוכבים: פרק I - אימת הפנטום], [מלחמת הכוכבים: פרק VI - שובו של הג&#39;דיי] ו[זונות הכוכבים] ",
    "questionWithBrackets_kn": "ಫಿಲ್ಮ್ ಎಡಿಟರ್ ಎಕ್ಸಿಕ್ಯೂಟಿವ್ [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ IV - ಎ ನ್ಯೂ ಹೋಪ್] , [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ I - ದಿ ಫ್ಯಾಂಟಮ್ ಮೆನೇಸ್] , [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ VI - ರಿಟರ್ನ್ ಆಫ್ ದಿ ಜೇಡಿ] , ಮತ್ತು [ಸ್ಟಾರ್ ವೋರ್ಸ್] ",
    "questionWithBrackets_zh": "是否有电影编辑执行制作和编写 [星球大战：第四集 - 新希望]、[星球大战：第一集 - 幽灵的威胁]、[星球大战：第六集 - 绝地归来] 和 [明星妓女] ",
    "recursionDepth": 33,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q3968346 wdt:P1431 ?x0 . wd:Q165713 wdt:P1431 ?x0 . wd:Q181803 wdt:P1431 ?x0 . wd:Q17738 wdt:P1431 ?x0 . wd:Q3968346 wdt:P58 ?x0 . wd:Q165713 wdt:P58 ?x0 . wd:Q181803 wdt:P58 ?x0 . wd:Q17738 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM4 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 33894,
    "split": "gold_test",
    "en": "Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q3968346 is Q3968346\nwdt:P1431 is P1431\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q181803 is Q181803\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q3968346 is Q3968346\nwdt:P58 is P58\nwd:Q165713 is Q165713\nwdt:P58 is P58\nwd:Q181803 is Q181803\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:3716"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:2187"
      },
      {
        "uri": "wd:Q3968346",
        "mask": "kg:3185"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9649"
      },
      {
        "uri": "wd:Q165713",
        "mask": "kg:9283"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6102"
      },
      {
        "uri": "wd:Q181803",
        "mask": "kg:0040"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5230"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:2854"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1414"
      },
      {
        "uri": "wd:Q3968346",
        "mask": "kg:9541"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9502"
      },
      {
        "uri": "wd:Q165713",
        "mask": "kg:0616"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6243"
      },
      {
        "uri": "wd:Q181803",
        "mask": "kg:6923"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9499"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:0095"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4359"
      }
    ],
    "masked": "Translate the question “Did a film editor executive produce and write Star Wars: Episode IV – A New Hope , Star Wars: Episode I – The Phantom Menace , Star Wars: Episode VI – Return of the Jedi , and Star Whores” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P106\nkg:2187 is Q7042855\nkg:9541 is Q3968346\nkg:1414 is P1431\nkg:0616 is Q165713\nkg:1414 is P1431\nkg:6923 is Q181803\nkg:1414 is P1431\nkg:0095 is Q17738\nkg:1414 is P1431\nkg:9541 is Q3968346\nkg:4359 is P58\nkg:0616 is Q165713\nkg:4359 is P58\nkg:6923 is Q181803\nkg:4359 is P58\nkg:0095 is Q17738\nkg:4359 is P58"
  },
  {
    "CFQquestionIdx": 50732,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by , edited by , and directed by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי , נערך על ידי וביים על ידי M1 , M2 ו- M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆಯಲಾಗಿದೆಯೇ, ಸಂಪಾದಿಸಲಾಗಿದೆಯೇ ಮತ್ತು ನಿರ್ದೇಶಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 编写、编辑和指导？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Stop for Bud] written by , edited by , and directed by [Ole John] , [Jens Jørgen Thorsen] , and [Jørgen Leth]",
    "questionWithBrackets_he": "האם [Stop for Bud] נכתב על ידי, נערך על ידי וביים על ידי [Ole John], [Jens Jørgen Thorsen], ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಸ್ಟಾಪ್ ಫಾರ್ ಬಡ್] ಅನ್ನು [ಓಲೆ ಜಾನ್], [ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥಾರ್ಸೆನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಅವರು ಬರೆದಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Stop for Bud] 是由 [Ole John]、[Jens Jørgen Thorsen] 和 [Jørgen Leth] 编写、编辑和导演的吗？",
    "recursionDepth": 33,
    "sparql": "ASK WHERE { wd:Q20729551 wdt:P57 wd:Q562108 . wd:Q20729551 wdt:P57 wd:Q1687239 . wd:Q20729551 wdt:P57 wd:Q35979475 . wd:Q20729551 wdt:P1040 wd:Q562108 . wd:Q20729551 wdt:P1040 wd:Q1687239 . wd:Q20729551 wdt:P1040 wd:Q35979475 . wd:Q20729551 wdt:P58 wd:Q562108 . wd:Q20729551 wdt:P58 wd:Q1687239 . wd:Q20729551 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P1040 M1 .\nM0 wdt:P1040 M2 .\nM0 wdt:P1040 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 50732,
    "split": "gold_test",
    "en": "Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwd:Q20729551 is Q20729551\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4212"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3741"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:4000"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:5815"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3008"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2358"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:3297"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5271"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2829"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:7987"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0835"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:3690"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:1584"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4909"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9282"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:0818"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7843"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7397"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:6329"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6174"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5376"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:2546"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7734"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0625"
      },
      {
        "uri": "wd:Q20729551",
        "mask": "kg:4575"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5415"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1073"
      }
    ],
    "masked": "Translate the question “Was Stop for Bud written by , edited by , and directed by Ole John , Jens Jørgen Thorsen , and Jørgen Leth” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4575 is Q20729551\nkg:5271 is P57\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5271 is P57\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:7843 is P1040\nkg:1073 is Q35979475\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:5376 is Q562108\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:0625 is Q1687239\nkg:4575 is Q20729551\nkg:5415 is P58\nkg:1073 is Q35979475"
  },
  {
    "CFQquestionIdx": 186714,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "What writer and cinematographer of M0 , M1 , and M2 executive produced M3 and M4",
    "questionPatternModEntities_he": "איזה סופר וצלם של מנהלי M0, M1 ו-M2 הפיק את M3 ו-M4",
    "questionPatternModEntities_kn": "M0, M1 ಮತ್ತು M2 ಕಾರ್ಯನಿರ್ವಾಹಕ M3 ಮತ್ತು M4 ಅನ್ನು ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2的哪位编剧兼摄影师制作了M3、M4？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What writer and cinematographer of [Anyone Lived in a Pretty How Town] , [1:42.08] , and [Look at Life] executive produced [Star Wars: Episode I – The Phantom Menace] and [The Land Before Time]",
    "questionWithBrackets_he": "איזה סופר וצלם קולנוע של [כל אחד גר בעיר יפה] , [1:42.08] ומנהלת [הסתכל על החיים] הפיק את [מלחמת הכוכבים: פרק א&#39; - איום הפנטום] ו[הארץ לפני הזמן]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ [ಯಾರಾದರೂ ಪ್ರೆಟಿ ಹೌ ಟೌನ್‌ನಲ್ಲಿ ವಾಸಿಸುತ್ತಿದ್ದರು] , [1:42.08] ಮತ್ತು [ಲೈಫ್ ನೋಡಿ] ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ I - ದಿ ಫ್ಯಾಂಟಮ್ ಮೆನೇಸ್] ಮತ್ತು [ದಿ ಲ್ಯಾಂಡ್ ಬಿಫೋರ್ ಟೈಮ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Anyone Lived in a Pretty How Town]、[1:42.08] 和 [Look at Life] 的哪位作家和摄影师制作了 [Star Wars: Episode I – The Phantom Menace] 和 [The Land Before Time]？",
    "recursionDepth": 33,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1869678 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q208910 wdt:P344 ?x0 . wd:Q165713 wdt:P1431 ?x0 . wd:Q192403 wdt:P1431 ?x0 . wd:Q1869678 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q208910 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P1431 ?x0 .\nM4 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 186714,
    "split": "gold_test",
    "en": "What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q165713 is Q165713\nwdt:P1431 is P1431\nwd:Q192403 is Q192403\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q1869678",
        "mask": "kg:7924"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3458"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:1284"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1094"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:5156"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3874"
      },
      {
        "uri": "wd:Q165713",
        "mask": "kg:1639"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3850"
      },
      {
        "uri": "wd:Q192403",
        "mask": "kg:0817"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1569"
      },
      {
        "uri": "wd:Q1869678",
        "mask": "kg:9326"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8212"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:4082"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4165"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:2100"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8975"
      }
    ],
    "masked": "Translate the question “What writer and cinematographer of Anyone Lived in a Pretty How Town , 1:42.08 , and Look at Life executive produced Star Wars: Episode I – The Phantom Menace and The Land Before Time” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9326 is Q1869678\nkg:3874 is P344\nkg:4082 is Q613974\nkg:3874 is P344\nkg:2100 is Q208910\nkg:3874 is P344\nkg:1639 is Q165713\nkg:1569 is P1431\nkg:0817 is Q192403\nkg:1569 is P1431\nkg:9326 is Q1869678\nkg:8975 is P58\nkg:4082 is Q613974\nkg:8975 is P58\nkg:2100 is Q208910\nkg:8975 is P58"
  },
  {
    "CFQquestionIdx": 204325,
    "expectedResponse": [
      "Nuri Bilge Ceylan"
    ],
    "questionPatternModEntities": "Which film producer was a editor , executive producer , director , and writer of M1 and M2",
    "questionPatternModEntities_he": "איזה מפיק סרטים היה עורך, מפיק בפועל, במאי וכותב של M1 ו-M2",
    "questionPatternModEntities_kn": "ಯಾವ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1 ಮತ್ತು M2 ನ ಸಂಪಾದಕರು, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು, ನಿರ್ದೇಶಕರು ಮತ್ತು ಬರಹಗಾರರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M1和M2的剪辑师、执行制片人、导演和编剧是哪位电影制片人？",
    "questionTemplate": "Which [NP_SIMPLE] was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity]",
    "questionWithBrackets": "Which film producer was a editor , executive producer , director , and writer of [Uzak] and [Clouds of May]",
    "questionWithBrackets_he": "איזה מפיק סרטים היה עורך, מפיק בפועל, במאי וכותב של [Uzak] ו-[ענני מאי]",
    "questionWithBrackets_kn": "ಯಾವ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ಉಜಾಕ್] ಮತ್ತು [ಕ್ಲೌಡ್ಸ್ ಆಫ್ ಮೇ] ನ ಸಂಪಾದಕರು, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು, ನಿರ್ದೇಶಕರು ಮತ್ತು ಬರಹಗಾರರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "哪个电影制片人是[乌扎克]和[五月的云]的编辑、执行制片人、导演和作家？",
    "recursionDepth": 33,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q1361018 wdt:P57 ?x0 . wd:Q2086445 wdt:P57 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2086445 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1431 ?x0 . wd:Q2086445 wdt:P1431 ?x0 . wd:Q1361018 wdt:P58 ?x0 . wd:Q2086445 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 204325,
    "split": "gold_test",
    "en": "Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May",
    "results": [
      [
        "wd:Q724172"
      ]
    ],
    "direct": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:1715"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:6194"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:6031"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9071"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:7564"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3898"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:6622"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4664"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:4652"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4769"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:2232"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0731"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:2741"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3505"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:4507"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2795"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:2686"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4465"
      }
    ],
    "masked": "Translate the question “Which film producer was a editor , executive producer , director , and writer of Uzak and Clouds of May” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1715 is P106\nkg:6194 is Q3282637\nkg:4507 is Q1361018\nkg:3898 is P57\nkg:2686 is Q2086445\nkg:3898 is P57\nkg:4507 is Q1361018\nkg:4769 is P1040\nkg:2686 is Q2086445\nkg:4769 is P1040\nkg:4507 is Q1361018\nkg:3505 is P1431\nkg:2686 is Q2086445\nkg:3505 is P1431\nkg:4507 is Q1361018\nkg:4465 is P58\nkg:2686 is Q2086445\nkg:4465 is P58"
  },
  {
    "CFQquestionIdx": 50152,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by , directed by , and executive produced by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי , ביים על ידי והפיק מנהל על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ M0 ಅನ್ನು ಬರೆಯಲಾಗಿದೆ, ನಿರ್ದೇಶಿಸಲಾಗಿದೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 编写、由 M1、M2 和 M3 指导并执行？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Airplane!] written by , directed by , and executive produced by [Jim Abrahams] , [Jerry Zucker] , and [David Zucker]",
    "questionWithBrackets_he": "האם [מטוס!] נכתב על ידי , בימוי והפיק על ידי [ג&#39;ים אברהמס], [ג&#39;רי צוקר] ו[דיוויד צוקר]",
    "questionWithBrackets_kn": "[ಏರ್ಪ್ಲೇನ್!] ಅವರು ಬರೆದಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , [ಜೆರ್ರಿ ಜುಕರ್] ಮತ್ತು [ಡೇವಿಡ್ ಜುಕರ್] ನಿರ್ಮಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Airplane!] 是由 [Jim Abrahams]、[Jerry Zucker] 和 [David Zucker] 编写、导演和执行制作的吗？",
    "recursionDepth": 34,
    "sparql": "ASK WHERE { wd:Q497256 wdt:P57 wd:Q363666 . wd:Q497256 wdt:P57 wd:Q448604 . wd:Q497256 wdt:P57 wd:Q452794 . wd:Q497256 wdt:P1431 wd:Q363666 . wd:Q497256 wdt:P1431 wd:Q448604 . wd:Q497256 wdt:P1431 wd:Q452794 . wd:Q497256 wdt:P58 wd:Q363666 . wd:Q497256 wdt:P58 wd:Q448604 . wd:Q497256 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P1431 M1 .\nM0 wdt:P1431 M2 .\nM0 wdt:P1431 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 50152,
    "split": "gold_test",
    "en": "Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794",
    "masks": [
      {
        "uri": "wd:Q497256",
        "mask": "kg:4236"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4152"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:4293"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:6601"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4817"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:4861"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:3723"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5037"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:6538"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:6106"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9887"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:3316"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:8880"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8146"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:2840"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:9406"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6431"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:5663"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:7339"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0704"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:6275"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:0296"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2773"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:6925"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:5569"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2115"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:8277"
      }
    ],
    "masked": "Translate the question “Was Airplane! written by , directed by , and executive produced by Jim Abrahams , Jerry Zucker , and David Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5569 is Q497256\nkg:5037 is P57\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:5037 is P57\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:5037 is P57\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:6431 is P1431\nkg:8277 is Q452794\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6275 is Q363666\nkg:5569 is Q497256\nkg:2115 is P58\nkg:6925 is Q448604\nkg:5569 is Q497256\nkg:2115 is P58\nkg:8277 is Q452794"
  },
  {
    "CFQquestionIdx": 50153,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 written by , executive produced by , and directed by M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם M0 נכתב על ידי , הופק על ידי , וביים על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M0 ಅನ್ನು ಬರೆದದ್ದು , ಎಕ್ಸಿಕ್ಯುಟಿವ್ ನಿರ್ಮಿಸಿದವರು ಮತ್ತು M1 , M2 , ಮತ್ತು M3 ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0 是否由 M1、M2 和 M3 编写、执行制作并由 M1、M2 和 M3 指导？",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Airplane!] written by , executive produced by , and directed by [Jim Abrahams] , [David Zucker] , and [Jerry Zucker]",
    "questionWithBrackets_he": "האם [אווירון!] נכתב על ידי , ההנהלה הופק על ידי וביים [ג&#39;ים אברהמס], [דיוויד צוקר] ו[ג&#39;רי צוקר]",
    "questionWithBrackets_kn": "[ಏರ್ಪ್ಲೇನ್!] ಅವರು ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , [ಡೇವಿಡ್ ಜುಕರ್] ಮತ್ತು [ಜೆರ್ರಿ ಜುಕರ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Airplane!] 是由 [Jim Abrahams]、[David Zucker] 和 [Jerry Zucker] 编写、执行制作和导演吗？",
    "recursionDepth": 34,
    "sparql": "ASK WHERE { wd:Q497256 wdt:P57 wd:Q363666 . wd:Q497256 wdt:P57 wd:Q448604 . wd:Q497256 wdt:P57 wd:Q452794 . wd:Q497256 wdt:P1431 wd:Q363666 . wd:Q497256 wdt:P1431 wd:Q448604 . wd:Q497256 wdt:P1431 wd:Q452794 . wd:Q497256 wdt:P58 wd:Q363666 . wd:Q497256 wdt:P58 wd:Q448604 . wd:Q497256 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 M1 .\nM0 wdt:P57 M2 .\nM0 wdt:P57 M3 .\nM0 wdt:P1431 M1 .\nM0 wdt:P1431 M2 .\nM0 wdt:P1431 M3 .\nM0 wdt:P58 M1 .\nM0 wdt:P58 M2 .\nM0 wdt:P58 M3\n}",
    "id": 50153,
    "split": "gold_test",
    "en": "Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwd:Q497256 is Q497256\nwdt:P58 is P58\nwd:Q452794 is Q452794",
    "masks": [
      {
        "uri": "wd:Q497256",
        "mask": "kg:3211"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7445"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:5999"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:7120"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7385"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:0111"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:3077"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4915"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:5759"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:3928"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3401"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:7254"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:0778"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7171"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:6382"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:0757"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5898"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:1370"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:4466"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0738"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:6386"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:5438"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3914"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:6384"
      },
      {
        "uri": "wd:Q497256",
        "mask": "kg:3218"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6616"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:3382"
      }
    ],
    "masked": "Translate the question “Was Airplane! written by , executive produced by , and directed by Jim Abrahams , David Zucker , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3218 is Q497256\nkg:4915 is P57\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:4915 is P57\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:4915 is P57\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:5898 is P1431\nkg:3382 is Q452794\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6386 is Q363666\nkg:3218 is Q497256\nkg:6616 is P58\nkg:6384 is Q448604\nkg:3218 is Q497256\nkg:6616 is P58\nkg:3382 is Q452794"
  },
  {
    "CFQquestionIdx": 187078,
    "expectedResponse": [
      "David Lynch"
    ],
    "questionPatternModEntities": "What writer , director , and executive producer of M0 and M1 executive produced M2 and M3",
    "questionPatternModEntities_he": "איזה סופר, במאי ומפיק בפועל של M0 ו-M1 הפיק את M2 ו-M3",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ಕಾರ್ಯನಿರ್ವಾಹಕ M2 ಮತ್ತು M3 ಅನ್ನು ಯಾವ ಬರಹಗಾರ, ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0和M1的编剧、导演和执行制片人制作了M2和M3？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What writer , director , and executive producer of [Twin Peaks: Fire Walk with Me] and [Twin Peaks] executive produced [My Son, My Son, What Have Ye Done?] and [Surveillance]",
    "questionWithBrackets_he": "איזה כותב, במאי ומפיק בפועל של [Twin Peaks: Fire Walk with Me] ושל [Twin Peaks] הפיק את [My Son, My Son, What Have Ye Doen?] ו-[Surveillance]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ, ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ [ಟ್ವಿನ್ ಪೀಕ್ಸ್: ಫೈರ್ ವಾಕ್ ವಿತ್ ಮಿ] ಮತ್ತು [ಟ್ವಿನ್ ಪೀಕ್ಸ್] ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಮೈ ಸನ್, ಮೈ ಸನ್, ವಾಟ್ ಹ್ಯಾವ್ ಯೇ ಡನ್?] ಮತ್ತು [ಕಣ್ಗಾವಲು] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Twin Peaks: Fire Walk with Me] 和 [Twin Peaks] 执行制作 [My Son, My Son, What Have Ye Done?] 和 [Surveillance] 的编剧、导演和执行制片人是哪位？",
    "recursionDepth": 34,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2085 wdt:P57 ?x0 . wd:Q1140578 wdt:P57 ?x0 . wd:Q583406 wdt:P1431 ?x0 . wd:Q2085 wdt:P1431 ?x0 . wd:Q1140578 wdt:P1431 ?x0 . wd:Q1511905 wdt:P1431 ?x0 . wd:Q2085 wdt:P58 ?x0 . wd:Q1140578 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 187078,
    "split": "gold_test",
    "en": "What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance",
    "results": [
      [
        "wd:Q2071"
      ]
    ],
    "direct": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2085 is Q2085\nwdt:P57 is P57\nwd:Q1140578 is Q1140578\nwdt:P57 is P57\nwd:Q583406 is Q583406\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P58 is P58\nwd:Q1140578 is Q1140578\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q2085",
        "mask": "kg:7103"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4444"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:2307"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5715"
      },
      {
        "uri": "wd:Q583406",
        "mask": "kg:8419"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6386"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:6968"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2160"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:0392"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6210"
      },
      {
        "uri": "wd:Q1511905",
        "mask": "kg:6779"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7564"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:6667"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8169"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:1652"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6807"
      }
    ],
    "masked": "Translate the question “What writer , director , and executive producer of Twin Peaks: Fire Walk with Me and Twin Peaks executive produced My Son, My Son, What Have Ye Done? and Surveillance” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6667 is Q2085\nkg:5715 is P57\nkg:1652 is Q1140578\nkg:5715 is P57\nkg:8419 is Q583406\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:7564 is P1431\nkg:1652 is Q1140578\nkg:7564 is P1431\nkg:6779 is Q1511905\nkg:7564 is P1431\nkg:6667 is Q2085\nkg:6807 is P58\nkg:1652 is Q1140578\nkg:6807 is P58"
  },
  {
    "CFQquestionIdx": 204801,
    "expectedResponse": [
      "Stimulantia"
    ],
    "questionPatternModEntities": "Which film was directed and written by M1 , M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה סרט ביים ונכתב על ידי M1 , M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M1, M2, M3, M4 ಮತ್ತು M5 ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影是由 M1、M2、M3、M4 和 M5 导演和编剧的？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed and written by [Vilgot Sjöman] , [Hans Alfredson] , [Jörn Donner] , [Gustaf Molander] , and [Ingmar Bergman]",
    "questionWithBrackets_he": "איזה סרט בימו ונכתב על ידי [וילגוט סיומן], [הנס אלפרדסון], [יורן דונר], [גוסטף מולנדר] ו[אינגמר ברגמן]",
    "questionWithBrackets_kn": "ಯಾವ ಚಲನಚಿತ್ರವನ್ನು [ವಿಲ್ಗೋಟ್ ಸ್ಜೋಮನ್], [ಹಾನ್ಸ್ ಆಲ್ಫ್ರೆಡ್ಸನ್], [ಜಾರ್ನ್ ಡೋನರ್], [ಗುಸ್ಟಾಫ್ ಮೊಲಾಂಡರ್] ಮತ್ತು [ಇಂಗ್ಮಾರ್ ಬರ್ಗ್‌ಮನ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Vilgot Sjöman]、[Hans Alfredson]、[Jörn Donner]、[Gustaf Molander] 和 [Ingmar Bergman] 导演和编剧的是哪部电影？",
    "recursionDepth": 34,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q7546 . ?x0 wdt:P57 wd:Q982339 . ?x0 wdt:P57 wd:Q1033656 . ?x0 wdt:P57 wd:Q116760 . ?x0 wdt:P57 wd:Q1365463 . ?x0 wdt:P58 wd:Q7546 . ?x0 wdt:P58 wd:Q982339 . ?x0 wdt:P58 wd:Q1033656 . ?x0 wdt:P58 wd:Q116760 . ?x0 wdt:P58 wd:Q1365463 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P57 M5 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4 .\n?x0 wdt:P58 M5\n}",
    "id": 204801,
    "split": "gold_test",
    "en": "Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman",
    "results": [
      [
        "wd:Q222633"
      ]
    ],
    "direct": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:7158"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:4664"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2821"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:3595"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2051"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:9072"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3416"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:7669"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5652"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:9182"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5200"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:1257"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5585"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:6160"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1814"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:8025"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8065"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:5061"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0090"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:5212"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7292"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:4032"
      }
    ],
    "masked": "Translate the question “Which film was directed and written by Vilgot Sjöman , Hans Alfredson , Jörn Donner , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7158 is P31\nkg:4664 is Q11424\nkg:5200 is P57\nkg:6160 is Q7546\nkg:5200 is P57\nkg:8025 is Q982339\nkg:5200 is P57\nkg:5061 is Q1033656\nkg:5200 is P57\nkg:5212 is Q116760\nkg:5200 is P57\nkg:4032 is Q1365463\nkg:7292 is P58\nkg:6160 is Q7546\nkg:7292 is P58\nkg:8025 is Q982339\nkg:7292 is P58\nkg:5061 is Q1033656\nkg:7292 is P58\nkg:5212 is Q116760\nkg:7292 is P58\nkg:4032 is Q1365463"
  },
  {
    "CFQquestionIdx": 109313,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M3 a star , director , and cinematographer of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם מלחין של M3 היה כוכב, במאי וצלם קולנוע של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಯ ಸಂಯೋಜಕರು M0, M1 ಮತ್ತು M2 ನ ಸ್ಟಾರ್, ನಿರ್ದೇಶಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರೇ",
    "questionPatternModEntities_zh": "M3的作曲家是M0、M1和M2的明星、导演和摄影师吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a composer of [Spy Kids 3-D: Game Over] a star , director , and cinematographer of [Sin City] , [Sin City: A Dame to Kill For] , and [The Adventures of Sharkboy and Lavagirl in 3-D]",
    "questionWithBrackets_he": "היה מלחין של [Spy Kids 3-D: Game Over] כוכב, במאי וצלם קולנוע של [Sin City] , [Sin City: A Dame to Kill For] ו-[The Adventures of Sharkboy and Lavagirl in 3-D ]",
    "questionWithBrackets_kn": "[ಸ್ಪೈ ಕಿಡ್ಸ್ 3-ಡಿ: ಗೇಮ್ ಓವರ್] ನ ಸಂಯೋಜಕ, [ಸಿನ್ ಸಿಟಿ] , [ಸಿನ್ ಸಿಟಿ: ಎ ಡೇಮ್ ಟು ಕಿಲ್ ಫಾರ್] , ಮತ್ತು [ದಿ ಅಡ್ವೆಂಚರ್ಸ್ ಆಫ್ ಶಾರ್ಕ್‌ಬಾಯ್ ಮತ್ತು ಲವಾಗರ್ಲ್ 3-D ನ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ದೇಶಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ ]",
    "questionWithBrackets_zh": "是 [Spy Kids 3-D: Game Over] 的作曲家 [Sin City]、[Sin City: A Dame to Kill For] 和 [The Adventures of Sharkboy and Lavagirl in 3-D] 的明星、导演和摄影师]？",
    "recursionDepth": 35,
    "sparql": "ASK WHERE { wd:Q1653396 wdt:P161 ?x0 . wd:Q656357 wdt:P161 ?x0 . wd:Q192115 wdt:P161 ?x0 . wd:Q1653396 wdt:P344 ?x0 . wd:Q656357 wdt:P344 ?x0 . wd:Q192115 wdt:P344 ?x0 . wd:Q1653396 wdt:P57 ?x0 . wd:Q656357 wdt:P57 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q550196 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P86 ?x0\n}",
    "id": 109313,
    "split": "gold_test",
    "en": "Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1653396 is Q1653396\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1653396 is Q1653396\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q550196 is Q550196\nwdt:P86 is P86",
    "masks": [
      {
        "uri": "wd:Q1653396",
        "mask": "kg:5583"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6098"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:5900"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3858"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:4523"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7469"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:6704"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4857"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6769"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5143"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:1946"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9896"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:8138"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7002"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:1324"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2743"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:7836"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8021"
      },
      {
        "uri": "wd:Q550196",
        "mask": "kg:8183"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:4876"
      }
    ],
    "masked": "Translate the question “Was a composer of Spy Kids 3-D: Game Over a star , director , and cinematographer of Sin City , Sin City: A Dame to Kill For , and The Adventures of Sharkboy and Lavagirl in 3-D” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8138 is Q1653396\nkg:7469 is P161\nkg:1324 is Q656357\nkg:7469 is P161\nkg:7836 is Q192115\nkg:7469 is P161\nkg:8138 is Q1653396\nkg:9896 is P344\nkg:1324 is Q656357\nkg:9896 is P344\nkg:7836 is Q192115\nkg:9896 is P344\nkg:8138 is Q1653396\nkg:8021 is P57\nkg:1324 is Q656357\nkg:8021 is P57\nkg:7836 is Q192115\nkg:8021 is P57\nkg:8183 is Q550196\nkg:4876 is P86"
  },
  {
    "CFQquestionIdx": 109314,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a composer of M3 and M4 a editor and star of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם מלחין של M3 ו-M4 היה עורך וכוכב של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಮತ್ತು M4 ಸಂಯೋಜಕರು M0 , M1 , ಮತ್ತು M2 ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3和M4的作曲家是M0、M1和M2的编辑和明星吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] and [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a composer of [A Woman of Paris] and [Pay Day] a editor and star of [Modern Times] , [City Lights] , and [The Essanay-Chaplin Revue of 1916]",
    "questionWithBrackets_he": "האם מלחינה של [אישה מפריז] ו[יום תשלום] הייתה עורכת וכוכבת של [זמנים מודרניים], [אורות העיר] ו[הריוויו של Essanay-Chaplin משנת 1916]",
    "questionWithBrackets_kn": "[ಎ ವುಮನ್ ಆಫ್ ಪ್ಯಾರಿಸ್] ಮತ್ತು [ಪೇ ಡೇ] ಸಂಯೋಜಕರು [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] , [ಸಿಟಿ ಲೈಟ್ಸ್] ಮತ್ತು [1916 ರ ಎಸ್ಸಾನೆ-ಚಾಪ್ಲಿನ್ ರೆವ್ಯೂ] ನ ಸಂಪಾದಕ ಮತ್ತು ತಾರೆಯಾಗಿದ್ದೀರಾ",
    "questionWithBrackets_zh": "[A Woman of Paris] 和 [Pay Day] 的作曲家是否是 [Modern Times]、[City Lights] 和 [The Essanay-Chaplin Revue of 1916] 的编辑和明星？",
    "recursionDepth": 35,
    "sparql": "ASK WHERE { wd:Q3986814 wdt:P161 ?x0 . wd:Q238211 wdt:P161 ?x0 . wd:Q45602 wdt:P161 ?x0 . wd:Q3986814 wdt:P1040 ?x0 . wd:Q238211 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q199039 wdt:P86 ?x0 . wd:Q470895 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM4 wdt:P86 ?x0\n}",
    "id": 109314,
    "split": "gold_test",
    "en": "Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3986814 is Q3986814\nwdt:P161 is P161\nwd:Q238211 is Q238211\nwdt:P161 is P161\nwd:Q45602 is Q45602\nwdt:P161 is P161\nwd:Q3986814 is Q3986814\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P86 is P86\nwd:Q470895 is Q470895\nwdt:P86 is P86",
    "masks": [
      {
        "uri": "wd:Q3986814",
        "mask": "kg:9515"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0038"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:6244"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2146"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:4523"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4883"
      },
      {
        "uri": "wd:Q3986814",
        "mask": "kg:2240"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0775"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:6301"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0519"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:9905"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6431"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:9197"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:3170"
      },
      {
        "uri": "wd:Q470895",
        "mask": "kg:3454"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:8510"
      }
    ],
    "masked": "Translate the question “Was a composer of A Woman of Paris and Pay Day a editor and star of Modern Times , City Lights , and The Essanay-Chaplin Revue of 1916” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2240 is Q3986814\nkg:4883 is P161\nkg:6301 is Q238211\nkg:4883 is P161\nkg:9905 is Q45602\nkg:4883 is P161\nkg:2240 is Q3986814\nkg:6431 is P1040\nkg:6301 is Q238211\nkg:6431 is P1040\nkg:9905 is Q45602\nkg:6431 is P1040\nkg:9197 is Q199039\nkg:8510 is P86\nkg:3454 is Q470895\nkg:8510 is P86"
  },
  {
    "CFQquestionIdx": 155027,
    "expectedResponse": [
      "Airplane!"
    ],
    "questionPatternModEntities": "What film did M1 , M2 , and M3 executive produce , write , and direct",
    "questionPatternModEntities_he": "איזה סרט M1, M2 ו-M3 הפיק, כתב וביים",
    "questionPatternModEntities_kn": "M1, M2 ಮತ್ತು M3 ಕಾರ್ಯನಿರ್ವಾಹಕರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ಮಿಸಿದರು, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದರು",
    "questionPatternModEntities_zh": "M1、M2 和 M3 执行制作、编写和导演的电影是什么？",
    "questionTemplate": "What [NP_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "questionWithBrackets": "What film did [Jim Abrahams] , [Jerry Zucker] , and [David Zucker] executive produce , write , and direct",
    "questionWithBrackets_he": "איזה סרט [ג&#39;ים אברהמס], [ג&#39;רי צוקר] ו[דיוויד צוקר] הפיקו, כתבו ובימו",
    "questionWithBrackets_kn": "[ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , [ಜೆರ್ರಿ ಜುಕರ್] ಮತ್ತು [ಡೇವಿಡ್ ಜುಕರ್] ಕಾರ್ಯನಿರ್ವಾಹಕರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jim Abrahams]、[Jerry Zucker] 和 [David Zucker] 执行制片、编剧和导演了哪部电影？",
    "recursionDepth": 35,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q448604 . ?x0 wdt:P57 wd:Q363666 . ?x0 wdt:P57 wd:Q452794 . ?x0 wdt:P1431 wd:Q448604 . ?x0 wdt:P1431 wd:Q363666 . ?x0 wdt:P1431 wd:Q452794 . ?x0 wdt:P58 wd:Q448604 . ?x0 wdt:P58 wd:Q363666 . ?x0 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P1431 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 155027,
    "split": "gold_test",
    "en": "What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct",
    "results": [
      [
        "wd:Q497256"
      ]
    ],
    "direct": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:6583"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:0270"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2831"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:2324"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6043"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:1911"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6282"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:0593"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4241"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:3108"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8184"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:0072"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7739"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:6237"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2378"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:6837"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6610"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:8970"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8418"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:6390"
      }
    ],
    "masked": "Translate the question “What film did Jim Abrahams , Jerry Zucker , and David Zucker executive produce , write , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6583 is P31\nkg:0270 is Q11424\nkg:6282 is P57\nkg:6837 is Q448604\nkg:6282 is P57\nkg:8970 is Q363666\nkg:6282 is P57\nkg:6390 is Q452794\nkg:7739 is P1431\nkg:6837 is Q448604\nkg:7739 is P1431\nkg:8970 is Q363666\nkg:7739 is P1431\nkg:6390 is Q452794\nkg:8418 is P58\nkg:6837 is Q448604\nkg:8418 is P58\nkg:8970 is Q363666\nkg:8418 is P58\nkg:6390 is Q452794"
  },
  {
    "CFQquestionIdx": 171683,
    "expectedResponse": [
      "The ABCs of Death"
    ],
    "questionPatternModEntities": "What was directed by , written by , and edited by M0 , M1 , M2 , and M3",
    "questionPatternModEntities_he": "מה ביים, נכתב על ידי ונערך על ידי M0, M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ ಏನು ನಿರ್ದೇಶಿಸಲ್ಪಟ್ಟಿದೆ, ಬರೆದಿದೆ ಮತ್ತು ಸಂಪಾದಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0、M1、M2 和 M3 的导演、编剧和编辑是什么？",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was directed by , written by , and edited by [Yūdai Yamaguchi] , [Ernesto Díaz Espinoza] , [Adrián García Bogliano] , and [Yoshihiro Nishimura]",
    "questionWithBrackets_he": "מה ביים, נכתב על ידי וערך על ידי [Yūdai Yamaguchi], [Ernesto Díaz Espinoza], [Adrian García Bogliano] ו-[Yoshihiro Nishimura]",
    "questionWithBrackets_kn": "[Yūdai Yamaguchi] , [Ernesto Díaz Espinoza] , [Adrian García Bogliano] , ಮತ್ತು [Yoshihiro Nishimura] ಅವರು ಏನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "什么是由 [Yūdai Yamaguchi]、[Ernesto Díaz Espinoza]、[Adrián García Bogliano] 和 [Yoshihiro Nishimura] 导演、编剧和编辑的？",
    "recursionDepth": 35,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P57 wd:Q5836844 . ?x0 wdt:P57 wd:Q5658534 . ?x0 wdt:P57 wd:Q4022902 . ?x0 wdt:P57 wd:Q4023328 . ?x0 wdt:P1040 wd:Q5836844 . ?x0 wdt:P1040 wd:Q5658534 . ?x0 wdt:P1040 wd:Q4022902 . ?x0 wdt:P1040 wd:Q4023328 . ?x0 wdt:P58 wd:Q5836844 . ?x0 wdt:P58 wd:Q5658534 . ?x0 wdt:P58 wd:Q4022902 . ?x0 wdt:P58 wd:Q4023328 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 M0 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M0 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P58 M0 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 171683,
    "split": "gold_test",
    "en": "What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura",
    "results": [
      [
        "wd:Q74535"
      ]
    ],
    "direct": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P57 is P57\nwd:Q5836844 is Q5836844\nwdt:P57 is P57\nwd:Q5658534 is Q5658534\nwdt:P57 is P57\nwd:Q4022902 is Q4022902\nwdt:P57 is P57\nwd:Q4023328 is Q4023328\nwdt:P1040 is P1040\nwd:Q5836844 is Q5836844\nwdt:P1040 is P1040\nwd:Q5658534 is Q5658534\nwdt:P1040 is P1040\nwd:Q4022902 is Q4022902\nwdt:P1040 is P1040\nwd:Q4023328 is Q4023328\nwdt:P58 is P58\nwd:Q5836844 is Q5836844\nwdt:P58 is P58\nwd:Q5658534 is Q5658534\nwdt:P58 is P58\nwd:Q4022902 is Q4022902\nwdt:P58 is P58\nwd:Q4023328 is Q4023328",
    "masks": [
      {
        "uri": "wdt:P57",
        "mask": "kg:4666"
      },
      {
        "uri": "wd:Q5836844",
        "mask": "kg:8852"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9864"
      },
      {
        "uri": "wd:Q5658534",
        "mask": "kg:7479"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1528"
      },
      {
        "uri": "wd:Q4022902",
        "mask": "kg:1099"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3716"
      },
      {
        "uri": "wd:Q4023328",
        "mask": "kg:0747"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9940"
      },
      {
        "uri": "wd:Q5836844",
        "mask": "kg:0118"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4225"
      },
      {
        "uri": "wd:Q5658534",
        "mask": "kg:6746"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1670"
      },
      {
        "uri": "wd:Q4022902",
        "mask": "kg:6237"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0443"
      },
      {
        "uri": "wd:Q4023328",
        "mask": "kg:1012"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2787"
      },
      {
        "uri": "wd:Q5836844",
        "mask": "kg:4619"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8758"
      },
      {
        "uri": "wd:Q5658534",
        "mask": "kg:6471"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5558"
      },
      {
        "uri": "wd:Q4022902",
        "mask": "kg:7010"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0706"
      },
      {
        "uri": "wd:Q4023328",
        "mask": "kg:2377"
      }
    ],
    "masked": "Translate the question “What was directed by , written by , and edited by Yūdai Yamaguchi , Ernesto Díaz Espinoza , Adrián García Bogliano , and Yoshihiro Nishimura” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3716 is P57\nkg:4619 is Q5836844\nkg:3716 is P57\nkg:6471 is Q5658534\nkg:3716 is P57\nkg:7010 is Q4022902\nkg:3716 is P57\nkg:2377 is Q4023328\nkg:0443 is P1040\nkg:4619 is Q5836844\nkg:0443 is P1040\nkg:6471 is Q5658534\nkg:0443 is P1040\nkg:7010 is Q4022902\nkg:0443 is P1040\nkg:2377 is Q4023328\nkg:0706 is P58\nkg:4619 is Q5836844\nkg:0706 is P58\nkg:6471 is Q5658534\nkg:0706 is P58\nkg:7010 is Q4022902\nkg:0706 is P58\nkg:2377 is Q4023328"
  },
  {
    "CFQquestionIdx": 34216,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor write , executive produce , and edit M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם עורך סרטים כתב, הפיק וערך את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ಬರೆದಿದ್ದಾರೆಯೇ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影编辑是否编写、执行制作和编辑 M1、M2 和 M3？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor write , executive produce , and edit [Pietà] , [Dream] , and [Moebius]",
    "questionWithBrackets_he": "האם עורך סרטים כתב, הפיק וערך את [Pietà], [Dream] ו[Moebius]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು [ಪಿಯೆಟಾ] , [ಕನಸು] ಮತ್ತು [ಮೊಬಿಯಸ್] ಅನ್ನು ಬರೆದಿದ್ದಾರೆಯೇ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影编辑是否编写、执行制作和编辑 [Pietà]、[Dream] 和 [Moebius]？",
    "recursionDepth": 36,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q484679 wdt:P1040 ?x0 . wd:Q13471372 wdt:P1431 ?x0 . wd:Q483197 wdt:P1431 ?x0 . wd:Q484679 wdt:P1431 ?x0 . wd:Q13471372 wdt:P58 ?x0 . wd:Q483197 wdt:P58 ?x0 . wd:Q484679 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 34216,
    "split": "gold_test",
    "en": "Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8747"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:3921"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:0893"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2552"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:9342"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4566"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:8274"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7864"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:6520"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1209"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:7869"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4186"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:7581"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5593"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:8630"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5109"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:9389"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9557"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:1101"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1593"
      }
    ],
    "masked": "Translate the question “Did a film editor write , executive produce , and edit Pietà , Dream , and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8747 is P106\nkg:3921 is Q7042855\nkg:8630 is Q13471372\nkg:7864 is P1040\nkg:9389 is Q483197\nkg:7864 is P1040\nkg:1101 is Q484679\nkg:7864 is P1040\nkg:8630 is Q13471372\nkg:5593 is P1431\nkg:9389 is Q483197\nkg:5593 is P1431\nkg:1101 is Q484679\nkg:5593 is P1431\nkg:8630 is Q13471372\nkg:1593 is P58\nkg:9389 is Q483197\nkg:1593 is P58\nkg:1101 is Q484679\nkg:1593 is P58"
  },
  {
    "CFQquestionIdx": 34622,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film producer executive produce , edit , and write M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מפיק סרטים הפיק, ערך וכתב את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕ ಕಾರ್ಯನಿರ್ವಾಹಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆಯುತ್ತಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影制片人主管是否制作、编辑和编写了 M1、M2 和 M3？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer executive produce , edit , and write [Fate] , [The Confession] , and [The Waiting Room]",
    "questionWithBrackets_he": "האם מפיק סרטים הפיק, ערך וכתב את [גורל], [הווידוי] ו[חדר ההמתנה]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕ ಕಾರ್ಯನಿರ್ವಾಹಕರು [ಫೇಟ್] , [ಕನ್ಫೆಷನ್] ಮತ್ತು [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಅನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "《命运》、《忏悔录》和《候车室》是否由电影制片人执行制作、编辑和编写？",
    "recursionDepth": 36,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q5437360 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 . wd:Q12813010 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 34622,
    "split": "gold_test",
    "en": "Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2731"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:3720"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:6801"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1228"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:7226"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7084"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:0565"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2687"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:8487"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8181"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:3039"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3835"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:2998"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1427"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:8941"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1563"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6509"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7090"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:4674"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1114"
      }
    ],
    "masked": "Translate the question “Did a film producer executive produce , edit , and write Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2731 is P106\nkg:3720 is Q3282637\nkg:8941 is Q5437360\nkg:2687 is P1040\nkg:6509 is Q6084069\nkg:2687 is P1040\nkg:4674 is Q12813010\nkg:2687 is P1040\nkg:8941 is Q5437360\nkg:1427 is P1431\nkg:6509 is Q6084069\nkg:1427 is P1431\nkg:4674 is Q12813010\nkg:1427 is P1431\nkg:8941 is Q5437360\nkg:1114 is P58\nkg:6509 is Q6084069\nkg:1114 is P58\nkg:4674 is Q12813010\nkg:1114 is P58"
  },
  {
    "CFQquestionIdx": 186752,
    "expectedResponse": [
      "Agnès Varda"
    ],
    "questionPatternModEntities": "What writer and editor of M0 , M1 , and M2 did M3 marry and influence",
    "questionPatternModEntities_he": "עם איזה סופר ועורך של M0, M1 ו-M2 התחתן M3 והשפיע",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕ M3 ವಿವಾಹವಾದರು ಮತ್ತು ಪ್ರಭಾವ ಬೀರಿದರು",
    "questionPatternModEntities_zh": "M3与M0、M1、M2的哪位作家和编辑结婚并影响了他们？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "questionWithBrackets": "What writer and editor of [Vagabond] , [Varda by Agnès] , and [The Gleaners and I] did [Jacques Demy] marry and influence",
    "questionWithBrackets_he": "עם איזה סופר ועורך של [Vagabond], [Varda מאת Agnès] ו[המלקטים ואני] התחתן והשפיע [Jacques Demy]",
    "questionWithBrackets_kn": "[ವ್ಯಾಗಾಬಾಂಡ್] , [ವಾರ್ದಾ ಬೈ ಆಗ್ನೆಸ್] , ಮತ್ತು [ದಿ ಗ್ಲೀನರ್ಸ್ ಮತ್ತು ನಾನು] ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕ [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ವಿವಾಹವಾದರು ಮತ್ತು ಪ್ರಭಾವ ಬೀರಿದರು",
    "questionWithBrackets_zh": "[Vagabond]、[Varda by Agnès] 和 [The Gleaners and I] 的哪位作家和编辑 [Jacques Demy] 结婚并影响了他们？",
    "recursionDepth": 36,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q63993096 wdt:P1040 ?x0 . wd:Q2298257 wdt:P1040 ?x0 . wd:Q2493884 wdt:P1040 ?x0 . wd:Q63993096 wdt:P58 ?x0 . wd:Q2298257 wdt:P58 ?x0 . wd:Q2493884 wdt:P58 ?x0 . ?x0 wdt:P737 wd:Q312258 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P737 M3 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 186752,
    "split": "gold_test",
    "en": "What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence",
    "results": [
      [
        "wd:Q229990"
      ]
    ],
    "direct": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258",
    "masks": [
      {
        "uri": "wd:Q63993096",
        "mask": "kg:8192"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9098"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:2511"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1397"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:3626"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0379"
      },
      {
        "uri": "wd:Q63993096",
        "mask": "kg:1581"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4510"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:1569"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4909"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:8834"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5008"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:0109"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:4448"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:3558"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:6017"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:6541"
      }
    ],
    "masked": "Translate the question “What writer and editor of Vagabond , Varda by Agnès , and The Gleaners and I did Jacques Demy marry and influence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1581 is Q63993096\nkg:0379 is P1040\nkg:1569 is Q2298257\nkg:0379 is P1040\nkg:8834 is Q2493884\nkg:0379 is P1040\nkg:1581 is Q63993096\nkg:5008 is P58\nkg:1569 is Q2298257\nkg:5008 is P58\nkg:8834 is Q2493884\nkg:5008 is P58\nkg:0109 is P737\nkg:6541 is Q312258\nkg:3558 is P26\nkg:6541 is Q312258\nkg:6541 is Q312258"
  },
  {
    "CFQquestionIdx": 187179,
    "expectedResponse": [
      "Charlie Chaplin"
    ],
    "questionPatternModEntities": "What writer , star , director , and composer of M0 and M1 was a director of M2",
    "questionPatternModEntities_he": "איזה סופר, כוכב, במאי ומלחין של M0 ו-M1 היה במאי של M2",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ರ ಯಾವ ಬರಹಗಾರ, ತಾರೆ, ನಿರ್ದೇಶಕ ಮತ್ತು ಸಂಯೋಜಕರು M2 ನ ನಿರ್ದೇಶಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0和M1的哪个作家、明星、导演和作曲家是M2的导演？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] was a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "What writer , star , director , and composer of [Shoulder Arms] and [The Great Dictator] was a director of [The Floorwalker]",
    "questionWithBrackets_he": "איזה סופר, כוכב, במאי ומלחין של [זרועות הכתף] ו[הדיקטטור הגדול] היה במאי של [ה-Floorwalker]",
    "questionWithBrackets_kn": "[ಭುಜದ ತೋಳುಗಳು] ಮತ್ತು [ದಿ ಗ್ರೇಟ್ ಡಿಕ್ಟೇಟರ್] ನ ಯಾವ ಬರಹಗಾರ, ತಾರೆ, ನಿರ್ದೇಶಕ ಮತ್ತು ಸಂಯೋಜಕರು [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] ನಿರ್ದೇಶಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[Shoulder Arms] 和 [The Great Dictator] 的哪个作家、明星、导演和作曲家是 [The Floorwalker] 的导演？",
    "recursionDepth": 36,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q109116 wdt:P161 ?x0 . wd:Q1140317 wdt:P161 ?x0 . wd:Q109116 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q1140317 wdt:P57 ?x0 . wd:Q109116 wdt:P86 ?x0 . wd:Q1140317 wdt:P86 ?x0 . wd:Q109116 wdt:P58 ?x0 . wd:Q1140317 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P86 ?x0 .\nM1 wdt:P86 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 187179,
    "split": "gold_test",
    "en": "What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker",
    "results": [
      [
        "wd:Q882"
      ]
    ],
    "direct": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q109116 is Q109116\nwdt:P161 is P161\nwd:Q1140317 is Q1140317\nwdt:P161 is P161\nwd:Q109116 is Q109116\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q1140317 is Q1140317\nwdt:P57 is P57\nwd:Q109116 is Q109116\nwdt:P86 is P86\nwd:Q1140317 is Q1140317\nwdt:P86 is P86\nwd:Q109116 is Q109116\nwdt:P58 is P58\nwd:Q1140317 is Q1140317\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q109116",
        "mask": "kg:6287"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0935"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:1463"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9331"
      },
      {
        "uri": "wd:Q109116",
        "mask": "kg:6111"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3719"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:2052"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3503"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:2805"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2672"
      },
      {
        "uri": "wd:Q109116",
        "mask": "kg:1627"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:5950"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:9759"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:1821"
      },
      {
        "uri": "wd:Q109116",
        "mask": "kg:0717"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2460"
      },
      {
        "uri": "wd:Q1140317",
        "mask": "kg:4662"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5380"
      }
    ],
    "masked": "Translate the question “What writer , star , director , and composer of Shoulder Arms and The Great Dictator was a director of The Floorwalker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0717 is Q109116\nkg:9331 is P161\nkg:4662 is Q1140317\nkg:9331 is P161\nkg:0717 is Q109116\nkg:2672 is P57\nkg:2052 is Q166739\nkg:2672 is P57\nkg:4662 is Q1140317\nkg:2672 is P57\nkg:0717 is Q109116\nkg:1821 is P86\nkg:4662 is Q1140317\nkg:1821 is P86\nkg:0717 is Q109116\nkg:5380 is P58\nkg:4662 is Q1140317\nkg:5380 is P58"
  },
  {
    "CFQquestionIdx": 92440,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer a star , writer , editor , cinematographer , and director of M0 and M1",
    "questionPatternModEntities_he": "האם צלם קולנוע היה כוכב, סופר, עורך, צלם קולנוע ובמאי של M0 ו-M1",
    "questionPatternModEntities_kn": "ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಸ್ಟಾರ್, ಬರಹಗಾರ, ಸಂಪಾದಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು M0 ಮತ್ತು M1 ನ ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "电影摄影师是 M0 和 M1 的明星、作家、编辑、电影摄影师和导演吗？",
    "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity]",
    "questionWithBrackets": "Was a cinematographer a star , writer , editor , cinematographer , and director of [Planet Terror] and [Sin City]",
    "questionWithBrackets_he": "האם צלם קולנוע היה כוכב, סופר, עורך, צלם קולנוע ובמאי של [פלנט טרור] ו[עיר החטאים]",
    "questionWithBrackets_kn": "ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ಸ್ಟಾರ್, ಬರಹಗಾರ, ಸಂಪಾದಕ, ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು [ಪ್ಲಾನೆಟ್ ಟೆರರ್] ಮತ್ತು [ಸಿನ್ ಸಿಟಿ] ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionWithBrackets_zh": "电影摄影师是《恐怖星球》和《罪恶之城》的明星、作家、编辑、摄影师和导演吗？",
    "recursionDepth": 37,
    "sparql": "ASK WHERE { wd:Q192115 wdt:P161 ?x0 . wd:Q1165050 wdt:P161 ?x0 . wd:Q192115 wdt:P344 ?x0 . wd:Q1165050 wdt:P344 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q1165050 wdt:P57 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q1165050 wdt:P1040 ?x0 . wd:Q192115 wdt:P58 ?x0 . wd:Q1165050 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 92440,
    "split": "gold_test",
    "en": "Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q1165050 is Q1165050\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q192115",
        "mask": "kg:6986"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0572"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:5377"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6918"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:1107"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6287"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:4495"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9519"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:8817"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7991"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:0295"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3755"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:0987"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3748"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:7625"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2156"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:2044"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7237"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:4869"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8142"
      }
    ],
    "masked": "Translate the question “Was a cinematographer a star , writer , editor , cinematographer , and director of Planet Terror and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2044 is Q192115\nkg:6918 is P161\nkg:4869 is Q1165050\nkg:6918 is P161\nkg:2044 is Q192115\nkg:9519 is P344\nkg:4869 is Q1165050\nkg:9519 is P344\nkg:2044 is Q192115\nkg:3755 is P57\nkg:4869 is Q1165050\nkg:3755 is P57\nkg:2044 is Q192115\nkg:2156 is P1040\nkg:4869 is Q1165050\nkg:2156 is P1040\nkg:2044 is Q192115\nkg:8142 is P58\nkg:4869 is Q1165050\nkg:8142 is P58"
  },
  {
    "CFQquestionIdx": 92542,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer and star of M1 , M2 , M3 , and M4 M0 's editor and executive producer",
    "questionPatternModEntities_he": "האם היה צלם קולנוע וכוכב של M1 , M2 , M3 ו-M4 M0 העורך והמפיק בפועל של M1",
    "questionPatternModEntities_kn": "M1 , M2 , M3 , ಮತ್ತು M4 M0 ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರೇ",
    "questionPatternModEntities_zh": "M1、M2、M3 和 M4 M0 的编辑和执行制片人是电影摄影师和明星吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer and star of [Contagion] , [Schizopolis] , [Ocean's Eleven] , and [Full Frontal] [Magic Mike XXL] 's editor and executive producer",
    "questionWithBrackets_he": "האם היה צלם קולנוע וכוכב של [Contagion], [Schizopolis], [Ocean&#39;s Eleven] ו-[Full Frontal] [Magic Mike XXL] העורך והמפיק בפועל של",
    "questionWithBrackets_kn": "[ಸಾಂಕ್ರಾಮಿಕ] , [ಸ್ಕಿಜೋಪೊಲಿಸ್] , [ಓಶಿಯನ್ಸ್ ಇಲೆವೆನ್] ಮತ್ತು [ಫುಲ್ ಫ್ರಂಟಲ್] [ಮ್ಯಾಜಿಕ್ ಮೈಕ್ XXL] ನ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆಯೇ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ",
    "questionWithBrackets_zh": "是[传染病]、[精神分裂症]、[海洋十一人]和[全正面][魔术师麦克XXL]的编辑和执行制片人的电影摄影师和明星吗？",
    "recursionDepth": 37,
    "sparql": "ASK WHERE { wd:Q1432710 wdt:P161 ?x0 . wd:Q2082586 wdt:P161 ?x0 . wd:Q730888 wdt:P161 ?x0 . wd:Q205447 wdt:P161 ?x0 . wd:Q1432710 wdt:P344 ?x0 . wd:Q2082586 wdt:P344 ?x0 . wd:Q730888 wdt:P344 ?x0 . wd:Q205447 wdt:P344 ?x0 . wd:Q17893055 wdt:P1040 ?x0 . wd:Q17893055 wdt:P1431 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM4 wdt:P161 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM0 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0\n}",
    "id": 92542,
    "split": "gold_test",
    "en": "Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1432710 is Q1432710\nwdt:P161 is P161\nwd:Q2082586 is Q2082586\nwdt:P161 is P161\nwd:Q730888 is Q730888\nwdt:P161 is P161\nwd:Q205447 is Q205447\nwdt:P161 is P161\nwd:Q1432710 is Q1432710\nwdt:P344 is P344\nwd:Q2082586 is Q2082586\nwdt:P344 is P344\nwd:Q730888 is Q730888\nwdt:P344 is P344\nwd:Q205447 is Q205447\nwdt:P344 is P344\nwd:Q17893055 is Q17893055\nwdt:P1040 is P1040\nwd:Q17893055 is Q17893055\nwdt:P1431 is P1431",
    "masks": [
      {
        "uri": "wd:Q1432710",
        "mask": "kg:0745"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6271"
      },
      {
        "uri": "wd:Q2082586",
        "mask": "kg:1170"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9885"
      },
      {
        "uri": "wd:Q730888",
        "mask": "kg:8747"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6667"
      },
      {
        "uri": "wd:Q205447",
        "mask": "kg:0681"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0792"
      },
      {
        "uri": "wd:Q1432710",
        "mask": "kg:8692"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4124"
      },
      {
        "uri": "wd:Q2082586",
        "mask": "kg:0268"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4913"
      },
      {
        "uri": "wd:Q730888",
        "mask": "kg:8110"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3641"
      },
      {
        "uri": "wd:Q205447",
        "mask": "kg:8430"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:7298"
      },
      {
        "uri": "wd:Q17893055",
        "mask": "kg:5455"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7135"
      },
      {
        "uri": "wd:Q17893055",
        "mask": "kg:6465"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5258"
      }
    ],
    "masked": "Translate the question “Was a cinematographer and star of Contagion , Schizopolis , Ocean's Eleven , and Full Frontal Magic Mike XXL 's editor and executive producer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8692 is Q1432710\nkg:0792 is P161\nkg:0268 is Q2082586\nkg:0792 is P161\nkg:8110 is Q730888\nkg:0792 is P161\nkg:8430 is Q205447\nkg:0792 is P161\nkg:8692 is Q1432710\nkg:7298 is P344\nkg:0268 is Q2082586\nkg:7298 is P344\nkg:8110 is Q730888\nkg:7298 is P344\nkg:8430 is Q205447\nkg:7298 is P344\nkg:6465 is Q17893055\nkg:7135 is P1040\nkg:6465 is Q17893055\nkg:5258 is P1431"
  },
  {
    "CFQquestionIdx": 139122,
    "expectedResponse": [
      "David Lynch"
    ],
    "questionPatternModEntities": "What cinematographer and editor of M6 did M0 , M1 , M2 , M3 , M4 , and M5 star",
    "questionPatternModEntities_he": "איזה צלם ועורך של M6 כיכבו ב-M0, M1, M2, M3, M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಸಂಪಾದಕರು M0, M1, M2, M3, M4 ಮತ್ತು M5 ತಾರೆಗಳನ್ನು ಮಾಡಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2、M3、M4和M5是哪位摄影师和M6的剪辑师出演的？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
    "questionWithBrackets": "What cinematographer and editor of [Six Men Getting Sick] did [The Black Ghiandola] , [Twin Peaks] , [Lumière and Company] , [Dune] , [Inland Empire] , and [Boat] star",
    "questionWithBrackets_he": "איזה צלם ועורך של [Six Men Getting Sick] כיכבו [The Black Ghiandola], [Twin Peaks], [Lumière and Company], [Dune], [Inland Empire] ו-[Boat]",
    "questionWithBrackets_kn": "[ಸಿಕ್ಸ್ ಮೆನ್ ಗೆಟ್ಟಿಂಗ್ ಸಿಕ್] ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಸಂಪಾದಕರು [ದಿ ಬ್ಲ್ಯಾಕ್ ಘಿಯಾಂಡೋಲಾ] , [ಟ್ವಿನ್ ಪೀಕ್ಸ್] , [ಲುಮಿಯೆರ್ ಮತ್ತು ಕಂಪನಿ] , [ಡ್ಯೂನ್] , [ಇನ್‌ಲ್ಯಾಂಡ್ ಎಂಪೈರ್] , ಮತ್ತು [ಬೋಟ್] ನಟಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[The Black Ghiandola]、[Twin Peaks]、[Lumière and Company]、[Dune]、[Inland Empire] 和[Boat] 的电影摄影师和剪辑师是什么？",
    "recursionDepth": 37,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q56756907 wdt:P161 ?x0 . wd:Q3641257 wdt:P161 ?x0 . wd:Q862058 wdt:P161 ?x0 . wd:Q114819 wdt:P161 ?x0 . wd:Q2085 wdt:P161 ?x0 . wd:Q507285 wdt:P161 ?x0 . wd:Q3485595 wdt:P344 ?x0 . wd:Q3485595 wdt:P1040 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM4 wdt:P161 ?x0 .\nM5 wdt:P161 ?x0 .\nM6 wdt:P344 ?x0 .\nM6 wdt:P1040 ?x0\n}",
    "id": 139122,
    "split": "gold_test",
    "en": "What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star",
    "results": [
      [
        "wd:Q2071"
      ]
    ],
    "direct": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q56756907 is Q56756907\nwdt:P161 is P161\nwd:Q3641257 is Q3641257\nwdt:P161 is P161\nwd:Q862058 is Q862058\nwdt:P161 is P161\nwd:Q114819 is Q114819\nwdt:P161 is P161\nwd:Q2085 is Q2085\nwdt:P161 is P161\nwd:Q507285 is Q507285\nwdt:P161 is P161\nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040",
    "masks": [
      {
        "uri": "wd:Q56756907",
        "mask": "kg:4842"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4852"
      },
      {
        "uri": "wd:Q3641257",
        "mask": "kg:0716"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0191"
      },
      {
        "uri": "wd:Q862058",
        "mask": "kg:2890"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8449"
      },
      {
        "uri": "wd:Q114819",
        "mask": "kg:8977"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2343"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:5245"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0695"
      },
      {
        "uri": "wd:Q507285",
        "mask": "kg:5876"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4229"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:9951"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4756"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:5162"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0564"
      }
    ],
    "masked": "Translate the question “What cinematographer and editor of Six Men Getting Sick did The Black Ghiandola , Twin Peaks , Lumière and Company , Dune , Inland Empire , and Boat star” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4842 is Q56756907\nkg:4229 is P161\nkg:0716 is Q3641257\nkg:4229 is P161\nkg:2890 is Q862058\nkg:4229 is P161\nkg:8977 is Q114819\nkg:4229 is P161\nkg:5245 is Q2085\nkg:4229 is P161\nkg:5876 is Q507285\nkg:4229 is P161\nkg:5162 is Q3485595\nkg:4756 is P344\nkg:5162 is Q3485595\nkg:0564 is P1040"
  },
  {
    "CFQquestionIdx": 187104,
    "expectedResponse": [
      "Agnès Varda"
    ],
    "questionPatternModEntities": "What writer , editor , and director of M0 and M1 did M2 influence and marry",
    "questionPatternModEntities_he": "איזה סופר, עורך ומנהל של M0 ו-M1 השפיע על M2 והתחתן",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ನ ಯಾವ ಬರಹಗಾರ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M2 ಪ್ರಭಾವ ಮತ್ತು ಮದುವೆಯಾದರು",
    "questionPatternModEntities_zh": "M0和M1的哪个作家、编辑和导演影响并结婚了？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "questionWithBrackets": "What writer , editor , and director of [Vagabond] and [The Gleaners and I] did [Jacques Demy] influence and marry",
    "questionWithBrackets_he": "איזה סופר, עורך ומנהל של [Vagabond] ו-[The Gleaners ואני] השפיעו על [Jacques Demy] והתחתנו",
    "questionWithBrackets_kn": "[ವ್ಯಾಗಾಬಾಂಡ್] ಮತ್ತು [ದಿ ಗ್ಲೀನರ್ಸ್ ಮತ್ತು ನಾನು] ಯಾವ ಬರಹಗಾರ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ಪ್ರಭಾವ ಮತ್ತು ಮದುವೆಯಾದರು",
    "questionWithBrackets_zh": "[Vagabond] 和 [The Gleaners and I] 的哪位作家、编辑和导演 [Jacques Demy] 影响并结婚了？",
    "recursionDepth": 37,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2298257 wdt:P57 ?x0 . wd:Q2493884 wdt:P57 ?x0 . wd:Q2298257 wdt:P1040 ?x0 . wd:Q2493884 wdt:P1040 ?x0 . wd:Q2298257 wdt:P58 ?x0 . wd:Q2493884 wdt:P58 ?x0 . ?x0 wdt:P737 wd:Q312258 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\n?x0 wdt:P737 M2 .\n?x0 wdt:P26 M2 .\nFILTER ( ?x0 != M2 )\n}",
    "id": 187104,
    "split": "gold_test",
    "en": "What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry",
    "results": [
      [
        "wd:Q229990"
      ]
    ],
    "direct": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2298257 is Q2298257\nwdt:P57 is P57\nwd:Q2493884 is Q2493884\nwdt:P57 is P57\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258",
    "masks": [
      {
        "uri": "wd:Q2298257",
        "mask": "kg:5323"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3024"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:5136"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0593"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:2359"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1050"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:8778"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6829"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:7981"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2888"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:2587"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8758"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:5884"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:8083"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:4612"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:4845"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:3227"
      }
    ],
    "masked": "Translate the question “What writer , editor , and director of Vagabond and The Gleaners and I did Jacques Demy influence and marry” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7981 is Q2298257\nkg:0593 is P57\nkg:2587 is Q2493884\nkg:0593 is P57\nkg:7981 is Q2298257\nkg:6829 is P1040\nkg:2587 is Q2493884\nkg:6829 is P1040\nkg:7981 is Q2298257\nkg:8758 is P58\nkg:2587 is Q2493884\nkg:8758 is P58\nkg:5884 is P737\nkg:3227 is Q312258\nkg:4612 is P26\nkg:3227 is Q312258\nkg:3227 is Q312258"
  },
  {
    "CFQquestionIdx": 78606,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M3 's editor , executive producer , and cinematographer a star and writer of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם העורך, המפיק והצלם של M3 היה כוכב וכותב של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ಸಂಪಾದಕರು , ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರು M0 , M1 , ಮತ್ತು M2 ನ ತಾರೆ ಮತ್ತು ಬರಹಗಾರರೇ",
    "questionPatternModEntities_zh": "M3 的编辑、执行制片人和电影摄影师是 M0、M1 和 M2 的明星和作家吗？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [The Confession] 's editor , executive producer , and cinematographer a star and writer of [Destiny] , [The Waiting Room] , and [The Third Page]",
    "questionWithBrackets_he": "האם העורך, המפיק והצלם של [הווידוי] היה כוכב וכותב של [Destiny], [חדר ההמתנה] ו[העמוד השלישי]",
    "questionWithBrackets_kn": "[ದಿ ಕನ್ಫೆಷನ್] ನ ಸಂಪಾದಕರು, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರು [ಡೆಸ್ಟಿನಿ] , [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಮೂರನೇ ಪುಟ] ನ ತಾರೆ ಮತ್ತು ಬರಹಗಾರರೇ",
    "questionWithBrackets_zh": "[The Confession] 的编辑、执行制片人和摄影师是 [Destiny]、[The Waiting Room] 和 [The Third Page] 的明星和作家吗？",
    "recursionDepth": 38,
    "sparql": "ASK WHERE { wd:Q6084069 wdt:P161 ?x0 . wd:Q6099428 wdt:P161 ?x0 . wd:Q5265241 wdt:P161 ?x0 . wd:Q12813010 wdt:P344 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q6084069 wdt:P58 ?x0 . wd:Q6099428 wdt:P58 ?x0 . wd:Q5265241 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P344 ?x0 .\nM3 wdt:P1040 ?x0 .\nM3 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 78606,
    "split": "gold_test",
    "en": "Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page",
    "results": [
      true
    ],
    "direct": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q6099428 is Q6099428\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P58 is P58\nwd:Q6099428 is Q6099428\nwdt:P58 is P58\nwd:Q5265241 is Q5265241\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q6084069",
        "mask": "kg:8157"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9350"
      },
      {
        "uri": "wd:Q6099428",
        "mask": "kg:8640"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3155"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:7581"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8852"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:3252"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:3648"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:4484"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9892"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:7113"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6037"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6672"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3905"
      },
      {
        "uri": "wd:Q6099428",
        "mask": "kg:9854"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3201"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:7898"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9903"
      }
    ],
    "masked": "Translate the question “Was The Confession 's editor , executive producer , and cinematographer a star and writer of Destiny , The Waiting Room , and The Third Page” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6672 is Q6084069\nkg:8852 is P161\nkg:9854 is Q6099428\nkg:8852 is P161\nkg:7898 is Q5265241\nkg:8852 is P161\nkg:7113 is Q12813010\nkg:3648 is P344\nkg:7113 is Q12813010\nkg:9892 is P1040\nkg:7113 is Q12813010\nkg:6037 is P1431\nkg:6672 is Q6084069\nkg:9903 is P58\nkg:9854 is Q6099428\nkg:9903 is P58\nkg:7898 is Q5265241\nkg:9903 is P58"
  },
  {
    "CFQquestionIdx": 33873,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor edit , write , and direct M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם עורך סרטים ערך, כתב וביים את M1, M2, M3 ו-M4",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ಎಡಿಟ್ ಮಾಡಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1、M2、M3 和 M4 是否有电影剪辑师编辑、编写和导演？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor edit , write , and direct [Pay Day] , [Modern Times] , [The Floorwalker] , and [Work]",
    "questionWithBrackets_he": "האם עורך סרטים ערך, כתב וביים את [Pay Day], [Modern Times], [The Floorwalker] ו-[Work]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು [ಪೇ ಡೇ] , [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] , [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] ಮತ್ತು [ಕೆಲಸ] ಎಡಿಟ್ ಮಾಡಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影剪辑师是否编辑、编写和导演了 [Pay Day]、[Modern Times]、[The Floorwalker] 和 [Work]？",
    "recursionDepth": 38,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q2445896 wdt:P57 ?x0 . wd:Q199039 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q45602 wdt:P57 ?x0 . wd:Q2445896 wdt:P1040 ?x0 . wd:Q199039 wdt:P1040 ?x0 . wd:Q166739 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q2445896 wdt:P58 ?x0 . wd:Q199039 wdt:P58 ?x0 . wd:Q166739 wdt:P58 ?x0 . wd:Q45602 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 33873,
    "split": "gold_test",
    "en": "Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q2445896 is Q2445896\nwdt:P57 is P57\nwd:Q199039 is Q199039\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q2445896 is Q2445896\nwdt:P1040 is P1040\nwd:Q199039 is Q199039\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q2445896 is Q2445896\nwdt:P58 is P58\nwd:Q199039 is Q199039\nwdt:P58 is P58\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q45602 is Q45602\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2742"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:5756"
      },
      {
        "uri": "wd:Q2445896",
        "mask": "kg:8291"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5275"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:2511"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5735"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:3603"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9040"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:9736"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7291"
      },
      {
        "uri": "wd:Q2445896",
        "mask": "kg:7767"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8777"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:4149"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0175"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:1745"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1276"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:0841"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6045"
      },
      {
        "uri": "wd:Q2445896",
        "mask": "kg:0361"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9177"
      },
      {
        "uri": "wd:Q199039",
        "mask": "kg:8176"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0368"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:5149"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6002"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:8960"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4533"
      }
    ],
    "masked": "Translate the question “Did a film editor edit , write , and direct Pay Day , Modern Times , The Floorwalker , and Work” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2742 is P106\nkg:5756 is Q7042855\nkg:0361 is Q2445896\nkg:7291 is P57\nkg:8176 is Q199039\nkg:7291 is P57\nkg:5149 is Q166739\nkg:7291 is P57\nkg:8960 is Q45602\nkg:7291 is P57\nkg:0361 is Q2445896\nkg:6045 is P1040\nkg:8176 is Q199039\nkg:6045 is P1040\nkg:5149 is Q166739\nkg:6045 is P1040\nkg:8960 is Q45602\nkg:6045 is P1040\nkg:0361 is Q2445896\nkg:4533 is P58\nkg:8176 is Q199039\nkg:4533 is P58\nkg:5149 is Q166739\nkg:4533 is P58\nkg:8960 is Q45602\nkg:4533 is P58"
  },
  {
    "CFQquestionIdx": 187130,
    "expectedResponse": [
      "Zeki Demirkubuz"
    ],
    "questionPatternModEntities": "What writer , executive producer , and editor of M1 and M2 executive produced and edited M0",
    "questionPatternModEntities_he": "איזה סופר, מפיק ועורך של M1 ו-M2 הפיק וערך את M0",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಎಕ್ಸಿಕ್ಯೂಟಿವ್‌ನ ಯಾವ ಬರಹಗಾರ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಸಂಪಾದಕರು M0 ಅನ್ನು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M1和M2执行制作和编辑M0的作家，执行制片人和编辑？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What writer , executive producer , and editor of [The Waiting Room] and [Fate] executive produced and edited [The Confession]",
    "questionWithBrackets_he": "איזה סופר, מפיק בפועל ועורך של [חדר ההמתנה] ומנהל [גורל] הפיק וערך את [הווידוי]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಸಂಪಾದಕ [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಫೇಟ್] ಕಾರ್ಯನಿರ್ವಾಹಕ [ದಿ ಕನ್ಫೆಷನ್] ಅನ್ನು ನಿರ್ಮಿಸಿ ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[The Waiting Room]和[Fate]执行制作和编辑[The Confession]的作家，执行制片人和编辑？",
    "recursionDepth": 38,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q5437360 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 187130,
    "split": "gold_test",
    "en": "What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession",
    "results": [
      [
        "wd:Q187261"
      ]
    ],
    "direct": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q5437360",
        "mask": "kg:8742"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8135"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:8987"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9577"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:8475"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8765"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:0175"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0696"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:8952"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1404"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:6108"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8321"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:0579"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5251"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6062"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5311"
      }
    ],
    "masked": "Translate the question “What writer , executive producer , and editor of The Waiting Room and Fate executive produced and edited The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0579 is Q5437360\nkg:8765 is P1040\nkg:6062 is Q6084069\nkg:8765 is P1040\nkg:6108 is Q12813010\nkg:8765 is P1040\nkg:0579 is Q5437360\nkg:8321 is P1431\nkg:6062 is Q6084069\nkg:8321 is P1431\nkg:6108 is Q12813010\nkg:8321 is P1431\nkg:0579 is Q5437360\nkg:5311 is P58\nkg:6062 is Q6084069\nkg:5311 is P58"
  },
  {
    "CFQquestionIdx": 204902,
    "expectedResponse": [
      "Stimulantia"
    ],
    "questionPatternModEntities": "Which film was directed by and was written by M1 , M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה סרט ביים ונכתב על ידי M1, M2, M3, M4 ו-M5",
    "questionPatternModEntities_kn": "M1, M2, M3, M4 ಮತ್ತು M5 ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影由 M1、M2、M3、M4 和 M5 导演和编剧？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by and was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed by and was written by [Jörn Donner] , [Vilgot Sjöman] , [Hans Alfredson] , [Gustaf Molander] , and [Ingmar Bergman]",
    "questionWithBrackets_he": "איזה סרט ביים ונכתב על ידי [יורן דונר], [וילגוט סיומן], [הנס אלפרדסון], [גוסטב מולנדר] ו[אינגמר ברגמן]",
    "questionWithBrackets_kn": "ಯಾವ ಚಲನಚಿತ್ರವನ್ನು [ಜಾರ್ನ್ ಡೋನರ್], [ವಿಲ್ಗೋಟ್ ಸ್ಜೋಮನ್], [ಹಾನ್ಸ್ ಆಲ್ಫ್ರೆಡ್ಸನ್], [ಗುಸ್ಟಾಫ್ ಮೊಲಾಂಡರ್] ಮತ್ತು [ಇಂಗ್ಮಾರ್ ಬರ್ಗ್‌ಮನ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "哪部电影由 [Jörn Donner]、[Vilgot Sjöman]、[Hans Alfredson]、[Gustaf Molander] 和 [Ingmar Bergman] 导演和编剧？",
    "recursionDepth": 38,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q7546 . ?x0 wdt:P57 wd:Q982339 . ?x0 wdt:P57 wd:Q1033656 . ?x0 wdt:P57 wd:Q116760 . ?x0 wdt:P57 wd:Q1365463 . ?x0 wdt:P58 wd:Q7546 . ?x0 wdt:P58 wd:Q982339 . ?x0 wdt:P58 wd:Q1033656 . ?x0 wdt:P58 wd:Q116760 . ?x0 wdt:P58 wd:Q1365463 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P57 M5 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4 .\n?x0 wdt:P58 M5\n}",
    "id": 204902,
    "split": "gold_test",
    "en": "Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman",
    "results": [
      [
        "wd:Q222633"
      ]
    ],
    "direct": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q7546 is Q7546\nwdt:P57 is P57\nwd:Q982339 is Q982339\nwdt:P57 is P57\nwd:Q1033656 is Q1033656\nwdt:P57 is P57\nwd:Q116760 is Q116760\nwdt:P57 is P57\nwd:Q1365463 is Q1365463\nwdt:P58 is P58\nwd:Q7546 is Q7546\nwdt:P58 is P58\nwd:Q982339 is Q982339\nwdt:P58 is P58\nwd:Q1033656 is Q1033656\nwdt:P58 is P58\nwd:Q116760 is Q116760\nwdt:P58 is P58\nwd:Q1365463 is Q1365463",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:3964"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:1055"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4027"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:0597"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0974"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:8384"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5810"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:1898"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1449"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:2073"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7439"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:8147"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5794"
      },
      {
        "uri": "wd:Q7546",
        "mask": "kg:0962"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3600"
      },
      {
        "uri": "wd:Q982339",
        "mask": "kg:6787"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3325"
      },
      {
        "uri": "wd:Q1033656",
        "mask": "kg:0694"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0237"
      },
      {
        "uri": "wd:Q116760",
        "mask": "kg:3303"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3685"
      },
      {
        "uri": "wd:Q1365463",
        "mask": "kg:5554"
      }
    ],
    "masked": "Translate the question “Which film was directed by and was written by Jörn Donner , Vilgot Sjöman , Hans Alfredson , Gustaf Molander , and Ingmar Bergman” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3964 is P31\nkg:1055 is Q11424\nkg:7439 is P57\nkg:0962 is Q7546\nkg:7439 is P57\nkg:6787 is Q982339\nkg:7439 is P57\nkg:0694 is Q1033656\nkg:7439 is P57\nkg:3303 is Q116760\nkg:7439 is P57\nkg:5554 is Q1365463\nkg:3685 is P58\nkg:0962 is Q7546\nkg:3685 is P58\nkg:6787 is Q982339\nkg:3685 is P58\nkg:0694 is Q1033656\nkg:3685 is P58\nkg:3303 is Q116760\nkg:3685 is P58\nkg:5554 is Q1365463"
  },
  {
    "CFQquestionIdx": 106877,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a star , editor , cinematographer , and writer of M0 and M1 M2 's executive producer and cinematographer",
    "questionPatternModEntities_he": "האם היה כוכב, עורך, צלם קולנוע וכותב של המפיק והצלם הראשי של M0 ו-M1 M2",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 M2 ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕನ ಸ್ಟಾರ್, ಸಂಪಾದಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0 和 M1 M2 的执行制片人和摄影师是明星、编辑、摄影师和作家吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a star , editor , cinematographer , and writer of [The Waiting Room] and [Destiny] [The Confession] 's executive producer and cinematographer",
    "questionWithBrackets_he": "האם היה כוכב, עורך, צלם קולנוע וכותב של [חדר ההמתנה] ושל [הגורל] [הווידוי] המפיק והצלם הראשי של [הווידוי]",
    "questionWithBrackets_kn": "[ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಡೆಸ್ಟಿನಿ] [ದ ಕನ್ಫೆಷನ್] ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕನ ತಾರೆ, ಸಂಪಾದಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರರೇ",
    "questionWithBrackets_zh": "是[候诊室]和[命运][忏悔]的执行制片人和电影摄影师的明星、编辑、摄影师和作家吗？",
    "recursionDepth": 39,
    "sparql": "ASK WHERE { wd:Q5265241 wdt:P161 ?x0 . wd:Q6084069 wdt:P161 ?x0 . wd:Q5265241 wdt:P344 ?x0 . wd:Q12813010 wdt:P344 ?x0 . wd:Q6084069 wdt:P344 ?x0 . wd:Q5265241 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q5265241 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 106877,
    "split": "gold_test",
    "en": "Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5265241 is Q5265241\nwdt:P161 is P161\nwd:Q6084069 is Q6084069\nwdt:P161 is P161\nwd:Q5265241 is Q5265241\nwdt:P344 is P344\nwd:Q12813010 is Q12813010\nwdt:P344 is P344\nwd:Q6084069 is Q6084069\nwdt:P344 is P344\nwd:Q5265241 is Q5265241\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q5265241 is Q5265241\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q5265241",
        "mask": "kg:0771"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8937"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:7982"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:0250"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:9876"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5063"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:0175"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1226"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:5428"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1408"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:8253"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2713"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:0275"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7811"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:4489"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2309"
      },
      {
        "uri": "wd:Q5265241",
        "mask": "kg:2942"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5875"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:4263"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2168"
      }
    ],
    "masked": "Translate the question “Was a star , editor , cinematographer , and writer of The Waiting Room and Destiny The Confession 's executive producer and cinematographer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2942 is Q5265241\nkg:0250 is P161\nkg:4263 is Q6084069\nkg:0250 is P161\nkg:2942 is Q5265241\nkg:1408 is P344\nkg:4489 is Q12813010\nkg:1408 is P344\nkg:4263 is Q6084069\nkg:1408 is P344\nkg:2942 is Q5265241\nkg:7811 is P1040\nkg:4263 is Q6084069\nkg:7811 is P1040\nkg:4489 is Q12813010\nkg:2309 is P1431\nkg:2942 is Q5265241\nkg:2168 is P58\nkg:4263 is Q6084069\nkg:2168 is P58"
  },
  {
    "CFQquestionIdx": 34423,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film editor 's spouse write and edit M0 , M1 , M2 , M3 , and M4",
    "questionPatternModEntities_he": "האם בן הזוג של עורך סרטים כתב וערך את M0 , M1 , M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರ ಸಂಗಾತಿಯು M0 , M1 , M2 , M3 , ಮತ್ತು M4 ಅನ್ನು ಬರೆದು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影剪辑师的配偶是否编写和剪辑了 M0、M1、M2、M3 和 M4？",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film editor 's spouse write and edit [The City Tramp] , [Katzelmacher] , [Why Does Herr R. Run Amok?] , [Whity] , and [In a Year of 13 Moons]",
    "questionWithBrackets_he": "האם בן זוג של עורך סרטים כתב וערך את [נווד העיר], [כצלמאכר], [מדוע מר ר&#39; משתולל?], [למה] ו[בשנה של 13 ירחים]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ಸಂಪಾದಕರ ಸಂಗಾತಿಯು [ದಿ ಸಿಟಿ ಟ್ರ್ಯಾಂಪ್] , [ಕಟ್ಜೆಲ್ಮಾಕರ್] , [ಏಕೆ ಹೆರ್ ಆರ್. ಅಮೋಕ್ ಅನ್ನು ರನ್ ಮಾಡುತ್ತಾನೆ?] , [ವೈಟಿ] , ಮತ್ತು [ಇನ್ ಎ ಇಯರ್ ಆಫ್ 13 ಮೂನ್ಸ್] ಬರೆದು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影剪辑师的配偶是否编写和编辑了[城市流浪汉]、[Katzelmacher]、[R. Herr 先生为何横冲直撞？]、[Whity] 和[13 个月亮的年份]？",
    "recursionDepth": 39,
    "sparql": "ASK WHERE { wd:Q878673 wdt:P1040 ?x0 . wd:Q567519 wdt:P1040 ?x0 . wd:Q543382 wdt:P1040 ?x0 . wd:Q570483 wdt:P1040 ?x0 . wd:Q327427 wdt:P1040 ?x0 . wd:Q878673 wdt:P58 ?x0 . wd:Q567519 wdt:P58 ?x0 . wd:Q543382 wdt:P58 ?x0 . wd:Q570483 wdt:P58 ?x0 . wd:Q327427 wdt:P58 ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P106 wd:Q7042855 . FILTER ( ?x0 != ?x1 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P106 wd:Q7042855 .\nFILTER ( ?x0 != ?x1 )\n}",
    "id": 34423,
    "split": "gold_test",
    "en": "Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q878673 is Q878673\nwdt:P1040 is P1040\nwd:Q567519 is Q567519\nwdt:P1040 is P1040\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q878673 is Q878673\nwdt:P58 is P58\nwd:Q567519 is Q567519\nwdt:P58 is P58\nwd:Q543382 is Q543382\nwdt:P58 is P58\nwd:Q570483 is Q570483\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58\nwdt:P26 is P26\nwdt:P106 is P106\nwd:Q7042855 is Q7042855",
    "masks": [
      {
        "uri": "wd:Q878673",
        "mask": "kg:4402"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3766"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:6099"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2988"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:2068"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5642"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:0864"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5621"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:7724"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4179"
      },
      {
        "uri": "wd:Q878673",
        "mask": "kg:8637"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8846"
      },
      {
        "uri": "wd:Q567519",
        "mask": "kg:7702"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6274"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:9166"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6524"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:4367"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7258"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:4861"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3176"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9872"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:6727"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:6831"
      }
    ],
    "masked": "Translate the question “Did a film editor 's spouse write and edit The City Tramp , Katzelmacher , Why Does Herr R. Run Amok? , Whity , and In a Year of 13 Moons” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8637 is Q878673\nkg:4179 is P1040\nkg:7702 is Q567519\nkg:4179 is P1040\nkg:9166 is Q543382\nkg:4179 is P1040\nkg:4367 is Q570483\nkg:4179 is P1040\nkg:4861 is Q327427\nkg:4179 is P1040\nkg:8637 is Q878673\nkg:3176 is P58\nkg:7702 is Q567519\nkg:3176 is P58\nkg:9166 is Q543382\nkg:3176 is P58\nkg:4367 is Q570483\nkg:3176 is P58\nkg:4861 is Q327427\nkg:3176 is P58\nkg:9872 is P26\nkg:6727 is P106\nkg:6831 is Q7042855"
  },
  {
    "CFQquestionIdx": 154421,
    "expectedResponse": [
      "Leni Riefenstahl"
    ],
    "questionPatternModEntities": "What female film director edited , wrote , and directed M0 , M1 , and M2",
    "questionPatternModEntities_he": "איזו במאית קולנוע ערכה, כתבה וביימה את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "ಯಾವ ಮಹಿಳಾ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು M0, M1 ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2是哪位女电影导演剪辑、编剧、导演的？",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What female film director edited , wrote , and directed [Tag der Freiheit: Unsere Wehrmacht] , [Olympia] , and [Triumph of the Will]",
    "questionWithBrackets_he": "איזו במאית קולנוע ערכה, כתבה וביימה את [יום החירות: הוורמאכט שלנו], [אולימפיה] ו[ניצחון הרצון]",
    "questionWithBrackets_kn": "ಯಾವ ಮಹಿಳಾ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕಿ [ಫ್ರೀಡಮ್ ಡೇ: ಅವರ್ ವೆರ್ಮಾಚ್ಟ್], [ಒಲಿಂಪಿಯಾ] ಮತ್ತು [ಟ್ರಯಂಫ್ ಆಫ್ ದಿ ವಿಲ್] ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "《自由日：我们的国防军》、《奥林匹亚》和《意志的胜利》是哪位女电影导演剪辑、编剧和导演的？",
    "recursionDepth": 39,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q156497 wdt:P57 ?x0 . wd:Q158069 wdt:P57 ?x0 . wd:Q497617 wdt:P57 ?x0 . wd:Q156497 wdt:P1040 ?x0 . wd:Q158069 wdt:P1040 ?x0 . wd:Q497617 wdt:P1040 ?x0 . wd:Q156497 wdt:P58 ?x0 . wd:Q158069 wdt:P58 ?x0 . wd:Q497617 wdt:P58 ?x0 . ?x0 wdt:P21 wd:Q6581072 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P21 wd:Q6581072\n}",
    "id": 154421,
    "split": "gold_test",
    "en": "What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will",
    "results": [
      [
        "wd:Q55415"
      ]
    ],
    "direct": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q156497 is Q156497\nwdt:P57 is P57\nwd:Q158069 is Q158069\nwdt:P57 is P57\nwd:Q497617 is Q497617\nwdt:P57 is P57\nwd:Q156497 is Q156497\nwdt:P1040 is P1040\nwd:Q158069 is Q158069\nwdt:P1040 is P1040\nwd:Q497617 is Q497617\nwdt:P1040 is P1040\nwd:Q156497 is Q156497\nwdt:P58 is P58\nwd:Q158069 is Q158069\nwdt:P58 is P58\nwd:Q497617 is Q497617\nwdt:P58 is P58\nwdt:P21 is P21\nwd:Q6581072 is Q6581072",
    "masks": [
      {
        "uri": "wd:Q156497",
        "mask": "kg:8074"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8484"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:4558"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2883"
      },
      {
        "uri": "wd:Q497617",
        "mask": "kg:4284"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2542"
      },
      {
        "uri": "wd:Q156497",
        "mask": "kg:2607"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5710"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:1330"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0716"
      },
      {
        "uri": "wd:Q497617",
        "mask": "kg:0975"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0928"
      },
      {
        "uri": "wd:Q156497",
        "mask": "kg:0298"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6017"
      },
      {
        "uri": "wd:Q158069",
        "mask": "kg:2814"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6641"
      },
      {
        "uri": "wd:Q497617",
        "mask": "kg:9872"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5041"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:0937"
      },
      {
        "uri": "wd:Q6581072",
        "mask": "kg:3015"
      }
    ],
    "masked": "Translate the question “What female film director edited , wrote , and directed Tag der Freiheit: Unsere Wehrmacht , Olympia , and Triumph of the Will” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0298 is Q156497\nkg:2542 is P57\nkg:2814 is Q158069\nkg:2542 is P57\nkg:9872 is Q497617\nkg:2542 is P57\nkg:0298 is Q156497\nkg:0928 is P1040\nkg:2814 is Q158069\nkg:0928 is P1040\nkg:9872 is Q497617\nkg:0928 is P1040\nkg:0298 is Q156497\nkg:5041 is P58\nkg:2814 is Q158069\nkg:5041 is P58\nkg:9872 is Q497617\nkg:5041 is P58\nkg:0937 is P21\nkg:3015 is Q6581072"
  },
  {
    "CFQquestionIdx": 186735,
    "expectedResponse": [
      "George A. Romero"
    ],
    "questionPatternModEntities": "What writer and director of M0 , M1 , M2 , and M3 was a Canadian editor of M5",
    "questionPatternModEntities_he": "איזה סופר ובמאי של M0, M1, M2 ו-M3 היה עורך קנדי של M5",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ನಿರ್ದೇಶಕರು M5 ನ ಕೆನಡಾದ ಸಂಪಾದಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0、M1、M2、M3的哪个作家和导演是M5的加拿大编辑？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "What writer and director of [Day of the Dead] , [Monkey Shines] , [Dawn of the Dead] , and [Survival of the Dead] was a Canadian editor of [The Crazies]",
    "questionWithBrackets_he": "איזה סופר ובמאי של [יום המתים], [קוף זורח], [שחר המתים] ו[הישרדות המתים] היה עורך קנדי של [המשוגעים]",
    "questionWithBrackets_kn": "[ಡೇ ಆಫ್ ದಿ ಡೆಡ್] , [ಮಂಕಿ ಶೈನ್ಸ್] , [ಡಾನ್ ಆಫ್ ದಿ ಡೆಡ್] ಮತ್ತು [ಸರ್ವೈವಲ್ ಆಫ್ ದಿ ಡೆಡ್] ಯಾವ ಬರಹಗಾರ ಮತ್ತು ನಿರ್ದೇಶಕರು [ದಿ ಕ್ರೇಜೀಸ್] ನ ಕೆನಡಾದ ಸಂಪಾದಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[亡灵节]、[猴子闪耀]、[亡灵黎明]和[亡灵生存]的编剧和导演是[疯狂]的加拿大编辑？",
    "recursionDepth": 39,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1277329 wdt:P57 ?x0 . wd:Q219170 wdt:P57 ?x0 . wd:Q219155 wdt:P57 ?x0 . wd:Q198557 wdt:P57 ?x0 . wd:Q627060 wdt:P1040 ?x0 . wd:Q1277329 wdt:P58 ?x0 . wd:Q219170 wdt:P58 ?x0 . wd:Q219155 wdt:P58 ?x0 . wd:Q198557 wdt:P58 ?x0 . ?x0 wdt:P27 wd:Q16 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM5 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\n?x0 wdt:P27 wd:Q16\n}",
    "id": 186735,
    "split": "gold_test",
    "en": "What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies",
    "results": [
      [
        "wd:Q51511"
      ]
    ],
    "direct": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1277329 is Q1277329\nwdt:P57 is P57\nwd:Q219170 is Q219170\nwdt:P57 is P57\nwd:Q219155 is Q219155\nwdt:P57 is P57\nwd:Q198557 is Q198557\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q1277329 is Q1277329\nwdt:P58 is P58\nwd:Q219170 is Q219170\nwdt:P58 is P58\nwd:Q219155 is Q219155\nwdt:P58 is P58\nwd:Q198557 is Q198557\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q16 is Q16",
    "masks": [
      {
        "uri": "wd:Q1277329",
        "mask": "kg:9353"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8084"
      },
      {
        "uri": "wd:Q219170",
        "mask": "kg:8688"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7709"
      },
      {
        "uri": "wd:Q219155",
        "mask": "kg:2959"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1314"
      },
      {
        "uri": "wd:Q198557",
        "mask": "kg:5020"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3694"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:2009"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3646"
      },
      {
        "uri": "wd:Q1277329",
        "mask": "kg:5339"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6354"
      },
      {
        "uri": "wd:Q219170",
        "mask": "kg:2988"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2411"
      },
      {
        "uri": "wd:Q219155",
        "mask": "kg:8290"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5590"
      },
      {
        "uri": "wd:Q198557",
        "mask": "kg:8721"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4035"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:5370"
      },
      {
        "uri": "wd:Q16",
        "mask": "kg:7793"
      }
    ],
    "masked": "Translate the question “What writer and director of Day of the Dead , Monkey Shines , Dawn of the Dead , and Survival of the Dead was a Canadian editor of The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5339 is Q1277329\nkg:3694 is P57\nkg:2988 is Q219170\nkg:3694 is P57\nkg:8290 is Q219155\nkg:3694 is P57\nkg:8721 is Q198557\nkg:3694 is P57\nkg:2009 is Q627060\nkg:3646 is P1040\nkg:5339 is Q1277329\nkg:4035 is P58\nkg:2988 is Q219170\nkg:4035 is P58\nkg:8290 is Q219155\nkg:4035 is P58\nkg:8721 is Q198557\nkg:4035 is P58\nkg:5370 is P27\nkg:7793 is Q16"
  },
  {
    "CFQquestionIdx": 31761,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a director and executive producer of M4 direct and write M0 , M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם במאי ומפיק בפועל של M4 ביים וכתב את M0 , M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M4 ನ ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು M0, M1, M2 ಮತ್ತು M3 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M4的导演和执行制片人是否指导并编写了M0，M1，M2和M3？",
    "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a director and executive producer of [1911] direct and write [Police Story 2] , [Chinese Zodiac] , [Police Story] , and [The Fearless Hyena]",
    "questionWithBrackets_he": "האם במאי ומפיק בפועל של [1911] ביים וכתב את [סיפור המשטרה 2], [גלגל המזלות הסיני], [סיפור המשטרה] ו[הצבוע חסר הפחד]",
    "questionWithBrackets_kn": "[1911] ನ ನಿರ್ದೇಶಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು [ಪೋಲೀಸ್ ಸ್ಟೋರಿ 2] , [ಚೀನೀ ರಾಶಿಚಕ್ರ] , [ಪೊಲೀಸ್ ಸ್ಟೋರಿ] ಮತ್ತು [ದಿ ಫಿಯರ್‌ಲೆಸ್ ಹೈನಾ] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[1911]的导演兼执行制片人是否导演并编写了[警察故事2]，[十二生肖]，[警察故事]和[无畏的鬣狗]？",
    "recursionDepth": 40,
    "sparql": "ASK WHERE { wd:Q206182 wdt:P57 ?x0 . wd:Q391143 wdt:P57 ?x0 . wd:Q232108 wdt:P57 ?x0 . wd:Q378013 wdt:P57 ?x0 . wd:Q594033 wdt:P57 ?x0 . wd:Q206182 wdt:P1431 ?x0 . wd:Q391143 wdt:P58 ?x0 . wd:Q232108 wdt:P58 ?x0 . wd:Q378013 wdt:P58 ?x0 . wd:Q594033 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM4 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 31761,
    "split": "gold_test",
    "en": "Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q206182 is Q206182\nwdt:P57 is P57\nwd:Q391143 is Q391143\nwdt:P57 is P57\nwd:Q232108 is Q232108\nwdt:P57 is P57\nwd:Q378013 is Q378013\nwdt:P57 is P57\nwd:Q594033 is Q594033\nwdt:P57 is P57\nwd:Q206182 is Q206182\nwdt:P1431 is P1431\nwd:Q391143 is Q391143\nwdt:P58 is P58\nwd:Q232108 is Q232108\nwdt:P58 is P58\nwd:Q378013 is Q378013\nwdt:P58 is P58\nwd:Q594033 is Q594033\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q206182",
        "mask": "kg:8290"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4436"
      },
      {
        "uri": "wd:Q391143",
        "mask": "kg:7824"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9160"
      },
      {
        "uri": "wd:Q232108",
        "mask": "kg:2548"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7942"
      },
      {
        "uri": "wd:Q378013",
        "mask": "kg:1172"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0634"
      },
      {
        "uri": "wd:Q594033",
        "mask": "kg:2852"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0873"
      },
      {
        "uri": "wd:Q206182",
        "mask": "kg:5763"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2592"
      },
      {
        "uri": "wd:Q391143",
        "mask": "kg:0654"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9303"
      },
      {
        "uri": "wd:Q232108",
        "mask": "kg:8594"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4996"
      },
      {
        "uri": "wd:Q378013",
        "mask": "kg:6340"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5151"
      },
      {
        "uri": "wd:Q594033",
        "mask": "kg:1543"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7013"
      }
    ],
    "masked": "Translate the question “Did a director and executive producer of 1911 direct and write Police Story 2 , Chinese Zodiac , Police Story , and The Fearless Hyena” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5763 is Q206182\nkg:0873 is P57\nkg:0654 is Q391143\nkg:0873 is P57\nkg:8594 is Q232108\nkg:0873 is P57\nkg:6340 is Q378013\nkg:0873 is P57\nkg:1543 is Q594033\nkg:0873 is P57\nkg:5763 is Q206182\nkg:2592 is P1431\nkg:0654 is Q391143\nkg:7013 is P58\nkg:8594 is Q232108\nkg:7013 is P58\nkg:6340 is Q378013\nkg:7013 is P58\nkg:1543 is Q594033\nkg:7013 is P58"
  },
  {
    "CFQquestionIdx": 77631,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 's founder and employee employed by M1 and M2 and employed by M3 and M4",
    "questionPatternModEntities_he": "האם המייסד והעובד של M0 הועסק על ידי M1 ו-M2 והועסק על ידי M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ನ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿ M1 ಮತ್ತು M2 ನಿಂದ ಉದ್ಯೋಗಿಯಾಗಿದ್ದರೇ ಮತ್ತು M3 ಮತ್ತು M4 ನಿಂದ ಉದ್ಯೋಗಿಯಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0 的创始人和雇员是否受雇于 M1 和 M2，受雇于 M3 和 M4？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "Was [Open Data Institute] 's founder and employee employed by [CERN] and [World Wide Web Consortium] and employed by [School of Electronics and Computer Science, University of Southampton] and [Plessey]",
    "questionWithBrackets_he": "האם המייסד והעובד של [Open Data Institute] הועסק על ידי [CERN] ו[World Wide Web Consortium] והועסק על ידי [בית הספר לאלקטרוניקה ומדעי המחשב, אוניברסיטת סאות&#39;המפטון] ו-[Plessey]",
    "questionWithBrackets_kn": "[ಓಪನ್ ಡಾಟಾ ಇನ್ಸ್ಟಿಟ್ಯೂಟ್] ನ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿಯನ್ನು [CERN] ಮತ್ತು [ವರ್ಲ್ಡ್ ವೈಡ್ ವೆಬ್ ಕನ್ಸೋರ್ಟಿಯಂ] ಮತ್ತು [ಸ್ಕೂಲ್ ಆಫ್ ಎಲೆಕ್ಟ್ರಾನಿಕ್ಸ್ ಮತ್ತು ಕಂಪ್ಯೂಟರ್ ಸೈನ್ಸ್, ಸೌತಾಂಪ್ಟನ್ ವಿಶ್ವವಿದ್ಯಾಲಯ] ಮತ್ತು [ಪ್ಲೆಸ್ಸೆ] ನೇಮಕ ಮಾಡಿಕೊಂಡಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Open Data Institute] 的创始人和雇员是否受雇于 [CERN] 和 [万维网联盟]，并受雇于 [南安普敦大学电子与计算机科学学院] 和 [普莱西]？",
    "recursionDepth": 40,
    "sparql": "ASK WHERE { wd:Q7095994 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q42944 . ?x0 wdt:P108 wd:Q7095994 . ?x0 wdt:P108 wd:Q7204713 . ?x0 wdt:P108 wd:Q7432436 . ?x0 wdt:P108 wd:Q37033 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P108 M0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4\n}",
    "id": 77631,
    "split": "gold_test",
    "en": "Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033",
    "masks": [
      {
        "uri": "wd:Q7095994",
        "mask": "kg:0885"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:9047"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5390"
      },
      {
        "uri": "wd:Q42944",
        "mask": "kg:1709"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7866"
      },
      {
        "uri": "wd:Q7095994",
        "mask": "kg:4051"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3885"
      },
      {
        "uri": "wd:Q7204713",
        "mask": "kg:3317"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1788"
      },
      {
        "uri": "wd:Q7432436",
        "mask": "kg:4345"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:0273"
      },
      {
        "uri": "wd:Q37033",
        "mask": "kg:6801"
      }
    ],
    "masked": "Translate the question “Was Open Data Institute 's founder and employee employed by CERN and World Wide Web Consortium and employed by School of Electronics and Computer Science, University of Southampton and Plessey” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4051 is Q7095994\nkg:9047 is P112\nkg:0273 is P108\nkg:1709 is Q42944\nkg:0273 is P108\nkg:4051 is Q7095994\nkg:0273 is P108\nkg:3317 is Q7204713\nkg:0273 is P108\nkg:4345 is Q7432436\nkg:0273 is P108\nkg:6801 is Q37033"
  },
  {
    "CFQquestionIdx": 155066,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What film did M1 , M2 , and M3 write , edit , produce , and direct",
    "questionPatternModEntities_he": "איזה סרט M1, M2 ו-M3 כתבו, ערכו, הפיקו ובימו",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ಬರೆದರು , ಸಂಪಾದಿಸಿದರು , ನಿರ್ಮಿಸಿದರು ಮತ್ತು ನಿರ್ದೇಶಿಸಿದರು",
    "questionPatternModEntities_zh": "M1、M2 和 M3 编写、编辑、制作和导演了哪些电影？",
    "questionTemplate": "What [NP_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "questionWithBrackets": "What film did [Jens Jørgen Thorsen] , [Ole John] , and [Jørgen Leth] write , edit , produce , and direct",
    "questionWithBrackets_he": "איזה סרט כתבו, ערכו, הפיקו ובימוי [Jens Jørgen Thorsen], [Ole John] ו-[Jørgen Leth]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್], [ಓಲೆ ಜಾನ್] ಮತ್ತು [ಜೋರ್ಗೆನ್ ಲೆತ್] ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ಬರೆದಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Jens Jørgen Thorsen]、[Ole John] 和 [Jørgen Leth] 编写、编辑、制作和导演了哪部电影？",
    "recursionDepth": 40,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P162|wdt:P272 wd:Q562108 . ?x0 wdt:P162|wdt:P272 wd:Q1687239 . ?x0 wdt:P162|wdt:P272 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 155066,
    "split": "gold_test",
    "en": "What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:1256"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:3705"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6836"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2877"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6825"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7403"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1046"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1003"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9869"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2346"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8659"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7576"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3307"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:6287"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:6925"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2637"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2227"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:3167"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7048"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:7306"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:7279"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7301"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9788"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1712"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8798"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0822"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3803"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3731"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7741"
      }
    ],
    "masked": "Translate the question “What film did Jens Jørgen Thorsen , Ole John , and Jørgen Leth write , edit , produce , and direct” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1256 is P31\nkg:3705 is Q11424\nkg:1046 is P57\nkg:8798 is Q562108\nkg:1046 is P57\nkg:3803 is Q1687239\nkg:1046 is P57\nkg:7741 is Q35979475\nkg:3307 is P1040\nkg:8798 is Q562108\nkg:3307 is P1040\nkg:3803 is Q1687239\nkg:3307 is P1040\nkg:7741 is Q35979475\nkg:7279 is P162\nkg:7301 is P272\nkg:8798 is Q562108\nkg:7279 is P162\nkg:7301 is P272\nkg:3803 is Q1687239\nkg:7279 is P162\nkg:7301 is P272\nkg:7741 is Q35979475\nkg:3731 is P58\nkg:8798 is Q562108\nkg:3731 is P58\nkg:3803 is Q1687239\nkg:3731 is P58\nkg:7741 is Q35979475"
  },
  {
    "CFQquestionIdx": 187053,
    "expectedResponse": [
      "Robert Rodriguez"
    ],
    "questionPatternModEntities": "What writer , cinematographer , star , editor , and director of M0 and M1 was a executive producer of M2",
    "questionPatternModEntities_he": "איזה סופר, צלם קולנוע, כוכב, עורך ובמאי של M0 ו-M1 היה מפיק בפועל של M2",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M2 ನ ಕಾರ್ಯಕಾರಿ ನಿರ್ಮಾಪಕರಾಗಿದ್ದರು",
    "questionPatternModEntities_zh": "M0和M1的哪个作家、摄影师、明星、编辑和导演是M2的执行制片人？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] was a [ROLE_SIMPLE] of [entity]",
    "questionWithBrackets": "What writer , cinematographer , star , editor , and director of [Sin City] and [The Adventures of Sharkboy and Lavagirl in 3-D] was a executive producer of [From Dusk till Dawn: The Series]",
    "questionWithBrackets_he": "איזה סופר, צלם קולנוע, כוכב, עורך ובמאי של [עיר החטאים] ו[הרפתקאותיהם של Sharkboy and Lavagirl in 3-D] היה מפיק בפועל של [From Dusk to Dawn: The Series]",
    "questionWithBrackets_kn": "[ಸಿನ್ ಸಿಟಿ] ಮತ್ತು [ದಿ ಅಡ್ವೆಂಚರ್ಸ್ ಆಫ್ ಶಾರ್ಕ್‌ಬಾಯ್ ಮತ್ತು ಲಾವಾಗರ್ಲ್ ಇನ್ 3-ಡಿ] ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ, ಸಂಪಾದಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [ಮುಸ್ಸಂಜೆಯಿಂದ ಬೆಳಗಿನವರೆಗೆ: ದಿ ಸೀರೀಸ್] ನ ಕಾರ್ಯಕಾರಿ ನಿರ್ಮಾಪಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[罪恶之城] 和 [鲨鱼男孩和熔岩女孩历险记 3D] 的哪位作家、摄影师、明星、编辑和导演是 [从黄昏到黎明：系列] 的执行制片人？",
    "recursionDepth": 40,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q192115 wdt:P161 ?x0 . wd:Q656357 wdt:P161 ?x0 . wd:Q192115 wdt:P344 ?x0 . wd:Q656357 wdt:P344 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q656357 wdt:P57 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q656357 wdt:P1040 ?x0 . wd:Q15622760 wdt:P1431 ?x0 . wd:Q192115 wdt:P58 ?x0 . wd:Q656357 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 187053,
    "split": "gold_test",
    "en": "What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series",
    "results": [
      [
        "wd:Q47284"
      ]
    ],
    "direct": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P344 is P344\nwd:Q656357 is Q656357\nwdt:P344 is P344\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q656357 is Q656357\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q15622760 is Q15622760\nwdt:P1431 is P1431\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q192115",
        "mask": "kg:3481"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:5935"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6834"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1179"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:6617"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2605"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:0476"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2970"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:5418"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9575"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:7673"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3401"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:3081"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7727"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:2008"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0409"
      },
      {
        "uri": "wd:Q15622760",
        "mask": "kg:4772"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4058"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:4083"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2903"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:5468"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0729"
      }
    ],
    "masked": "Translate the question “What writer , cinematographer , star , editor , and director of Sin City and The Adventures of Sharkboy and Lavagirl in 3-D was a executive producer of From Dusk till Dawn: The Series” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4083 is Q192115\nkg:1179 is P161\nkg:5468 is Q656357\nkg:1179 is P161\nkg:4083 is Q192115\nkg:2970 is P344\nkg:5468 is Q656357\nkg:2970 is P344\nkg:4083 is Q192115\nkg:3401 is P57\nkg:5468 is Q656357\nkg:3401 is P57\nkg:4083 is Q192115\nkg:0409 is P1040\nkg:5468 is Q656357\nkg:0409 is P1040\nkg:4772 is Q15622760\nkg:4058 is P1431\nkg:4083 is Q192115\nkg:0729 is P58\nkg:5468 is Q656357\nkg:0729 is P58"
  },
  {
    "CFQquestionIdx": 31910,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a director , cinematographer , and writer of M3 write and edit M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם במאי, צלם קולנוע וכותב של M3 כתב וערך את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ನಿರ್ದೇಶಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರ M0, M1 ಮತ್ತು M2 ಅನ್ನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3的导演、摄影师和作家是否编写和编辑了M0、M1和M2？",
    "questionTemplate": "Did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a director , cinematographer , and writer of [This Night] write and edit [Rio das Mortes] , [Lili Marleen] , and [Whity]",
    "questionWithBrackets_he": "האם במאי, צלם קולנוע וכותב של [הלילה הזה] כתב וערך את [ריו דאס מורטס], [לילי מרלין] ו[Whity]",
    "questionWithBrackets_kn": "[ದಿಸ್ ನೈಟ್] ನ ನಿರ್ದೇಶಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ಬರಹಗಾರರು [ರಿಯೊ ದಾಸ್ ಮೊರ್ಟೆಸ್] , [ಲಿಲಿ ಮರ್ಲೀನ್] ಮತ್ತು [ವೈಟಿ] ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[今夜] 的导演、摄影师和作家是否编写和编辑了 [Rio das Mortes]、[Lili Marleen] 和 [Whity]？",
    "recursionDepth": 41,
    "sparql": "ASK WHERE { wd:Q1699716 wdt:P344 ?x0 . wd:Q1699716 wdt:P57 ?x0 . wd:Q823767 wdt:P1040 ?x0 . wd:Q686125 wdt:P1040 ?x0 . wd:Q327427 wdt:P1040 ?x0 . wd:Q823767 wdt:P58 ?x0 . wd:Q686125 wdt:P58 ?x0 . wd:Q1699716 wdt:P58 ?x0 . wd:Q327427 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM3 wdt:P344 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 31910,
    "split": "gold_test",
    "en": "Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1699716 is Q1699716\nwdt:P344 is P344\nwd:Q1699716 is Q1699716\nwdt:P57 is P57\nwd:Q823767 is Q823767\nwdt:P1040 is P1040\nwd:Q686125 is Q686125\nwdt:P1040 is P1040\nwd:Q327427 is Q327427\nwdt:P1040 is P1040\nwd:Q823767 is Q823767\nwdt:P58 is P58\nwd:Q686125 is Q686125\nwdt:P58 is P58\nwd:Q1699716 is Q1699716\nwdt:P58 is P58\nwd:Q327427 is Q327427\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q1699716",
        "mask": "kg:9122"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:7472"
      },
      {
        "uri": "wd:Q1699716",
        "mask": "kg:2798"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2606"
      },
      {
        "uri": "wd:Q823767",
        "mask": "kg:2072"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5485"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:1919"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7240"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:6635"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3585"
      },
      {
        "uri": "wd:Q823767",
        "mask": "kg:7806"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0518"
      },
      {
        "uri": "wd:Q686125",
        "mask": "kg:4632"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2970"
      },
      {
        "uri": "wd:Q1699716",
        "mask": "kg:9214"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8868"
      },
      {
        "uri": "wd:Q327427",
        "mask": "kg:2889"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3260"
      }
    ],
    "masked": "Translate the question “Did a director , cinematographer , and writer of This Night write and edit Rio das Mortes , Lili Marleen , and Whity” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9214 is Q1699716\nkg:7472 is P344\nkg:9214 is Q1699716\nkg:2606 is P57\nkg:7806 is Q823767\nkg:3585 is P1040\nkg:4632 is Q686125\nkg:3585 is P1040\nkg:2889 is Q327427\nkg:3585 is P1040\nkg:7806 is Q823767\nkg:3260 is P58\nkg:4632 is Q686125\nkg:3260 is P58\nkg:9214 is Q1699716\nkg:3260 is P58\nkg:2889 is Q327427\nkg:3260 is P58"
  },
  {
    "CFQquestionIdx": 15097,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M4 's American cinematographer edit , direct , and write M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם צלם הקולנוע האמריקאי של M4 ערך, ביים וכתב את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M4 ನ ಅಮೇರಿಕನ್ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ M0 , M1 , ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M4 的美国电影摄影师是否剪辑、导演和编写了 M0、M1 和 M2？",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did [Night of the Living Dead] 's American cinematographer edit , direct , and write [Martin] , [Season of the Witch] , and [The Crazies]",
    "questionWithBrackets_he": "האם צלם הקולנוע האמריקאי של [ליל המתים החיים] ערך, ביים וכתב את [מרטין], [עונת המכשפה] ו[המשוגעים]",
    "questionWithBrackets_kn": "[ನೈಟ್ ಆಫ್ ದಿ ಲಿವಿಂಗ್ ಡೆಡ್] ನ ಅಮೇರಿಕನ್ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ [ಮಾರ್ಟಿನ್] , [ಸೀಸನ್ ಆಫ್ ದಿ ವಿಚ್] ಮತ್ತು [ದಿ ಕ್ರೇಜೀಸ್] ಅನ್ನು ಸಂಪಾದಿಸಿ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[活死人之夜] 的美国摄影师是否编辑、导演和编写了 [马丁]、[女巫季节] 和 [疯狂]？",
    "recursionDepth": 41,
    "sparql": "ASK WHERE { wd:Q623051 wdt:P344 ?x0 . wd:Q1903317 wdt:P57 ?x0 . wd:Q627060 wdt:P57 ?x0 . wd:Q2520777 wdt:P57 ?x0 . wd:Q1903317 wdt:P1040 ?x0 . wd:Q627060 wdt:P1040 ?x0 . wd:Q2520777 wdt:P1040 ?x0 . wd:Q1903317 wdt:P58 ?x0 . wd:Q627060 wdt:P58 ?x0 . wd:Q2520777 wdt:P58 ?x0 . ?x0 wdt:P27 wd:Q30 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM4 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P27 wd:Q30\n}",
    "id": 15097,
    "split": "gold_test",
    "en": "Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q623051 is Q623051\nwdt:P344 is P344\nwd:Q1903317 is Q1903317\nwdt:P57 is P57\nwd:Q627060 is Q627060\nwdt:P57 is P57\nwd:Q2520777 is Q2520777\nwdt:P57 is P57\nwd:Q1903317 is Q1903317\nwdt:P1040 is P1040\nwd:Q627060 is Q627060\nwdt:P1040 is P1040\nwd:Q2520777 is Q2520777\nwdt:P1040 is P1040\nwd:Q1903317 is Q1903317\nwdt:P58 is P58\nwd:Q627060 is Q627060\nwdt:P58 is P58\nwd:Q2520777 is Q2520777\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q30 is Q30",
    "masks": [
      {
        "uri": "wd:Q623051",
        "mask": "kg:8669"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6660"
      },
      {
        "uri": "wd:Q1903317",
        "mask": "kg:1339"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9798"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:1911"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9416"
      },
      {
        "uri": "wd:Q2520777",
        "mask": "kg:4223"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4862"
      },
      {
        "uri": "wd:Q1903317",
        "mask": "kg:3472"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1899"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:3705"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8229"
      },
      {
        "uri": "wd:Q2520777",
        "mask": "kg:4291"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0089"
      },
      {
        "uri": "wd:Q1903317",
        "mask": "kg:0518"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7355"
      },
      {
        "uri": "wd:Q627060",
        "mask": "kg:6413"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2819"
      },
      {
        "uri": "wd:Q2520777",
        "mask": "kg:6771"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7206"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:8398"
      },
      {
        "uri": "wd:Q30",
        "mask": "kg:1420"
      }
    ],
    "masked": "Translate the question “Did Night of the Living Dead 's American cinematographer edit , direct , and write Martin , Season of the Witch , and The Crazies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8669 is Q623051\nkg:6660 is P344\nkg:0518 is Q1903317\nkg:4862 is P57\nkg:6413 is Q627060\nkg:4862 is P57\nkg:6771 is Q2520777\nkg:4862 is P57\nkg:0518 is Q1903317\nkg:0089 is P1040\nkg:6413 is Q627060\nkg:0089 is P1040\nkg:6771 is Q2520777\nkg:0089 is P1040\nkg:0518 is Q1903317\nkg:7206 is P58\nkg:6413 is Q627060\nkg:7206 is P58\nkg:6771 is Q2520777\nkg:7206 is P58\nkg:8398 is P27\nkg:1420 is Q30"
  },
  {
    "CFQquestionIdx": 187032,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "What writer , cinematographer , and director of M0 , M1 , and M2 wrote and executive produced M3",
    "questionPatternModEntities_he": "איזה סופר, צלם קולנוע ובמאי של M0, M1 ו-M2 כתב והפיק את M3",
    "questionPatternModEntities_kn": "M0, M1 ಮತ್ತು M2 ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M3 ಅನ್ನು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1和M2的编剧、摄影师和导演是哪位编剧和执行制作M3的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What writer , cinematographer , and director of [Look at Life] , [Anyone Lived in a Pretty How Town] , and [Filmmaker] wrote and executive produced [Star Wars: Episode IV – A New Hope]",
    "questionWithBrackets_he": "איזה סופר, צלם קולנוע ובמאי של [הסתכל על החיים], [כל אחד גר בעיר יפה] ו[יוצר סרטים] כתב והפיק בפועל [מלחמת הכוכבים: פרק IV - תקווה חדשה]",
    "questionWithBrackets_kn": "ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [Look at Life] , [Anyone Lived in a Pretty How Town] , ಮತ್ತು [ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು] [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ IV – ಎ ನ್ಯೂ ಹೋಪ್] ಬರೆದು ನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Look at Life]、[Anyone Lived in a Pretty How Town] 和 [电影制片人] 的编剧、摄影师和导演 [Star Wars: Episode IV – A New Hope] 是哪位编剧和执行制作的？",
    "recursionDepth": 41,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1869678 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q1415127 wdt:P344 ?x0 . wd:Q1869678 wdt:P57 ?x0 . wd:Q613974 wdt:P57 ?x0 . wd:Q1415127 wdt:P57 ?x0 . wd:Q17738 wdt:P1431 ?x0 . wd:Q1869678 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q1415127 wdt:P58 ?x0 . wd:Q17738 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 187032,
    "split": "gold_test",
    "en": "What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1869678 is Q1869678\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q1869678 is Q1869678\nwdt:P57 is P57\nwd:Q613974 is Q613974\nwdt:P57 is P57\nwd:Q1415127 is Q1415127\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q1869678 is Q1869678\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q17738 is Q17738\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q1869678",
        "mask": "kg:1646"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1011"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:4821"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8811"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:9144"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5463"
      },
      {
        "uri": "wd:Q1869678",
        "mask": "kg:0342"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9857"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:6382"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5151"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:0953"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1698"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:3495"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3669"
      },
      {
        "uri": "wd:Q1869678",
        "mask": "kg:5971"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5549"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:0325"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3062"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:7396"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9595"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:3249"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8755"
      }
    ],
    "masked": "Translate the question “What writer , cinematographer , and director of Look at Life , Anyone Lived in a Pretty How Town , and Filmmaker wrote and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5971 is Q1869678\nkg:5463 is P344\nkg:0325 is Q613974\nkg:5463 is P344\nkg:7396 is Q1415127\nkg:5463 is P344\nkg:5971 is Q1869678\nkg:1698 is P57\nkg:0325 is Q613974\nkg:1698 is P57\nkg:7396 is Q1415127\nkg:1698 is P57\nkg:3249 is Q17738\nkg:3669 is P1431\nkg:5971 is Q1869678\nkg:8755 is P58\nkg:0325 is Q613974\nkg:8755 is P58\nkg:7396 is Q1415127\nkg:8755 is P58\nkg:3249 is Q17738\nkg:8755 is P58"
  },
  {
    "CFQquestionIdx": 204922,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "Which film was directed by , produced by , written by , and edited by M1 , M2 , and M3",
    "questionPatternModEntities_he": "איזה סרט ביים, הופק על ידי, נכתב על ידי ונערך על ידי M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影由 M1、M2 和 M3 导演、制作、编剧和剪辑？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed by , produced by , written by , and edited by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "איזה סרט ביים, הופק על ידי, נכתב על ידי ונערך על ידי [Jens Jørgen Thorsen], [Jørgen Leth] ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , [ಜಾರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "哪部电影由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 导演、制作、编剧和剪辑？",
    "recursionDepth": 41,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P162|wdt:P272 wd:Q562108 . ?x0 wdt:P162|wdt:P272 wd:Q1687239 . ?x0 wdt:P162|wdt:P272 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 204922,
    "split": "gold_test",
    "en": "Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:8345"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:6701"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1246"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:3930"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3572"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3636"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3520"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:7437"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6495"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5888"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3891"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5988"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4655"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9893"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:7080"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7618"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7373"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:7822"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:6997"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:1477"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:8770"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4761"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:9434"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0418"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:2031"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6127"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:5305"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1912"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:1040"
      }
    ],
    "masked": "Translate the question “Which film was directed by , produced by , written by , and edited by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8345 is P31\nkg:6701 is Q11424\nkg:3520 is P57\nkg:2031 is Q562108\nkg:3520 is P57\nkg:5305 is Q1687239\nkg:3520 is P57\nkg:1040 is Q35979475\nkg:4655 is P1040\nkg:2031 is Q562108\nkg:4655 is P1040\nkg:5305 is Q1687239\nkg:4655 is P1040\nkg:1040 is Q35979475\nkg:8770 is P162\nkg:4761 is P272\nkg:2031 is Q562108\nkg:8770 is P162\nkg:4761 is P272\nkg:5305 is Q1687239\nkg:8770 is P162\nkg:4761 is P272\nkg:1040 is Q35979475\nkg:1912 is P58\nkg:2031 is Q562108\nkg:1912 is P58\nkg:5305 is Q1687239\nkg:1912 is P58\nkg:1040 is Q35979475"
  },
  {
    "CFQquestionIdx": 94431,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a costume designer that M2 , M3 , M4 , M5 , and M6 were written by and edited by M0",
    "questionPatternModEntities_he": "האם מעצב תלבושות ש- M2 , M3 , M4 , M5 ו- M6 נכתבו על ידי וערכו על ידי M0",
    "questionPatternModEntities_kn": "M2 , M3 , M4 , M5 , ಮತ್ತು M6 ಅನ್ನು M0 ಬರೆದು ಸಂಪಾದಿಸಿದ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರೇ",
    "questionPatternModEntities_zh": "M2、M3、M4、M5、M6是由M0编写和编辑的服装设计师吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] , [entity] , [entity] , [entity] , and [entity] were [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Was a costume designer that [Xavier Dolan] , [Xavier Dolan] , [Xavier Dolan] , [Xavier Dolan] , and [Xavier Dolan] were written by and edited by [Xavier Dolan]",
    "questionWithBrackets_he": "האם מעצב תלבושות ש[חאבייר דולן] , [חאווייר דולן], [חוויאר דולן] , [חוויאר דולן] ו[חאווייר דולן] נכתבו על ידי וערכו על ידי [חבייר דולן]",
    "questionWithBrackets_kn": "[ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] , [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] , [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] , [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] ಮತ್ತು [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] ಅವರು [ಕ್ಸೇವಿಯರ್ ಡೋಲನ್] ಬರೆದ ಮತ್ತು ಸಂಪಾದಿಸಿದ ವಸ್ತ್ರ ವಿನ್ಯಾಸಕರೇ",
    "questionWithBrackets_zh": "[Xavier Dolan]、[Xavier Dolan]、[Xavier Dolan]、[Xavier Dolan] 和[Xavier Dolan] 是由[Xavier Dolan] 编写和编辑的服装设计师吗？",
    "recursionDepth": 42,
    "sparql": "ASK WHERE { wd:Q551861 wdt:P106 wd:Q1323191 . wd:Q3530946 wdt:P1040 wd:Q551861 . wd:Q19885882 wdt:P1040 wd:Q551861 . wd:Q19544249 wdt:P1040 wd:Q551861 . wd:Q2336453 wdt:P1040 wd:Q551861 . wd:Q2615443 wdt:P1040 wd:Q551861 . wd:Q3530946 wdt:P58 wd:Q551861 . wd:Q19885882 wdt:P58 wd:Q551861 . wd:Q19544249 wdt:P58 wd:Q551861 . wd:Q2336453 wdt:P58 wd:Q551861 . wd:Q2615443 wdt:P58 wd:Q551861 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q1323191 .\nM2 wdt:P1040 M0 .\nM3 wdt:P1040 M0 .\nM4 wdt:P1040 M0 .\nM5 wdt:P1040 M0 .\nM6 wdt:P1040 M0 .\nM2 wdt:P58 M0 .\nM3 wdt:P58 M0 .\nM4 wdt:P58 M0 .\nM5 wdt:P58 M0 .\nM6 wdt:P58 M0\n}",
    "id": 94431,
    "split": "gold_test",
    "en": "Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q551861 is Q551861\nwdt:P106 is P106\nwd:Q1323191 is Q1323191\nwd:Q3530946 is Q3530946\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P1040 is P1040\nwd:Q551861 is Q551861\nwd:Q3530946 is Q3530946\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19885882 is Q19885882\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q19544249 is Q19544249\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2336453 is Q2336453\nwdt:P58 is P58\nwd:Q551861 is Q551861\nwd:Q2615443 is Q2615443\nwdt:P58 is P58\nwd:Q551861 is Q551861",
    "masks": [
      {
        "uri": "wd:Q551861",
        "mask": "kg:2197"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:1186"
      },
      {
        "uri": "wd:Q1323191",
        "mask": "kg:6646"
      },
      {
        "uri": "wd:Q3530946",
        "mask": "kg:3837"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3376"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:2855"
      },
      {
        "uri": "wd:Q19885882",
        "mask": "kg:6265"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2317"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:7033"
      },
      {
        "uri": "wd:Q19544249",
        "mask": "kg:6748"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1874"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:4298"
      },
      {
        "uri": "wd:Q2336453",
        "mask": "kg:9402"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9570"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:2034"
      },
      {
        "uri": "wd:Q2615443",
        "mask": "kg:4198"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1950"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:3868"
      },
      {
        "uri": "wd:Q3530946",
        "mask": "kg:0579"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0013"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:6750"
      },
      {
        "uri": "wd:Q19885882",
        "mask": "kg:8053"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0399"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:4825"
      },
      {
        "uri": "wd:Q19544249",
        "mask": "kg:8736"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0848"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:9403"
      },
      {
        "uri": "wd:Q2336453",
        "mask": "kg:9677"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4131"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:2606"
      },
      {
        "uri": "wd:Q2615443",
        "mask": "kg:6289"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2196"
      },
      {
        "uri": "wd:Q551861",
        "mask": "kg:4747"
      }
    ],
    "masked": "Translate the question “Was a costume designer that Xavier Dolan , Xavier Dolan , Xavier Dolan , Xavier Dolan , and Xavier Dolan were written by and edited by Xavier Dolan” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4747 is Q551861\nkg:1186 is P106\nkg:6646 is Q1323191\nkg:0579 is Q3530946\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:1950 is P1040\nkg:4747 is Q551861\nkg:0579 is Q3530946\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8053 is Q19885882\nkg:2196 is P58\nkg:4747 is Q551861\nkg:8736 is Q19544249\nkg:2196 is P58\nkg:4747 is Q551861\nkg:9677 is Q2336453\nkg:2196 is P58\nkg:4747 is Q551861\nkg:6289 is Q2615443\nkg:2196 is P58\nkg:4747 is Q551861"
  },
  {
    "CFQquestionIdx": 34934,
    "expectedResponse": true,
    "questionPatternModEntities": "Did a film producer write , executive produce , edit , and direct M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מפיק סרטים כתב, הפיק, ערך וביים את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ಬರೆದಿದ್ದಾರೆಯೇ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "电影制片人是否编写、执行制作、编辑和导演 M1、M2 和 M3？",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer write , executive produce , edit , and direct [Pietà] , [Moebius] , and [Dream]",
    "questionWithBrackets_he": "האם מפיק סרטים כתב, הפיק בפועל, ערך וביים את [Pietà], [Moebius] ו-[Dream]",
    "questionWithBrackets_kn": "ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ಪಿಯೆಟಾ] , [ಮೊಬಿಯಸ್] ಮತ್ತು [ಕನಸು] ಬರೆದಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "电影制片人是否编写、执行制作、编辑和导演 [Pietà]、[Moebius] 和 [Dream]？",
    "recursionDepth": 42,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q13471372 wdt:P57 ?x0 . wd:Q483197 wdt:P57 ?x0 . wd:Q484679 wdt:P57 ?x0 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q484679 wdt:P1040 ?x0 . wd:Q13471372 wdt:P1431 ?x0 . wd:Q483197 wdt:P1431 ?x0 . wd:Q484679 wdt:P1431 ?x0 . wd:Q13471372 wdt:P58 ?x0 . wd:Q483197 wdt:P58 ?x0 . wd:Q484679 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM3 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 34934,
    "split": "gold_test",
    "en": "Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q483197 is Q483197\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:8097"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:6118"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:4776"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6597"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:1611"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0208"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:1403"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4465"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:8045"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6436"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:8792"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8073"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:6825"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8262"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:4029"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1170"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:0789"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3123"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:9088"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5247"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:7873"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9881"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:1013"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2375"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:3663"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8907"
      }
    ],
    "masked": "Translate the question “Did a film producer write , executive produce , edit , and direct Pietà , Moebius , and Dream” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8097 is P106\nkg:6118 is Q3282637\nkg:7873 is Q13471372\nkg:4465 is P57\nkg:1013 is Q483197\nkg:4465 is P57\nkg:3663 is Q484679\nkg:4465 is P57\nkg:7873 is Q13471372\nkg:8262 is P1040\nkg:1013 is Q483197\nkg:8262 is P1040\nkg:3663 is Q484679\nkg:8262 is P1040\nkg:7873 is Q13471372\nkg:5247 is P1431\nkg:1013 is Q483197\nkg:5247 is P1431\nkg:3663 is Q484679\nkg:5247 is P1431\nkg:7873 is Q13471372\nkg:8907 is P58\nkg:1013 is Q483197\nkg:8907 is P58\nkg:3663 is Q484679\nkg:8907 is P58"
  },
  {
    "CFQquestionIdx": 168446,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "What was a film that was edited by , written by , and directed by M1 , M2 , and M3",
    "questionPatternModEntities_he": "מהו סרט שנערך על ידי , נכתב על ידי וביים על ידי M1 , M2 ו- M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರಿಂದ ಎಡಿಟ್ ಮಾಡಿದ, ಬರೆದ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionPatternModEntities_zh": "由 M1、M2 和 M3 编辑、编写和导演的电影是什么？",
    "questionTemplate": "What was a [NP_SIMPLE] that was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was a film that was edited by , written by , and directed by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "מה היה סרט שנערך על ידי , נכתב על ידי , וביים על ידי [Jens Jørgen Thorsen], [Jørgen Leth] ו [Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಅವರಿಂದ ಸಂಪಾದಿಸಲ್ಪಟ್ಟ, ಬರೆದ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionWithBrackets_zh": "由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 编辑、编剧和导演的电影是什么？",
    "recursionDepth": 42,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 168446,
    "split": "gold_test",
    "en": "What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:2411"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:2351"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5850"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5690"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1759"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4693"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6698"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2513"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5555"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:1566"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7582"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:2286"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9328"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2120"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7820"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:0132"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:6606"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:4817"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0538"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:3129"
      }
    ],
    "masked": "Translate the question “What was a film that was edited by , written by , and directed by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2411 is P31\nkg:2351 is Q11424\nkg:6698 is P57\nkg:0132 is Q562108\nkg:6698 is P57\nkg:4817 is Q1687239\nkg:6698 is P57\nkg:3129 is Q35979475\nkg:9328 is P1040\nkg:0132 is Q562108\nkg:9328 is P1040\nkg:4817 is Q1687239\nkg:9328 is P1040\nkg:3129 is Q35979475\nkg:0538 is P58\nkg:0132 is Q562108\nkg:0538 is P58\nkg:4817 is Q1687239\nkg:0538 is P58\nkg:3129 is Q35979475"
  },
  {
    "CFQquestionIdx": 204913,
    "expectedResponse": [
      "Stop for Bud"
    ],
    "questionPatternModEntities": "Which film was directed by , edited by , written by , and produced by M1 , M2 , and M3",
    "questionPatternModEntities_he": "איזה סרט ביים על ידי, נערך על ידי, נכתב על ידי והפיק על ידי M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "哪部电影由 M1、M2 和 M3 导演、编辑、编剧和制作？",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which film was directed by , edited by , written by , and produced by [Jens Jørgen Thorsen] , [Jørgen Leth] , and [Ole John]",
    "questionWithBrackets_he": "איזה סרט ביים על ידי, נערך על ידי, נכתב על ידי, והפיק על ידי [Jens Jørgen Thorsen], [Jørgen Leth] ו[Ole John]",
    "questionWithBrackets_kn": "[ಜೆನ್ಸ್ ಜಾರ್ಗೆನ್ ಥೋರ್ಸೆನ್] , [ಜೋರ್ಗೆನ್ ಲೆತ್] ಮತ್ತು [ಓಲೆ ಜಾನ್] ಅವರು ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "哪部电影由 [Jens Jørgen Thorsen]、[Jørgen Leth] 和 [Ole John] 导演、编辑、编剧和制作？",
    "recursionDepth": 42,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q562108 . ?x0 wdt:P57 wd:Q1687239 . ?x0 wdt:P57 wd:Q35979475 . ?x0 wdt:P1040 wd:Q562108 . ?x0 wdt:P1040 wd:Q1687239 . ?x0 wdt:P1040 wd:Q35979475 . ?x0 wdt:P162|wdt:P272 wd:Q562108 . ?x0 wdt:P162|wdt:P272 wd:Q1687239 . ?x0 wdt:P162|wdt:P272 wd:Q35979475 . ?x0 wdt:P58 wd:Q562108 . ?x0 wdt:P58 wd:Q1687239 . ?x0 wdt:P58 wd:Q35979475 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1040 M1 .\n?x0 wdt:P1040 M2 .\n?x0 wdt:P1040 M3 .\n?x0 wdt:P162|wdt:P272 M1 .\n?x0 wdt:P162|wdt:P272 M2 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 204913,
    "split": "gold_test",
    "en": "Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John",
    "results": [
      [
        "wd:Q20729551"
      ]
    ],
    "direct": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q562108 is Q562108\nwdt:P57 is P57\nwd:Q1687239 is Q1687239\nwdt:P57 is P57\nwd:Q35979475 is Q35979475\nwdt:P1040 is P1040\nwd:Q562108 is Q562108\nwdt:P1040 is P1040\nwd:Q1687239 is Q1687239\nwdt:P1040 is P1040\nwd:Q35979475 is Q35979475\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q562108 is Q562108\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q1687239 is Q1687239\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q35979475 is Q35979475\nwdt:P58 is P58\nwd:Q562108 is Q562108\nwdt:P58 is P58\nwd:Q1687239 is Q1687239\nwdt:P58 is P58\nwd:Q35979475 is Q35979475",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:7326"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:2176"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1769"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:7621"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9569"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:0818"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7644"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:8632"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2868"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:8124"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3952"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:6013"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2624"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:2805"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:9343"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4314"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:3916"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:4609"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:4026"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:3558"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1736"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0839"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:0328"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8124"
      },
      {
        "uri": "wd:Q562108",
        "mask": "kg:5962"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7905"
      },
      {
        "uri": "wd:Q1687239",
        "mask": "kg:9312"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0655"
      },
      {
        "uri": "wd:Q35979475",
        "mask": "kg:5164"
      }
    ],
    "masked": "Translate the question “Which film was directed by , edited by , written by , and produced by Jens Jørgen Thorsen , Jørgen Leth , and Ole John” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7326 is P31\nkg:2176 is Q11424\nkg:7644 is P57\nkg:5962 is Q562108\nkg:7644 is P57\nkg:9312 is Q1687239\nkg:7644 is P57\nkg:5164 is Q35979475\nkg:2624 is P1040\nkg:5962 is Q562108\nkg:2624 is P1040\nkg:9312 is Q1687239\nkg:2624 is P1040\nkg:5164 is Q35979475\nkg:1736 is P162\nkg:0839 is P272\nkg:5962 is Q562108\nkg:1736 is P162\nkg:0839 is P272\nkg:9312 is Q1687239\nkg:1736 is P162\nkg:0839 is P272\nkg:5164 is Q35979475\nkg:0655 is P58\nkg:5962 is Q562108\nkg:0655 is P58\nkg:9312 is Q1687239\nkg:0655 is P58\nkg:5164 is Q35979475"
  },
  {
    "CFQquestionIdx": 15106,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M3 's director edit , executive produce , write , and direct M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם הבמאי של M3 ערך, הפיק, כתב וביים את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ನಿರ್ದೇಶಕರು M0 , M1 , ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ , ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ , ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3 的导演是否编辑、执行制作、编写和指导 M0、M1 和 M2？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did [Ember] 's director edit , executive produce , write , and direct [Fate] , [The Confession] , and [The Waiting Room]",
    "questionWithBrackets_he": "האם הבמאי של [אמבר] ערך, הפיק, כתב וביים את [גורל], [הווידוי] ו[חדר ההמתנה]",
    "questionWithBrackets_kn": "[ಎಂಬರ್] ನ ನಿರ್ದೇಶಕರು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ [ಫೇಟ್] , [ಕನ್ಫೆಷನ್] ಮತ್ತು [ದಿ ವೇಟಿಂಗ್ ರೂಮ್]",
    "questionWithBrackets_zh": "[Ember] 的导演是否编辑、执行制作、编写和导演了 [Fate]、[The Confession] 和 [The Waiting Room]？",
    "recursionDepth": 43,
    "sparql": "ASK WHERE { wd:Q5437360 wdt:P57 ?x0 . wd:Q25479948 wdt:P57 ?x0 . wd:Q12813010 wdt:P57 ?x0 . wd:Q6084069 wdt:P57 ?x0 . wd:Q5437360 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q12813010 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 15106,
    "split": "gold_test",
    "en": "Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q5437360",
        "mask": "kg:2648"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8732"
      },
      {
        "uri": "wd:Q25479948",
        "mask": "kg:7310"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8265"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:8327"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1422"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:5105"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4449"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:4989"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9215"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:2420"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2059"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:2574"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5181"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:9591"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1683"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:3902"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1612"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:8380"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9367"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:2825"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4296"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:0200"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9185"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:1740"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4623"
      }
    ],
    "masked": "Translate the question “Did Ember 's director edit , executive produce , write , and direct Fate , The Confession , and The Waiting Room” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2825 is Q5437360\nkg:4449 is P57\nkg:7310 is Q25479948\nkg:4449 is P57\nkg:0200 is Q12813010\nkg:4449 is P57\nkg:1740 is Q6084069\nkg:4449 is P57\nkg:2825 is Q5437360\nkg:5181 is P1040\nkg:0200 is Q12813010\nkg:5181 is P1040\nkg:1740 is Q6084069\nkg:5181 is P1040\nkg:2825 is Q5437360\nkg:9367 is P1431\nkg:0200 is Q12813010\nkg:9367 is P1431\nkg:1740 is Q6084069\nkg:9367 is P1431\nkg:2825 is Q5437360\nkg:4623 is P58\nkg:0200 is Q12813010\nkg:4623 is P58\nkg:1740 is Q6084069\nkg:4623 is P58"
  },
  {
    "CFQquestionIdx": 15107,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M3 's director edit , write , executive produce , and direct M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם הבמאי של M3 ערך, כתב, הפיק מנהל וביים את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ನ ನಿರ್ದೇಶಕರು M0 , M1 , ಮತ್ತು M2 ಅನ್ನು ಎಡಿಟ್ ಮಾಡಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M3 的导演是否编辑、编写、执行制作和指导 M0、M1 和 M2？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did [Ember] 's director edit , write , executive produce , and direct [Fate] , [The Waiting Room] , and [The Confession]",
    "questionWithBrackets_he": "האם הבמאי של [אמבר] ערך, כתב, הפיק וביים את [גורל], [חדר ההמתנה] ו[הווידוי]",
    "questionWithBrackets_kn": "[ಎಂಬರ್] ನ ನಿರ್ದೇಶಕರು [ಫೇಟ್] , [ದಿ ವೇಟಿಂಗ್ ರೂಮ್] ಮತ್ತು [ಕನ್ಫೆಷನ್] ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Ember] 的导演是否编辑、编写、执行制作和导演 [Fate]、[The Waiting Room] 和 [The Confession]？",
    "recursionDepth": 43,
    "sparql": "ASK WHERE { wd:Q5437360 wdt:P57 ?x0 . wd:Q25479948 wdt:P57 ?x0 . wd:Q12813010 wdt:P57 ?x0 . wd:Q6084069 wdt:P57 ?x0 . wd:Q5437360 wdt:P1040 ?x0 . wd:Q12813010 wdt:P1040 ?x0 . wd:Q6084069 wdt:P1040 ?x0 . wd:Q5437360 wdt:P1431 ?x0 . wd:Q12813010 wdt:P1431 ?x0 . wd:Q6084069 wdt:P1431 ?x0 . wd:Q5437360 wdt:P58 ?x0 . wd:Q12813010 wdt:P58 ?x0 . wd:Q6084069 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 15107,
    "split": "gold_test",
    "en": "Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q5437360 is Q5437360\nwdt:P57 is P57\nwd:Q25479948 is Q25479948\nwdt:P57 is P57\nwd:Q12813010 is Q12813010\nwdt:P57 is P57\nwd:Q6084069 is Q6084069\nwdt:P57 is P57\nwd:Q5437360 is Q5437360\nwdt:P1040 is P1040\nwd:Q12813010 is Q12813010\nwdt:P1040 is P1040\nwd:Q6084069 is Q6084069\nwdt:P1040 is P1040\nwd:Q5437360 is Q5437360\nwdt:P1431 is P1431\nwd:Q12813010 is Q12813010\nwdt:P1431 is P1431\nwd:Q6084069 is Q6084069\nwdt:P1431 is P1431\nwd:Q5437360 is Q5437360\nwdt:P58 is P58\nwd:Q12813010 is Q12813010\nwdt:P58 is P58\nwd:Q6084069 is Q6084069\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q5437360",
        "mask": "kg:5782"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1293"
      },
      {
        "uri": "wd:Q25479948",
        "mask": "kg:6450"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9677"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:6897"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3000"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:0206"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5542"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:9205"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0771"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:2526"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9331"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6108"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0633"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:1208"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3810"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:0096"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:9271"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:6940"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:1442"
      },
      {
        "uri": "wd:Q5437360",
        "mask": "kg:5001"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2944"
      },
      {
        "uri": "wd:Q12813010",
        "mask": "kg:8569"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9951"
      },
      {
        "uri": "wd:Q6084069",
        "mask": "kg:5699"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7218"
      }
    ],
    "masked": "Translate the question “Did Ember 's director edit , write , executive produce , and direct Fate , The Waiting Room , and The Confession” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5001 is Q5437360\nkg:5542 is P57\nkg:6450 is Q25479948\nkg:5542 is P57\nkg:8569 is Q12813010\nkg:5542 is P57\nkg:5699 is Q6084069\nkg:5542 is P57\nkg:5001 is Q5437360\nkg:0633 is P1040\nkg:8569 is Q12813010\nkg:0633 is P1040\nkg:5699 is Q6084069\nkg:0633 is P1040\nkg:5001 is Q5437360\nkg:1442 is P1431\nkg:8569 is Q12813010\nkg:1442 is P1431\nkg:5699 is Q6084069\nkg:1442 is P1431\nkg:5001 is Q5437360\nkg:7218 is P58\nkg:8569 is Q12813010\nkg:7218 is P58\nkg:5699 is Q6084069\nkg:7218 is P58"
  },
  {
    "CFQquestionIdx": 168453,
    "expectedResponse": [
      "Airplane!"
    ],
    "questionPatternModEntities": "What was a film that was executive produced by , directed by , and written by M1 , M2 , and M3",
    "questionPatternModEntities_he": "מהו סרט שהופק על ידי , בימוי ונכתב על ידי M1 , M2 ו-M3",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ರವರು ನಿರ್ಮಿಸಿದ, ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ಬರೆದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionPatternModEntities_zh": "由 M1、M2 和 M3 执行制片、导演和编剧的电影是什么？",
    "questionTemplate": "What was a [NP_SIMPLE] that was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What was a film that was executive produced by , directed by , and written by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]",
    "questionWithBrackets_he": "מה היה סרט שהופק על ידי , בימוי ונכתב על ידי [דיוויד צוקר], [ג&#39;ים אברהמס] ו[ג&#39;רי צוקר]",
    "questionWithBrackets_kn": "[ಡೇವಿಡ್ ಜುಕರ್] , [ಜಿಮ್ ಅಬ್ರಹಾಮ್ಸ್] , ಮತ್ತು [ಜೆರ್ರಿ ಜುಕರ್] ರವರು ನಿರ್ಮಿಸಿದ, ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ಬರೆದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionWithBrackets_zh": "由 [David Zucker]、[Jim Abrahams] 和 [Jerry Zucker] 执行制片、导演和编剧的电影是什么？",
    "recursionDepth": 43,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q448604 . ?x0 wdt:P57 wd:Q363666 . ?x0 wdt:P57 wd:Q452794 . ?x0 wdt:P1431 wd:Q448604 . ?x0 wdt:P1431 wd:Q363666 . ?x0 wdt:P1431 wd:Q452794 . ?x0 wdt:P58 wd:Q448604 . ?x0 wdt:P58 wd:Q363666 . ?x0 wdt:P58 wd:Q452794 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M1 .\n?x0 wdt:P57 M2 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P1431 M1 .\n?x0 wdt:P1431 M2 .\n?x0 wdt:P1431 M3 .\n?x0 wdt:P58 M1 .\n?x0 wdt:P58 M2 .\n?x0 wdt:P58 M3\n}",
    "id": 168453,
    "split": "gold_test",
    "en": "What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker",
    "results": [
      [
        "wd:Q497256"
      ]
    ],
    "direct": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q448604 is Q448604\nwdt:P57 is P57\nwd:Q363666 is Q363666\nwdt:P57 is P57\nwd:Q452794 is Q452794\nwdt:P1431 is P1431\nwd:Q448604 is Q448604\nwdt:P1431 is P1431\nwd:Q363666 is Q363666\nwdt:P1431 is P1431\nwd:Q452794 is Q452794\nwdt:P58 is P58\nwd:Q448604 is Q448604\nwdt:P58 is P58\nwd:Q363666 is Q363666\nwdt:P58 is P58\nwd:Q452794 is Q452794",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:1538"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:9830"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4046"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:7381"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7974"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:8344"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7435"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:4625"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5136"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:8095"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3771"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:1852"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3304"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:7453"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0679"
      },
      {
        "uri": "wd:Q448604",
        "mask": "kg:7538"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7613"
      },
      {
        "uri": "wd:Q363666",
        "mask": "kg:2456"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5906"
      },
      {
        "uri": "wd:Q452794",
        "mask": "kg:9069"
      }
    ],
    "masked": "Translate the question “What was a film that was executive produced by , directed by , and written by David Zucker , Jim Abrahams , and Jerry Zucker” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1538 is P31\nkg:9830 is Q11424\nkg:7435 is P57\nkg:7538 is Q448604\nkg:7435 is P57\nkg:2456 is Q363666\nkg:7435 is P57\nkg:9069 is Q452794\nkg:3304 is P1431\nkg:7538 is Q448604\nkg:3304 is P1431\nkg:2456 is Q363666\nkg:3304 is P1431\nkg:9069 is Q452794\nkg:5906 is P58\nkg:7538 is Q448604\nkg:5906 is P58\nkg:2456 is Q363666\nkg:5906 is P58\nkg:9069 is Q452794"
  },
  {
    "CFQquestionIdx": 152477,
    "expectedResponse": [
      "Kim Ki-duk"
    ],
    "questionPatternModEntities": "What editor and cinematographer of M1 , M2 , and M3 edited , executive produced , and directed M0",
    "questionPatternModEntities_he": "איזה עורך וצלם של M1, M2 ו-M3 ערך, הפיק וביים את M0",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕರು M0 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M1、M2和M3的剪辑、执行制作和导演M0是哪位剪辑师和摄影师？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What editor and cinematographer of [Moebius] , [One on One] , and [Amen] edited , executive produced , and directed [Pietà]",
    "questionWithBrackets_he": "איזה עורך וצילום של [Moebius], [אחד על אחד] ו[אמן] ערך, הפיק וביים את [Pietà]",
    "questionWithBrackets_kn": "[ಮೊಬಿಯಸ್] , [ಒನ್ ಆನ್ ಒನ್] , ಮತ್ತು [ಆಮೆನ್] ನ ಯಾವ ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ [ಪಿಯೆಟಾ] ಸಂಪಾದನೆ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಣ ಮತ್ತು ನಿರ್ದೇಶನ",
    "questionWithBrackets_zh": "[Moebius]、[One on One] 和 [Amen] 的剪辑、执行制作和导演 [Pietà] 是哪位剪辑师和摄影师？",
    "recursionDepth": 43,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q13471372 wdt:P344 ?x0 . wd:Q462025 wdt:P344 ?x0 . wd:Q17041657 wdt:P344 ?x0 . wd:Q483197 wdt:P57 ?x0 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q462025 wdt:P1040 ?x0 . wd:Q17041657 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q483197 wdt:P1431 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0\n}",
    "id": 152477,
    "split": "gold_test",
    "en": "What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà",
    "results": [
      [
        "wd:Q212990"
      ]
    ],
    "direct": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P344 is P344\nwd:Q462025 is Q462025\nwdt:P344 is P344\nwd:Q17041657 is Q17041657\nwdt:P344 is P344\nwd:Q483197 is Q483197\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q462025 is Q462025\nwdt:P1040 is P1040\nwd:Q17041657 is Q17041657\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1431 is P1431",
    "masks": [
      {
        "uri": "wd:Q13471372",
        "mask": "kg:3654"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0545"
      },
      {
        "uri": "wd:Q462025",
        "mask": "kg:8377"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8693"
      },
      {
        "uri": "wd:Q17041657",
        "mask": "kg:8448"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0884"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:9945"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8081"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:7108"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1324"
      },
      {
        "uri": "wd:Q462025",
        "mask": "kg:7646"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7646"
      },
      {
        "uri": "wd:Q17041657",
        "mask": "kg:6849"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0528"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:4520"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7942"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:7780"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0403"
      }
    ],
    "masked": "Translate the question “What editor and cinematographer of Moebius , One on One , and Amen edited , executive produced , and directed Pietà” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7108 is Q13471372\nkg:0884 is P344\nkg:7646 is Q462025\nkg:0884 is P344\nkg:6849 is Q17041657\nkg:0884 is P344\nkg:7780 is Q483197\nkg:8081 is P57\nkg:7108 is Q13471372\nkg:7942 is P1040\nkg:7646 is Q462025\nkg:7942 is P1040\nkg:6849 is Q17041657\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:7942 is P1040\nkg:7780 is Q483197\nkg:0403 is P1431"
  },
  {
    "CFQquestionIdx": 92884,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a cinematographer that M2 , M3 , and M4 were edited by , were directed by , and starred M0",
    "questionPatternModEntities_he": "האם צלם קולנוע ש- M2 , M3 ו- M4 נערכו על ידי , בוימו על ידי , וכיכבו ב- M0",
    "questionPatternModEntities_kn": "M2, M3 ಮತ್ತು M4 ಅನ್ನು ಸಂಪಾದನೆ ಮಾಡಿದವರು, ನಿರ್ದೇಶಿಸಿದವರು ಮತ್ತು M0 ನಟಿಸಿದ ಛಾಯಾಗ್ರಾಹಕರೇ",
    "questionPatternModEntities_zh": "M2、M3、M4是由M0剪辑、导演、主演的电影摄影师吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by , were [VP_SIMPLE] by , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Was a cinematographer that [Rainer Werner Fassbinder] , [Rainer Werner Fassbinder] , and [Rainer Werner Fassbinder] were edited by , were directed by , and starred [Rainer Werner Fassbinder]",
    "questionWithBrackets_he": "האם צלם קולנוע ש[ריינר ורנר פאסבינדר], [ריינר ורנר פסבינדר] ו[ריינר ורנר פסבינדר] נערכו על ידי , בוימו על ידי , וכיכבו [ריינר ורנר פאסבינדר]",
    "questionWithBrackets_kn": "[ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] , [ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] ಮತ್ತು [ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] ಅವರು ಸಂಪಾದನೆ ಮಾಡಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ನಟಿಸಿದ್ದಾರೆ [ರೈನರ್ ವರ್ನರ್ ಫಾಸ್‌ಬೈಂಡರ್] ಛಾಯಾಗ್ರಾಹಕರೇ",
    "questionWithBrackets_zh": "[Rainer Werner Fassbinder]、[Rainer Werner Fassbinder] 和 [Rainer Werner Fassbinder] 是由 [Rainer Werner Fassbinder] 剪辑、导演和主演的摄影师吗？",
    "recursionDepth": 44,
    "sparql": "ASK WHERE { wd:Q44426 wdt:P106 wd:Q222344 . wd:Q599423 wdt:P161 wd:Q44426 . wd:Q543382 wdt:P161 wd:Q44426 . wd:Q570483 wdt:P161 wd:Q44426 . wd:Q599423 wdt:P57 wd:Q44426 . wd:Q543382 wdt:P57 wd:Q44426 . wd:Q570483 wdt:P57 wd:Q44426 . wd:Q599423 wdt:P1040 wd:Q44426 . wd:Q543382 wdt:P1040 wd:Q44426 . wd:Q570483 wdt:P1040 wd:Q44426 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P106 wd:Q222344 .\nM2 wdt:P161 M0 .\nM3 wdt:P161 M0 .\nM4 wdt:P161 M0 .\nM2 wdt:P57 M0 .\nM3 wdt:P57 M0 .\nM4 wdt:P57 M0 .\nM2 wdt:P1040 M0 .\nM3 wdt:P1040 M0 .\nM4 wdt:P1040 M0\n}",
    "id": 92884,
    "split": "gold_test",
    "en": "Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q44426 is Q44426\nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q599423 is Q599423\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P161 is P161\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P57 is P57\nwd:Q44426 is Q44426\nwd:Q599423 is Q599423\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q543382 is Q543382\nwdt:P1040 is P1040\nwd:Q44426 is Q44426\nwd:Q570483 is Q570483\nwdt:P1040 is P1040\nwd:Q44426 is Q44426",
    "masks": [
      {
        "uri": "wd:Q44426",
        "mask": "kg:2932"
      },
      {
        "uri": "wdt:P106",
        "mask": "kg:4363"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:9818"
      },
      {
        "uri": "wd:Q599423",
        "mask": "kg:3172"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9268"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:4822"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:3098"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9294"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:9909"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:5924"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1331"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:1017"
      },
      {
        "uri": "wd:Q599423",
        "mask": "kg:6396"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9264"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:0185"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:0581"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5890"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:5209"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:3527"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2181"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:2348"
      },
      {
        "uri": "wd:Q599423",
        "mask": "kg:4757"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1696"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:8367"
      },
      {
        "uri": "wd:Q543382",
        "mask": "kg:5185"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3484"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:2569"
      },
      {
        "uri": "wd:Q570483",
        "mask": "kg:1880"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3547"
      },
      {
        "uri": "wd:Q44426",
        "mask": "kg:7025"
      }
    ],
    "masked": "Translate the question “Was a cinematographer that Rainer Werner Fassbinder , Rainer Werner Fassbinder , and Rainer Werner Fassbinder were edited by , were directed by , and starred Rainer Werner Fassbinder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7025 is Q44426\nkg:4363 is P106\nkg:9818 is Q222344\nkg:4757 is Q599423\nkg:1331 is P161\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:1331 is P161\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:1331 is P161\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:2181 is P57\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:2181 is P57\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:2181 is P57\nkg:7025 is Q44426\nkg:4757 is Q599423\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:5185 is Q543382\nkg:3547 is P1040\nkg:7025 is Q44426\nkg:1880 is Q570483\nkg:3547 is P1040\nkg:7025 is Q44426"
  },
  {
    "CFQquestionIdx": 108450,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a actor that M1 and M2 were influenced by and M4 and M5 married M3 's founder",
    "questionPatternModEntities_he": "האם שחקן ש-M1 ו-M2 הושפעו ממנו ו-M4 ו-M5 התחתנו עם המייסד של M3",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಪ್ರಭಾವಕ್ಕೊಳಗಾದ ನಟ ಮತ್ತು M4 ಮತ್ತು M5 M3 ನ ಸ್ಥಾಪಕನನ್ನು ವಿವಾಹವಾದರೇ",
    "questionPatternModEntities_zh": "是M1和M2受到影响，M4和M5嫁给了M3创始人的演员吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a actor that [Wolfgang Ambros] and [Jan-Mari Carlotti] were influenced by and [Carolyn Dennis] and [Sara Dylan] married [Alexandria Monroe High School] 's founder",
    "questionWithBrackets_he": "האם שחקן ש[וולפגנג אמברוס] ו[ג&#39;אן-מארי קרלוטי] הושפעו ממנו ו[קרולין דניס] ו[שרה דילן] נישאו למייסדה של [תיכון אלכסנדריה מונרו]",
    "questionWithBrackets_kn": "[ವೋಲ್ಫ್ಗ್ಯಾಂಗ್ ಅಂಬ್ರೋಸ್] ಮತ್ತು [ಜಾನ್-ಮಾರಿ ಕಾರ್ಲೋಟ್ಟಿ] ಪ್ರಭಾವಿತರಾದ ನಟ ಮತ್ತು [ಕ್ಯಾರೊಲಿನ್ ಡೆನ್ನಿಸ್] ಮತ್ತು [ಸಾರಾ ಡೈಲನ್] [ಅಲೆಕ್ಸಾಂಡ್ರಿಯಾ ಮನ್ರೋ ಹೈಸ್ಕೂಲ್] ಸ್ಥಾಪಕರನ್ನು ವಿವಾಹವಾದರು",
    "questionWithBrackets_zh": "[Wolfgang Ambros] 和 [Jan-Mari Carlotti] 受[Carolyn Dennis] 和[Sara Dylan] 影响的演员是[Alexandria Monroe High School] 的创始人吗？",
    "recursionDepth": 44,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q33999 . wd:Q12949115 wdt:P737 ?x0 . wd:Q45404 wdt:P737 ?x0 . wd:Q4720983 wdt:P112 ?x0 . ?x0 wdt:P26 wd:Q457433 . ?x0 wdt:P26 wd:Q5045345 . FILTER ( ?x0 != wd:Q457433 ) . FILTER ( ?x0 != wd:Q5045345 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q33999 .\nM1 wdt:P737 ?x0 .\nM2 wdt:P737 ?x0 .\nM3 wdt:P112 ?x0 .\n?x0 wdt:P26 M4 .\n?x0 wdt:P26 M5 .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
    "id": 108450,
    "split": "gold_test",
    "en": "Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q33999 is Q33999\nwd:Q12949115 is Q12949115\nwdt:P737 is P737\nwd:Q45404 is Q45404\nwdt:P737 is P737\nwd:Q4720983 is Q4720983\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q457433 is Q457433\nwdt:P26 is P26\nwd:Q5045345 is Q5045345\nwd:Q457433 is Q457433\nwd:Q5045345 is Q5045345",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:9387"
      },
      {
        "uri": "wd:Q33999",
        "mask": "kg:0260"
      },
      {
        "uri": "wd:Q12949115",
        "mask": "kg:7263"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:4288"
      },
      {
        "uri": "wd:Q45404",
        "mask": "kg:7735"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:9987"
      },
      {
        "uri": "wd:Q4720983",
        "mask": "kg:3150"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:0185"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9242"
      },
      {
        "uri": "wd:Q457433",
        "mask": "kg:2279"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9498"
      },
      {
        "uri": "wd:Q5045345",
        "mask": "kg:5200"
      },
      {
        "uri": "wd:Q457433",
        "mask": "kg:1227"
      },
      {
        "uri": "wd:Q5045345",
        "mask": "kg:0243"
      }
    ],
    "masked": "Translate the question “Was a actor that Wolfgang Ambros and Jan-Mari Carlotti were influenced by and Carolyn Dennis and Sara Dylan married Alexandria Monroe High School 's founder” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9387 is P106\nkg:0260 is Q33999\nkg:7263 is Q12949115\nkg:9987 is P737\nkg:7735 is Q45404\nkg:9987 is P737\nkg:3150 is Q4720983\nkg:0185 is P112\nkg:9498 is P26\nkg:1227 is Q457433\nkg:9498 is P26\nkg:0243 is Q5045345\nkg:1227 is Q457433\nkg:0243 is Q5045345"
  },
  {
    "CFQquestionIdx": 152941,
    "expectedResponse": [
      "Tim Berners-Lee"
    ],
    "questionPatternModEntities": "What employee and founder of M0 and M1 was employed by M2 and was employed by M3 and M4",
    "questionPatternModEntities_he": "איזה עובד ומייסד של M0 ו-M1 הועסק על ידי M2 והועסק על ידי M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ಮತ್ತು M1 ನ ಯಾವ ಉದ್ಯೋಗಿ ಮತ್ತು ಸಂಸ್ಥಾಪಕರು M2 ನಿಂದ ಕೆಲಸ ಮಾಡಲ್ಪಟ್ಟಿದ್ದಾರೆ ಮತ್ತು M3 ಮತ್ತು M4 ನಿಂದ ನೇಮಕಗೊಂಡಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0和M1的哪个员工和创始人被M2雇佣，被M3和M4雇佣？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "What employee and founder of [World Wide Web Consortium] and [Open Data Institute] was employed by [Plessey] and was employed by [CERN] and [School of Electronics and Computer Science, University of Southampton]",
    "questionWithBrackets_he": "איזה עובד ומייסד של [World Wide Web Consortium] ו-[Open Data Institute] הועסק על ידי [Plessey] והועסק על ידי [CERN] ו[בית הספר לאלקטרוניקה ומדעי המחשב, אוניברסיטת סאות&#39;המפטון]",
    "questionWithBrackets_kn": "[ವರ್ಲ್ಡ್ ವೈಡ್ ವೆಬ್ ಕನ್ಸೋರ್ಟಿಯಂ] ಮತ್ತು [ಓಪನ್ ಡಾಟಾ ಇನ್‌ಸ್ಟಿಟ್ಯೂಟ್] ಯಾವ ಉದ್ಯೋಗಿ ಮತ್ತು ಸಂಸ್ಥಾಪಕರನ್ನು [ಪ್ಲೆಸ್ಸೆ] ನೇಮಿಸಿಕೊಂಡರು ಮತ್ತು [ಸಿಇಆರ್‌ಎನ್] ಮತ್ತು [ಸ್ಕೂಲ್ ಆಫ್ ಎಲೆಕ್ಟ್ರಾನಿಕ್ಸ್ ಮತ್ತು ಕಂಪ್ಯೂಟರ್ ಸೈನ್ಸ್, ಸೌತಾಂಪ್ಟನ್ ವಿಶ್ವವಿದ್ಯಾಲಯ] ನೇಮಿಸಿಕೊಂಡರು",
    "questionWithBrackets_zh": "[万维网联盟]和[开放数据研究所]的哪位雇员和创始人受雇于[普莱西]并受雇于[欧洲核子研究中心]和[南安普敦大学电子与计算机科学学院]？",
    "recursionDepth": 44,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q37033 wdt:P112 ?x0 . wd:Q7095994 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q7432436 . ?x0 wdt:P108 wd:Q37033 . ?x0 wdt:P108 wd:Q42944 . ?x0 wdt:P108 wd:Q7095994 . ?x0 wdt:P108 wd:Q7204713 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P112 ?x0 .\nM1 wdt:P112 ?x0 .\n?x0 wdt:P108 M0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4\n}",
    "id": 152941,
    "split": "gold_test",
    "en": "What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton",
    "results": [
      [
        "wd:Q80"
      ]
    ],
    "direct": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q37033 is Q37033\nwdt:P112 is P112\nwd:Q7095994 is Q7095994\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q7432436 is Q7432436\nwdt:P108 is P108\nwd:Q37033 is Q37033\nwdt:P108 is P108\nwd:Q42944 is Q42944\nwdt:P108 is P108\nwd:Q7095994 is Q7095994\nwdt:P108 is P108\nwd:Q7204713 is Q7204713",
    "masks": [
      {
        "uri": "wd:Q37033",
        "mask": "kg:5220"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:0993"
      },
      {
        "uri": "wd:Q7095994",
        "mask": "kg:1433"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:8237"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7040"
      },
      {
        "uri": "wd:Q7432436",
        "mask": "kg:6182"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5255"
      },
      {
        "uri": "wd:Q37033",
        "mask": "kg:2143"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:6506"
      },
      {
        "uri": "wd:Q42944",
        "mask": "kg:3947"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7182"
      },
      {
        "uri": "wd:Q7095994",
        "mask": "kg:0588"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3145"
      },
      {
        "uri": "wd:Q7204713",
        "mask": "kg:7021"
      }
    ],
    "masked": "Translate the question “What employee and founder of World Wide Web Consortium and Open Data Institute was employed by Plessey and was employed by CERN and School of Electronics and Computer Science, University of Southampton” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2143 is Q37033\nkg:8237 is P112\nkg:0588 is Q7095994\nkg:8237 is P112\nkg:3145 is P108\nkg:6182 is Q7432436\nkg:3145 is P108\nkg:2143 is Q37033\nkg:3145 is P108\nkg:3947 is Q42944\nkg:3145 is P108\nkg:0588 is Q7095994\nkg:3145 is P108\nkg:7021 is Q7204713"
  },
  {
    "CFQquestionIdx": 187052,
    "expectedResponse": [
      "Robert Rodriguez"
    ],
    "questionPatternModEntities": "What writer , cinematographer , star , and composer of M3 edited and directed M0 , M1 , and M2",
    "questionPatternModEntities_he": "איזה סופר, צלם קולנוע, כוכב ומלחין של M3 ערך וביים את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಯ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ ಮತ್ತು ಸಂಯೋಜಕರು M0, M1 ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2是哪位作家、摄影师、明星、作曲家编辑和导演的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What writer , cinematographer , star , and composer of [Planet Terror] edited and directed [Sin City: A Dame to Kill For] , [Machete] , and [Sin City]",
    "questionWithBrackets_he": "איזה סופר, צלם קולנוע, כוכב ומלחין של [Planet Terror] ערך וביים את [Sin City: A Dame to Kill For], [Machete] ו-[Sin City]",
    "questionWithBrackets_kn": "[ಪ್ಲಾನೆಟ್ ಟೆರರ್] ನ ಯಾವ ಬರಹಗಾರ, ಛಾಯಾಗ್ರಾಹಕ, ತಾರೆ ಮತ್ತು ಸಂಯೋಜಕರು [ಸಿನ್ ಸಿಟಿ: ಎ ಡೇಮ್ ಟು ಕಿಲ್ ಫಾರ್] , [ಮ್ಯಾಚೆಟ್] ಮತ್ತು [ಸಿನ್ ಸಿಟಿ] ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[恐怖星球]的编剧、摄影师、明星和作曲家编辑和导演了[罪恶之城：为之杀戮的贵妇]、[大砍刀]和[罪恶之城]？",
    "recursionDepth": 44,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1165050 wdt:P161 ?x0 . wd:Q1165050 wdt:P344 ?x0 . wd:Q1653396 wdt:P57 ?x0 . wd:Q192115 wdt:P57 ?x0 . wd:Q128493 wdt:P57 ?x0 . wd:Q1653396 wdt:P1040 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q128493 wdt:P1040 ?x0 . wd:Q1165050 wdt:P86 ?x0 . wd:Q1165050 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM3 wdt:P161 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM3 wdt:P58 ?x0\n}",
    "id": 187052,
    "split": "gold_test",
    "en": "What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City",
    "results": [
      [
        "wd:Q47284"
      ]
    ],
    "direct": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q1165050 is Q1165050\nwdt:P344 is P344\nwd:Q1653396 is Q1653396\nwdt:P57 is P57\nwd:Q192115 is Q192115\nwdt:P57 is P57\nwd:Q128493 is Q128493\nwdt:P57 is P57\nwd:Q1653396 is Q1653396\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q128493 is Q128493\nwdt:P1040 is P1040\nwd:Q1165050 is Q1165050\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q1165050",
        "mask": "kg:0033"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2694"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:6002"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9636"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:2812"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0138"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:8946"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8052"
      },
      {
        "uri": "wd:Q128493",
        "mask": "kg:8042"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9363"
      },
      {
        "uri": "wd:Q1653396",
        "mask": "kg:6198"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9621"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:4202"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8031"
      },
      {
        "uri": "wd:Q128493",
        "mask": "kg:1096"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7171"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:9036"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:7027"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:8061"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8807"
      }
    ],
    "masked": "Translate the question “What writer , cinematographer , star , and composer of Planet Terror edited and directed Sin City: A Dame to Kill For , Machete , and Sin City” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:8061 is Q1165050\nkg:2694 is P161\nkg:8061 is Q1165050\nkg:9636 is P344\nkg:6198 is Q1653396\nkg:9363 is P57\nkg:4202 is Q192115\nkg:9363 is P57\nkg:1096 is Q128493\nkg:9363 is P57\nkg:6198 is Q1653396\nkg:7171 is P1040\nkg:4202 is Q192115\nkg:7171 is P1040\nkg:1096 is Q128493\nkg:7171 is P1040\nkg:8061 is Q1165050\nkg:7027 is P86\nkg:8061 is Q1165050\nkg:8807 is P58"
  },
  {
    "CFQquestionIdx": 16039,
    "expectedResponse": true,
    "questionPatternModEntities": "Did M2 's editor and executive producer direct , edit , write , and executive produce M0 and M1",
    "questionPatternModEntities_he": "האם העורך והמפיק בפועל של M2 ביים, ערך, כתב והפיק בפועל את M0 ו-M1",
    "questionPatternModEntities_kn": "M2 ನ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು M0 ಮತ್ತು M1 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರಾಗಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M2的编辑和执行制片人是否指导、编辑、写作和执行制片M0和M1？",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "Did [Pietà] 's editor and executive producer direct , edit , write , and executive produce [Dream] and [Moebius]",
    "questionWithBrackets_he": "האם העורך והמפיק בפועל של [פיאטה] ביים, ערך, כתב והפיק את [Dream] ואת [Moebius]",
    "questionWithBrackets_kn": "[ಪೀಟಾ] ನ ಸಂಪಾದಕ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕರು [ಡ್ರೀಮ್] ಮತ್ತು [ಮೊಬಿಯಸ್] ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ, ಬರೆಯುತ್ತಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[Pietà] 的编辑和执行制片人是否指导、编辑、编写和执行制作 [Dream] 和 [Moebius]？",
    "recursionDepth": 45,
    "sparql": "ASK WHERE { wd:Q13471372 wdt:P57 ?x0 . wd:Q484679 wdt:P57 ?x0 . wd:Q13471372 wdt:P1040 ?x0 . wd:Q483197 wdt:P1040 ?x0 . wd:Q484679 wdt:P1040 ?x0 . wd:Q13471372 wdt:P1431 ?x0 . wd:Q483197 wdt:P1431 ?x0 . wd:Q484679 wdt:P1431 ?x0 . wd:Q13471372 wdt:P58 ?x0 . wd:Q484679 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 16039,
    "split": "gold_test",
    "en": "Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius",
    "results": [
      true
    ],
    "direct": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q13471372 is Q13471372\nwdt:P57 is P57\nwd:Q484679 is Q484679\nwdt:P57 is P57\nwd:Q13471372 is Q13471372\nwdt:P1040 is P1040\nwd:Q483197 is Q483197\nwdt:P1040 is P1040\nwd:Q484679 is Q484679\nwdt:P1040 is P1040\nwd:Q13471372 is Q13471372\nwdt:P1431 is P1431\nwd:Q483197 is Q483197\nwdt:P1431 is P1431\nwd:Q484679 is Q484679\nwdt:P1431 is P1431\nwd:Q13471372 is Q13471372\nwdt:P58 is P58\nwd:Q484679 is Q484679\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q13471372",
        "mask": "kg:0092"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:9930"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:4378"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0456"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:9969"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9334"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:3758"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1303"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:4010"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6898"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:1977"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5353"
      },
      {
        "uri": "wd:Q483197",
        "mask": "kg:4739"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0036"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:0260"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:4964"
      },
      {
        "uri": "wd:Q13471372",
        "mask": "kg:6634"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3650"
      },
      {
        "uri": "wd:Q484679",
        "mask": "kg:8105"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0544"
      }
    ],
    "masked": "Translate the question “Did Pietà 's editor and executive producer direct , edit , write , and executive produce Dream and Moebius” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6634 is Q13471372\nkg:0456 is P57\nkg:8105 is Q484679\nkg:0456 is P57\nkg:6634 is Q13471372\nkg:6898 is P1040\nkg:4739 is Q483197\nkg:6898 is P1040\nkg:8105 is Q484679\nkg:6898 is P1040\nkg:6634 is Q13471372\nkg:4964 is P1431\nkg:4739 is Q483197\nkg:4964 is P1431\nkg:8105 is Q484679\nkg:4964 is P1431\nkg:6634 is Q13471372\nkg:0544 is P58\nkg:8105 is Q484679\nkg:0544 is P58"
  },
  {
    "CFQquestionIdx": 34884,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film producer that founded M4 , M5 , and M6 direct and write M1 , M2 , and M3",
    "questionPatternModEntities_he": "האם מפיק סרטים שייסד את M4, M5 ו-M6 ביים וכתב את M1, M2 ו-M3",
    "questionPatternModEntities_kn": "M4, M5 ಮತ್ತು M6 ಅನ್ನು ಸ್ಥಾಪಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು M1, M2 ಮತ್ತು M3 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆಯೇ ಮತ್ತು ಬರೆಯುತ್ತಾರೆಯೇ",
    "questionPatternModEntities_zh": "有没有创立M4、M5、M6的电影制片人导演并编写了M1、M2、M3？",
    "questionTemplate": "Did a [NP_SIMPLE] that [VP_SIMPLE] [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Did a film producer that founded [D.W. Griffith Productions] , [United Artists Corporation] , and [David W. Griffith Corp.] direct and write [The Brahma Diamond] , [His Lost Love] , and [The Birth of a Nation]",
    "questionWithBrackets_he": "האם מפיק סרטים שהקים את [DW Griffith Productions], [United Artists Corporation] ו-[David W. Griffith Corp.] ביים וכתב את [The Brahma Diamond], [His Lost Love] ו-[The Birth of a Nation] ",
    "questionWithBrackets_kn": "[DW ಗ್ರಿಫಿತ್ ಪ್ರೊಡಕ್ಷನ್ಸ್] , [ಯುನೈಟೆಡ್ ಆರ್ಟಿಸ್ಟ್ಸ್ ಕಾರ್ಪೊರೇಷನ್] ಮತ್ತು [ಡೇವಿಡ್ ಡಬ್ಲ್ಯೂ. ಗ್ರಿಫಿತ್ ಕಾರ್ಪ್.] ಸ್ಥಾಪಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕರು [ದಿ ಬ್ರಹ್ಮ ಡೈಮಂಡ್] , [ಹಿಸ್ ಲಾಸ್ಟ್ ಲವ್] ಮತ್ತು [ದಿ ಬರ್ತ್ ಆಫ್ ಎ ನೇಷನ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ ",
    "questionWithBrackets_zh": "是否有创办[DW Griffith Productions]、[United Artists Corporation]、[David W. Griffith Corp.] 的电影制片人执导并编写了[The Brahma Diamond]、[His Lost Love] 和[The Birth of a Nation] ",
    "recursionDepth": 45,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q3282637 . wd:Q1857205 wdt:P57 ?x0 . wd:Q220394 wdt:P57 ?x0 . wd:Q542216 wdt:P57 ?x0 . wd:Q1857205 wdt:P58 ?x0 . wd:Q220394 wdt:P58 ?x0 . wd:Q542216 wdt:P58 ?x0 . wd:Q3011043 wdt:P112 ?x0 . wd:Q219400 wdt:P112 ?x0 . wd:Q64434913 wdt:P112 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q3282637 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P112 ?x0 .\nM5 wdt:P112 ?x0 .\nM6 wdt:P112 ?x0\n}",
    "id": 34884,
    "split": "gold_test",
    "en": "Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q3282637 is Q3282637\nwd:Q1857205 is Q1857205\nwdt:P57 is P57\nwd:Q220394 is Q220394\nwdt:P57 is P57\nwd:Q542216 is Q542216\nwdt:P57 is P57\nwd:Q1857205 is Q1857205\nwdt:P58 is P58\nwd:Q220394 is Q220394\nwdt:P58 is P58\nwd:Q542216 is Q542216\nwdt:P58 is P58\nwd:Q3011043 is Q3011043\nwdt:P112 is P112\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwd:Q64434913 is Q64434913\nwdt:P112 is P112",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:9286"
      },
      {
        "uri": "wd:Q3282637",
        "mask": "kg:7295"
      },
      {
        "uri": "wd:Q1857205",
        "mask": "kg:6120"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0718"
      },
      {
        "uri": "wd:Q220394",
        "mask": "kg:5618"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0066"
      },
      {
        "uri": "wd:Q542216",
        "mask": "kg:6353"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0289"
      },
      {
        "uri": "wd:Q1857205",
        "mask": "kg:2822"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0533"
      },
      {
        "uri": "wd:Q220394",
        "mask": "kg:1313"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5299"
      },
      {
        "uri": "wd:Q542216",
        "mask": "kg:7088"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7163"
      },
      {
        "uri": "wd:Q3011043",
        "mask": "kg:9090"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:0490"
      },
      {
        "uri": "wd:Q219400",
        "mask": "kg:5136"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:3762"
      },
      {
        "uri": "wd:Q64434913",
        "mask": "kg:1503"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:2774"
      }
    ],
    "masked": "Translate the question “Did a film producer that founded D.W. Griffith Productions , United Artists Corporation , and David W. Griffith Corp. direct and write The Brahma Diamond , His Lost Love , and The Birth of a Nation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9286 is P106\nkg:7295 is Q3282637\nkg:2822 is Q1857205\nkg:0289 is P57\nkg:1313 is Q220394\nkg:0289 is P57\nkg:7088 is Q542216\nkg:0289 is P57\nkg:2822 is Q1857205\nkg:7163 is P58\nkg:1313 is Q220394\nkg:7163 is P58\nkg:7088 is Q542216\nkg:7163 is P58\nkg:9090 is Q3011043\nkg:2774 is P112\nkg:5136 is Q219400\nkg:2774 is P112\nkg:1503 is Q64434913\nkg:2774 is P112"
  },
  {
    "CFQquestionIdx": 153893,
    "expectedResponse": [
      "Iván Noel"
    ],
    "questionPatternModEntities": "What executive producer , editor , composer , cinematographer , and director of M2 edited and wrote M0 and M1",
    "questionPatternModEntities_he": "איזה מפיק בפועל, עורך, מלחין, צלם קולנוע ובמאי של M2 ערך וכתב את M0 ו-M1",
    "questionPatternModEntities_kn": "M2 ನ ಯಾವ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ, ಸಂಪಾದಕ, ಸಂಯೋಜಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು M0 ಮತ್ತು M1 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M2的执行制片人、剪辑师、作曲家、摄影师和导演是哪位编辑和编写M0和M1的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What executive producer , editor , composer , cinematographer , and director of [Brecha] edited and wrote [Primary!] and [In Your Absence]",
    "questionWithBrackets_he": "איזה מפיק בפועל, עורך, מלחין, צלם קולנוע ובמאי של [ברכה] ערך וכתב את [ראשי!] ו[בהיעדרך]",
    "questionWithBrackets_kn": "[ಬ್ರೆಚಾ] ಯಾವ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ, ಸಂಪಾದಕ, ಸಂಯೋಜಕ, ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ನಿರ್ದೇಶಕರು [ಪ್ರಾಥಮಿಕ!] ಮತ್ತು [ನಿಮ್ಮ ಅನುಪಸ್ಥಿತಿಯಲ್ಲಿ] ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Brecha] 的哪个执行制片人、编辑、作曲家、摄影师和导演编辑和编写了 [Primary!] 和 [In Your Absence]？",
    "recursionDepth": 45,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q4959991 wdt:P344 ?x0 . wd:Q4959991 wdt:P57 ?x0 . wd:Q5375110 wdt:P1040 ?x0 . wd:Q7243050 wdt:P1040 ?x0 . wd:Q4959991 wdt:P1040 ?x0 . wd:Q4959991 wdt:P86 ?x0 . wd:Q4959991 wdt:P1431 ?x0 . wd:Q5375110 wdt:P58 ?x0 . wd:Q7243050 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM2 wdt:P344 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM2 wdt:P86 ?x0 .\nM2 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0\n}",
    "id": 153893,
    "split": "gold_test",
    "en": "What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence",
    "results": [
      [
        "wd:Q3156378"
      ]
    ],
    "direct": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4959991 is Q4959991\nwdt:P344 is P344\nwd:Q4959991 is Q4959991\nwdt:P57 is P57\nwd:Q5375110 is Q5375110\nwdt:P1040 is P1040\nwd:Q7243050 is Q7243050\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P1040 is P1040\nwd:Q4959991 is Q4959991\nwdt:P86 is P86\nwd:Q4959991 is Q4959991\nwdt:P1431 is P1431\nwd:Q5375110 is Q5375110\nwdt:P58 is P58\nwd:Q7243050 is Q7243050\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q4959991",
        "mask": "kg:6473"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4311"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:1712"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0220"
      },
      {
        "uri": "wd:Q5375110",
        "mask": "kg:8399"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1297"
      },
      {
        "uri": "wd:Q7243050",
        "mask": "kg:3603"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8085"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:5365"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:0731"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:9829"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:5615"
      },
      {
        "uri": "wd:Q4959991",
        "mask": "kg:6227"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:7818"
      },
      {
        "uri": "wd:Q5375110",
        "mask": "kg:5846"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1589"
      },
      {
        "uri": "wd:Q7243050",
        "mask": "kg:1224"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1536"
      }
    ],
    "masked": "Translate the question “What executive producer , editor , composer , cinematographer , and director of Brecha edited and wrote Primary! and In Your Absence” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6227 is Q4959991\nkg:4311 is P344\nkg:6227 is Q4959991\nkg:0220 is P57\nkg:5846 is Q5375110\nkg:0731 is P1040\nkg:1224 is Q7243050\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:0731 is P1040\nkg:6227 is Q4959991\nkg:5615 is P86\nkg:6227 is Q4959991\nkg:7818 is P1431\nkg:5846 is Q5375110\nkg:1536 is P58\nkg:1224 is Q7243050\nkg:1536 is P58"
  },
  {
    "CFQquestionIdx": 187343,
    "expectedResponse": [
      "Sally Ride"
    ],
    "questionPatternModEntities": "Which American founder and employee of M0 was employed by M1 and employed by M2 , M3 , and M4",
    "questionPatternModEntities_he": "איזה מייסד ועובד אמריקאי של M0 הועסק על ידי M1 והועסק על ידי M2 , M3 ו-M4",
    "questionPatternModEntities_kn": "M0 ಯ ಯಾವ ಅಮೇರಿಕನ್ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿಯನ್ನು M1 ಮತ್ತು M2, M3 ಮತ್ತು M4 ನಿಂದ ನೇಮಿಸಲಾಗಿದೆ",
    "questionPatternModEntities_zh": "M0 的哪位美国创始人和雇员受雇于 M1，受雇于 M2、M3 和 M4？",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Which American founder and employee of [Sally Ride Science] was employed by [Center for International Security and Cooperation] and employed by [Stanford University] , [National Aeronautics and Space Administration] , and [University of California, San Diego]",
    "questionWithBrackets_he": "איזה מייסדת ועובדת אמריקאית של [Sally Ride Science] הועסקה על ידי [המרכז לביטחון ושיתוף פעולה בינלאומי] והועסקה על ידי [אוניברסיטת סטנפורד], [מינהל האווירונאוטיקה והחלל הלאומי] ו[אוניברסיטת קליפורניה, סן דייגו]",
    "questionWithBrackets_kn": "[ಸ್ಯಾಲಿ ರೈಡ್ ಸೈನ್ಸ್] ನ ಯಾವ ಅಮೇರಿಕನ್ ಸಂಸ್ಥಾಪಕ ಮತ್ತು ಉದ್ಯೋಗಿ [ಸೆಂಟರ್ ಫಾರ್ ಇಂಟರ್ನ್ಯಾಷನಲ್ ಸೆಕ್ಯುರಿಟಿ ಅಂಡ್ ಸಹಕಾರ] ಮತ್ತು [ಸ್ಟ್ಯಾನ್‌ಫೋರ್ಡ್ ವಿಶ್ವವಿದ್ಯಾಲಯ] , [ನ್ಯಾಷನಲ್ ಏರೋನಾಟಿಕ್ಸ್ ಮತ್ತು ಸ್ಪೇಸ್ ಅಡ್ಮಿನಿಸ್ಟ್ರೇಷನ್] ಮತ್ತು [ಕ್ಯಾಲಿಫೋರ್ನಿಯಾ ವಿಶ್ವವಿದ್ಯಾಲಯ, ಸ್ಯಾನ್ ಡಿಯಾಗೋ] ನಿಂದ ನೇಮಕಗೊಂಡಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Sally Ride Science] 的哪位美国创始人和雇员受雇于 [国际安全与合作中心] 并受雇于 [斯坦福大学]、[美国国家航空航天局] 和 [加州大学圣地亚哥分校]？",
    "recursionDepth": 45,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q55206 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q55206 . ?x0 wdt:P108 wd:Q23548 . ?x0 wdt:P108 wd:Q41506 . ?x0 wdt:P108 wd:Q622664 . ?x0 wdt:P108 wd:Q5059715 . ?x0 wdt:P27 wd:Q30 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P112 ?x0 .\n?x0 wdt:P108 M0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4 .\n?x0 wdt:P27 wd:Q30\n}",
    "id": 187343,
    "split": "gold_test",
    "en": "Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego",
    "results": [
      [
        "wd:Q49285"
      ]
    ],
    "direct": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q55206 is Q55206\nwdt:P112 is P112\nwdt:P108 is P108\nwd:Q55206 is Q55206\nwdt:P108 is P108\nwd:Q23548 is Q23548\nwdt:P108 is P108\nwd:Q41506 is Q41506\nwdt:P108 is P108\nwd:Q622664 is Q622664\nwdt:P108 is P108\nwd:Q5059715 is Q5059715\nwdt:P27 is P27\nwd:Q30 is Q30",
    "masks": [
      {
        "uri": "wd:Q55206",
        "mask": "kg:1227"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:9923"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2732"
      },
      {
        "uri": "wd:Q55206",
        "mask": "kg:6416"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2434"
      },
      {
        "uri": "wd:Q23548",
        "mask": "kg:1473"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:7003"
      },
      {
        "uri": "wd:Q41506",
        "mask": "kg:3401"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3116"
      },
      {
        "uri": "wd:Q622664",
        "mask": "kg:8712"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:8994"
      },
      {
        "uri": "wd:Q5059715",
        "mask": "kg:2435"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:7668"
      },
      {
        "uri": "wd:Q30",
        "mask": "kg:5431"
      }
    ],
    "masked": "Translate the question “Which American founder and employee of Sally Ride Science was employed by Center for International Security and Cooperation and employed by Stanford University , National Aeronautics and Space Administration , and University of California, San Diego” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:6416 is Q55206\nkg:9923 is P112\nkg:8994 is P108\nkg:6416 is Q55206\nkg:8994 is P108\nkg:1473 is Q23548\nkg:8994 is P108\nkg:3401 is Q41506\nkg:8994 is P108\nkg:8712 is Q622664\nkg:8994 is P108\nkg:2435 is Q5059715\nkg:7668 is P27\nkg:5431 is Q30"
  },
  {
    "CFQquestionIdx": 106924,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a star , writer , and editor of M0 , M1 , and M2 M3 's cinematographer , director , editor , and composer",
    "questionPatternModEntities_he": "האם כוכב, כותב ועורך של M0, M1 ו-M2 M3 היה צלם קולנוע, במאי, עורך ומלחין",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 M3 ನ ಛಾಯಾಗ್ರಾಹಕ , ನಿರ್ದೇಶಕ , ಸಂಪಾದಕ ಮತ್ತು ಸಂಯೋಜಕನ ಸ್ಟಾರ್ , ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M0、M1 和 M2 的电影摄影师、导演、剪辑师和作曲家是 M0、M1 和 M2 的明星、作家和剪辑师吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a star , writer , and editor of [The Adventures of Sharkboy and Lavagirl in 3-D] , [Planet Terror] , and [Sin City] [Once Upon a Time in Mexico] 's cinematographer , director , editor , and composer",
    "questionWithBrackets_he": "היה כוכב, כותב ועורך של [הרפתקאותיהם של Sharkboy and Lavagirl in 3-D], [Planet Terror] ו-[Sin City] [פעם במקסיקו] של הקולנוע, הבמאי, העורך והמלחין ",
    "questionWithBrackets_kn": "[ದಿ ಅಡ್ವೆಂಚರ್ಸ್ ಆಫ್ ಶಾರ್ಕ್‌ಬಾಯ್ ಮತ್ತು ಲಾವಾಗರ್ಲ್ ಇನ್ 3-ಡಿ], [ಪ್ಲಾನೆಟ್ ಟೆರರ್] ಮತ್ತು [ಸಿನ್ ಸಿಟಿ] [ಒನ್ಸ್ ಅಪಾನ್ ಎ ಟೈಮ್ ಇನ್ ಮೆಕ್ಸಿಕೋ] ನ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ದೇಶಕ, ಸಂಪಾದಕ ಮತ್ತು ಸಂಯೋಜಕನ ಸ್ಟಾರ್, ಬರಹಗಾರ ಮತ್ತು ಸಂಪಾದಕರಾಗಿದ್ದರು. ",
    "questionWithBrackets_zh": "曾是[鲨鱼男孩和熔岩女孩历险记 3-D]、[恐怖星球] 和 [罪恶之城] [墨西哥往事] 的电影摄影师、导演、编辑和作曲家的明星、作家和编辑",
    "recursionDepth": 46,
    "sparql": "ASK WHERE { wd:Q1165050 wdt:P161 ?x0 . wd:Q192115 wdt:P161 ?x0 . wd:Q656357 wdt:P161 ?x0 . wd:Q93853 wdt:P344 ?x0 . wd:Q93853 wdt:P57 ?x0 . wd:Q1165050 wdt:P1040 ?x0 . wd:Q93853 wdt:P1040 ?x0 . wd:Q192115 wdt:P1040 ?x0 . wd:Q656357 wdt:P1040 ?x0 . wd:Q93853 wdt:P86 ?x0 . wd:Q1165050 wdt:P58 ?x0 . wd:Q192115 wdt:P58 ?x0 . wd:Q656357 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P344 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 106924,
    "split": "gold_test",
    "en": "Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1165050 is Q1165050\nwdt:P161 is P161\nwd:Q192115 is Q192115\nwdt:P161 is P161\nwd:Q656357 is Q656357\nwdt:P161 is P161\nwd:Q93853 is Q93853\nwdt:P344 is P344\nwd:Q93853 is Q93853\nwdt:P57 is P57\nwd:Q1165050 is Q1165050\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P1040 is P1040\nwd:Q192115 is Q192115\nwdt:P1040 is P1040\nwd:Q656357 is Q656357\nwdt:P1040 is P1040\nwd:Q93853 is Q93853\nwdt:P86 is P86\nwd:Q1165050 is Q1165050\nwdt:P58 is P58\nwd:Q192115 is Q192115\nwdt:P58 is P58\nwd:Q656357 is Q656357\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q1165050",
        "mask": "kg:0518"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3100"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:9481"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4451"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:4805"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:2617"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:7657"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1339"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:6731"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5839"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:3839"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7894"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:8168"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9362"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:7791"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9588"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:6736"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8530"
      },
      {
        "uri": "wd:Q93853",
        "mask": "kg:2814"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:6540"
      },
      {
        "uri": "wd:Q1165050",
        "mask": "kg:4292"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:4108"
      },
      {
        "uri": "wd:Q192115",
        "mask": "kg:3024"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3132"
      },
      {
        "uri": "wd:Q656357",
        "mask": "kg:1991"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9292"
      }
    ],
    "masked": "Translate the question “Was a star , writer , and editor of The Adventures of Sharkboy and Lavagirl in 3-D , Planet Terror , and Sin City Once Upon a Time in Mexico 's cinematographer , director , editor , and composer” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4292 is Q1165050\nkg:2617 is P161\nkg:3024 is Q192115\nkg:2617 is P161\nkg:1991 is Q656357\nkg:2617 is P161\nkg:2814 is Q93853\nkg:1339 is P344\nkg:2814 is Q93853\nkg:5839 is P57\nkg:4292 is Q1165050\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:8530 is P1040\nkg:3024 is Q192115\nkg:8530 is P1040\nkg:1991 is Q656357\nkg:8530 is P1040\nkg:2814 is Q93853\nkg:6540 is P86\nkg:4292 is Q1165050\nkg:9292 is P58\nkg:3024 is Q192115\nkg:9292 is P58\nkg:1991 is Q656357\nkg:9292 is P58"
  },
  {
    "CFQquestionIdx": 77647,
    "expectedResponse": true,
    "questionPatternModEntities": "Was M0 's executive producer and writer employed by M1 , M2 , and M3 and employed by M4 , M5 , and M6",
    "questionPatternModEntities_he": "האם המפיק והכותב הראשי של M0 הועסק על ידי M1 , M2 ו-M3 והועסק על ידי M4 , M5 ו-M6",
    "questionPatternModEntities_kn": "M0 ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಬರಹಗಾರರನ್ನು M1, M2 ಮತ್ತು M3 ಮತ್ತು M4, M5 ಮತ್ತು M6 ನಿಂದ ನೇಮಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M0的执行制片人和编剧是否受雇于M1、M2和M3而受雇于M4、M5和M6？",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was [Howl's Moving Castle] 's executive producer and writer employed by [Nibariki] , [Ghibli Museum] , and [TMS Entertainment] and employed by [Shin-Ei Animation] , [Studio Ghibli] , and [Tokuma Memorial Cultural Foundation for Animation]",
    "questionWithBrackets_he": "האם המפיק והכותב בפועל של [Howl&#39;s Moving Castle] הועסק על ידי [Nibariki], [מוזיאון גיבלי] ו-[TMS Entertainment] והועסק על ידי [Shin-Ei Animation] , [Studio Ghibli] ו[Tokuma Memorial Cultural Cultural Foundation for אנימציה]",
    "questionWithBrackets_kn": "[ಹೌಲ್ಸ್ ಮೂವಿಂಗ್ ಕ್ಯಾಸಲ್] ನ ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಾಪಕ ಮತ್ತು ಬರಹಗಾರ [ನಿಬಾರಿಕಿ] , [ಘಿಬ್ಲಿ ಮ್ಯೂಸಿಯಂ] ಮತ್ತು [ಟಿಎಂಎಸ್ ಎಂಟರ್‌ಟೈನ್‌ಮೆಂಟ್] ಮತ್ತು [ಶಿನ್-ಈ ಆನಿಮೇಷನ್] , [ಸ್ಟುಡಿಯೋ ಘಿಬ್ಲಿ] , ಮತ್ತು [ಟೋಕುಮಾ ಮೆಮೋರಿಯಲ್ ಕಲ್ಚರಲ್ ಫೌಂಡೇಶನ್ ಕಲ್ಚರಲ್‌ನಿಂದ ನೇಮಕಗೊಂಡಿದ್ದಾರೆ ಬಂಗಾರದ]",
    "questionWithBrackets_zh": "曾受雇于 [Nibariki]、[吉卜力博物馆] 和 [TMS Entertainment] 并受雇于 [Shin-Ei Animation]、[Studio Ghibli] 和 [德间纪念文化基金会]动画片]？",
    "recursionDepth": 46,
    "sparql": "ASK WHERE { wd:Q29011 wdt:P1431 ?x0 . wd:Q29011 wdt:P58 ?x0 . ?x0 wdt:P108 wd:Q1054807 . ?x0 wdt:P108 wd:Q11490471 . ?x0 wdt:P108 wd:Q11371930 . ?x0 wdt:P108 wd:Q182950 . ?x0 wdt:P108 wd:Q1136386 . ?x0 wdt:P108 wd:Q947907 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\n?x0 wdt:P108 M1 .\n?x0 wdt:P108 M2 .\n?x0 wdt:P108 M3 .\n?x0 wdt:P108 M4 .\n?x0 wdt:P108 M5 .\n?x0 wdt:P108 M6\n}",
    "id": 77647,
    "split": "gold_test",
    "en": "Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q29011 is Q29011\nwdt:P1431 is P1431\nwd:Q29011 is Q29011\nwdt:P58 is P58\nwdt:P108 is P108\nwd:Q1054807 is Q1054807\nwdt:P108 is P108\nwd:Q11490471 is Q11490471\nwdt:P108 is P108\nwd:Q11371930 is Q11371930\nwdt:P108 is P108\nwd:Q182950 is Q182950\nwdt:P108 is P108\nwd:Q1136386 is Q1136386\nwdt:P108 is P108\nwd:Q947907 is Q947907",
    "masks": [
      {
        "uri": "wd:Q29011",
        "mask": "kg:2550"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8123"
      },
      {
        "uri": "wd:Q29011",
        "mask": "kg:9147"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7101"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5142"
      },
      {
        "uri": "wd:Q1054807",
        "mask": "kg:3791"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:8566"
      },
      {
        "uri": "wd:Q11490471",
        "mask": "kg:2383"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:2820"
      },
      {
        "uri": "wd:Q11371930",
        "mask": "kg:6855"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:1910"
      },
      {
        "uri": "wd:Q182950",
        "mask": "kg:9772"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:3833"
      },
      {
        "uri": "wd:Q1136386",
        "mask": "kg:4927"
      },
      {
        "uri": "wdt:P108",
        "mask": "kg:5579"
      },
      {
        "uri": "wd:Q947907",
        "mask": "kg:0935"
      }
    ],
    "masked": "Translate the question “Was Howl's Moving Castle 's executive producer and writer employed by Nibariki , Ghibli Museum , and TMS Entertainment and employed by Shin-Ei Animation , Studio Ghibli , and Tokuma Memorial Cultural Foundation for Animation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9147 is Q29011\nkg:8123 is P1431\nkg:9147 is Q29011\nkg:7101 is P58\nkg:5579 is P108\nkg:3791 is Q1054807\nkg:5579 is P108\nkg:2383 is Q11490471\nkg:5579 is P108\nkg:6855 is Q11371930\nkg:5579 is P108\nkg:9772 is Q182950\nkg:5579 is P108\nkg:4927 is Q1136386\nkg:5579 is P108\nkg:0935 is Q947907"
  },
  {
    "CFQquestionIdx": 139181,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "What cinematographer and writer of M0 , M1 , M2 , and M3 directed , wrote , and executive produced M4",
    "questionPatternModEntities_he": "איזה צלם וכותב של M0, M1, M2 ו-M3 ביים, כתב והפיק מנהלים את M4",
    "questionPatternModEntities_kn": "M0, M1, M2 ಮತ್ತು M3 ನ ಯಾವ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು ಬರಹಗಾರರು M4 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2和M3的哪位电影摄影师和作家导演、编剧和执行制作了M4？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "What cinematographer and writer of [Herbie] , [Anyone Lived in a Pretty How Town] , [Filmmaker] , and [1:42.08] directed , wrote , and executive produced [Star Wars: Episode IV – A New Hope]",
    "questionWithBrackets_he": "איזה צלם וכותב של [הרבי], [כל אחד גר בעיר יפה] , [יוצר סרטים] ו-[1:42.08] ביים, כתב והפיק בפועל את [מלחמת הכוכבים: פרק IV - תקווה חדשה]",
    "questionWithBrackets_kn": "ಯಾವ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು ಬರಹಗಾರ [ಹರ್ಬಿ] , [ಯಾರೂ ಲಿವ್ಡ್ ಇನ್ ಎ ಪ್ರೆಟಿ ಹೌ ಟೌನ್] , [ಚಲನಚಿತ್ರ ನಿರ್ಮಾಪಕ] , ಮತ್ತು [1:42.08] ನಿರ್ದೇಶನ, ಬರೆದ ಮತ್ತು ನಿರ್ವಾಹಕರು [ಸ್ಟಾರ್ ವಾರ್ಸ್: ಎಪಿಸೋಡ್ IV – ಎ ನ್ಯೂ ಹೋಪ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[Herbie]、[Anyone Lived in a Pretty How Town]、[电影制作人] 和 [1:42.08] 的哪位电影摄影师和编剧导演、编剧和执行制作了 [星球大战：第四集 – 新希望]？",
    "recursionDepth": 46,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1415127 wdt:P344 ?x0 . wd:Q208910 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q1609393 wdt:P344 ?x0 . wd:Q17738 wdt:P57 ?x0 . wd:Q17738 wdt:P1431 ?x0 . wd:Q17738 wdt:P58 ?x0 . wd:Q1415127 wdt:P58 ?x0 . wd:Q208910 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q1609393 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM4 wdt:P57 ?x0 .\nM4 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P58 ?x0\n}",
    "id": 139181,
    "split": "gold_test",
    "en": "What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1415127 is Q1415127\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q17738 is Q17738\nwdt:P57 is P57\nwd:Q17738 is Q17738\nwdt:P1431 is P1431\nwd:Q17738 is Q17738\nwdt:P58 is P58\nwd:Q1415127 is Q1415127\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q1609393 is Q1609393\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q1415127",
        "mask": "kg:4627"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:7282"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:0096"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2862"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:3070"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:1511"
      },
      {
        "uri": "wd:Q1609393",
        "mask": "kg:6993"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8139"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:4507"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1640"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:5516"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0804"
      },
      {
        "uri": "wd:Q17738",
        "mask": "kg:7307"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7991"
      },
      {
        "uri": "wd:Q1415127",
        "mask": "kg:1376"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3306"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:4247"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2973"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:5456"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5090"
      },
      {
        "uri": "wd:Q1609393",
        "mask": "kg:9076"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5153"
      }
    ],
    "masked": "Translate the question “What cinematographer and writer of Herbie , Anyone Lived in a Pretty How Town , Filmmaker , and 1:42.08 directed , wrote , and executive produced Star Wars: Episode IV – A New Hope” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1376 is Q1415127\nkg:8139 is P344\nkg:4247 is Q208910\nkg:8139 is P344\nkg:5456 is Q613974\nkg:8139 is P344\nkg:9076 is Q1609393\nkg:8139 is P344\nkg:7307 is Q17738\nkg:1640 is P57\nkg:7307 is Q17738\nkg:0804 is P1431\nkg:7307 is Q17738\nkg:5153 is P58\nkg:1376 is Q1415127\nkg:5153 is P58\nkg:4247 is Q208910\nkg:5153 is P58\nkg:5456 is Q613974\nkg:5153 is P58\nkg:9076 is Q1609393\nkg:5153 is P58"
  },
  {
    "CFQquestionIdx": 140224,
    "expectedResponse": [
      "David Lynch"
    ],
    "questionPatternModEntities": "What cinematographer , director , and editor of M3 and M4 executive produced M0 and executive produced M1 and M2",
    "questionPatternModEntities_he": "איזה צלם, במאי ועורך של M3 ו-M4 הפיק את M0 והמנהל הפיק את M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಮತ್ತು M4 ಕಾರ್ಯನಿರ್ವಾಹಕನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕರು, ನಿರ್ದೇಶಕರು ಮತ್ತು ಸಂಪಾದಕರು M0 ಅನ್ನು ನಿರ್ಮಿಸಿದರು ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕರು M1 ಮತ್ತು M2 ಅನ್ನು ನಿರ್ಮಿಸಿದರು",
    "questionPatternModEntities_zh": "M3和M4的执行制片人M0和执行制片M1和M2是哪个摄影师、导演和剪辑师？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What cinematographer , director , and editor of [Rabbits] and [Six Men Getting Sick] executive produced [Twin Peaks] and executive produced [Twin Peaks: Fire Walk with Me] and [My Son, My Son, What Have Ye Done?]",
    "questionWithBrackets_he": "איזה צלם קולנוע, במאי ועורך של [ארנבים] ו-[Six Men Getting Sick] הפיק את [Twin Peaks] ואיזה הפיק את [Twin Peaks: Fire Walk with Me] ו-[My Son, My Son, What Have Ye Done?] ",
    "questionWithBrackets_kn": "ಯಾವ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ದೇಶಕ ಮತ್ತು ಸಂಪಾದಕರು [ಮೊಲಗಳು] ಮತ್ತು [ಸಿಕ್ಸ್ ಮೆನ್ ಗೆಟ್ಟಿಂಗ್ ಸಿಕ್] ಕಾರ್ಯನಿರ್ವಾಹಕ [ಟ್ವಿನ್ ಪೀಕ್ಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ್ದಾರೆ [ಟ್ವಿನ್ ಪೀಕ್ಸ್: ಫೈರ್ ವಾಕ್ ವಿತ್ ಮಿ] ಮತ್ತು [ಮೈ ಸನ್, ಮೈ ಸನ್, ವಾಟ್ ಹ್ಯಾವ್ ಯೇ ಡನ್?] ",
    "questionWithBrackets_zh": "[兔子]和[六个生病的人]执行制作[双峰]和执行制作[双峰：与我一起走火]和[我的儿子，我的儿子，你做了什么？]的摄影师、导演和编辑",
    "recursionDepth": 46,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q3485595 wdt:P344 ?x0 . wd:Q1473406 wdt:P344 ?x0 . wd:Q3485595 wdt:P57 ?x0 . wd:Q1473406 wdt:P57 ?x0 . wd:Q3485595 wdt:P1040 ?x0 . wd:Q1473406 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1431 ?x0 . wd:Q1511905 wdt:P1431 ?x0 . wd:Q2085 wdt:P1431 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM3 wdt:P344 ?x0 .\nM4 wdt:P344 ?x0 .\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0\n}",
    "id": 140224,
    "split": "gold_test",
    "en": "What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?",
    "results": [
      [
        "wd:Q2071"
      ]
    ],
    "direct": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q3485595 is Q3485595\nwdt:P344 is P344\nwd:Q1473406 is Q1473406\nwdt:P344 is P344\nwd:Q3485595 is Q3485595\nwdt:P57 is P57\nwd:Q1473406 is Q1473406\nwdt:P57 is P57\nwd:Q3485595 is Q3485595\nwdt:P1040 is P1040\nwd:Q1473406 is Q1473406\nwdt:P1040 is P1040\nwd:Q1140578 is Q1140578\nwdt:P1431 is P1431\nwd:Q1511905 is Q1511905\nwdt:P1431 is P1431\nwd:Q2085 is Q2085\nwdt:P1431 is P1431",
    "masks": [
      {
        "uri": "wd:Q3485595",
        "mask": "kg:6492"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:5146"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:9297"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8220"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:7235"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7510"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:7528"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6668"
      },
      {
        "uri": "wd:Q3485595",
        "mask": "kg:9846"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3138"
      },
      {
        "uri": "wd:Q1473406",
        "mask": "kg:7526"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8526"
      },
      {
        "uri": "wd:Q1140578",
        "mask": "kg:7545"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:5439"
      },
      {
        "uri": "wd:Q1511905",
        "mask": "kg:7971"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:6617"
      },
      {
        "uri": "wd:Q2085",
        "mask": "kg:7016"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:3677"
      }
    ],
    "masked": "Translate the question “What cinematographer , director , and editor of Rabbits and Six Men Getting Sick executive produced Twin Peaks and executive produced Twin Peaks: Fire Walk with Me and My Son, My Son, What Have Ye Done?” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9846 is Q3485595\nkg:8220 is P344\nkg:7526 is Q1473406\nkg:8220 is P344\nkg:9846 is Q3485595\nkg:6668 is P57\nkg:7526 is Q1473406\nkg:6668 is P57\nkg:9846 is Q3485595\nkg:8526 is P1040\nkg:7526 is Q1473406\nkg:8526 is P1040\nkg:7545 is Q1140578\nkg:3677 is P1431\nkg:7971 is Q1511905\nkg:3677 is P1431\nkg:7016 is Q2085\nkg:3677 is P1431"
  },
  {
    "CFQquestionIdx": 31750,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a director and editor of M0 , M1 , M2 , and M3 marry M4 and M5 and marry M6",
    "questionPatternModEntities_he": "האם מנהל ועורך של M0 , M1 , M2 ו-M3 התחתן עם M4 ו-M5 והתחתן עם M6",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ನ ನಿರ್ದೇಶಕರು ಮತ್ತು ಸಂಪಾದಕರು M4 ಮತ್ತು M5 ಅನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ ಮತ್ತು M6 ರನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M0、M1、M2、M3的导演和编辑有没有和M4和M5结婚，和M6结婚？",
    "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a director and editor of [The Kid] , [The Floorwalker] , [A Woman] , and [Modern Times] marry [Lita Grey] and [Mildred Harris] and marry [Oona O'Neill]",
    "questionWithBrackets_he": "האם במאי ועורך של [The Kid], [The Floorwalker], [A Woman] ו-[Modern Times] התחתן עם [ליטה גריי] ו[Mildred Harris] והתחתן עם [Oona O&#39;Neill]",
    "questionWithBrackets_kn": "[ದಿ ಕಿಡ್] , [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] , [ಎ ವುಮನ್] ಮತ್ತು [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] ನ ನಿರ್ದೇಶಕರು ಮತ್ತು ಸಂಪಾದಕರು [ಲಿಟಾ ಗ್ರೇ] ಮತ್ತು [ಮಿಲ್ಡ್ರೆಡ್ ಹ್ಯಾರಿಸ್] ಮತ್ತು [ಊನಾ ಓ&#39;ನೀಲ್] ಅವರನ್ನು ಮದುವೆಯಾಗಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "[The Kid]、[The Floorwalker]、[A Woman] 和[Modern Times] 的导演和编辑是否与[Lita Grey] 和[Mildred Harris] 结婚并与[Oona O&#39;Neill] 结婚？",
    "recursionDepth": 47,
    "sparql": "ASK WHERE { wd:Q2449461 wdt:P57 ?x0 . wd:Q45602 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q374172 wdt:P57 ?x0 . wd:Q2449461 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q166739 wdt:P1040 ?x0 . wd:Q374172 wdt:P1040 ?x0 . ?x0 wdt:P26 wd:Q32337 . ?x0 wdt:P26 wd:Q137808 . ?x0 wdt:P26 wd:Q241019 . FILTER ( ?x0 != wd:Q32337 ) . FILTER ( ?x0 != wd:Q137808 ) . FILTER ( ?x0 != wd:Q241019 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\n?x0 wdt:P26 M4 .\n?x0 wdt:P26 M5 .\n?x0 wdt:P26 M6 .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
    "id": 31750,
    "split": "gold_test",
    "en": "Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2449461 is Q2449461\nwdt:P57 is P57\nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q374172 is Q374172\nwdt:P57 is P57\nwd:Q2449461 is Q2449461\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019",
    "masks": [
      {
        "uri": "wd:Q2449461",
        "mask": "kg:9369"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0885"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:4187"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3705"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:0536"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8864"
      },
      {
        "uri": "wd:Q374172",
        "mask": "kg:3685"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1503"
      },
      {
        "uri": "wd:Q2449461",
        "mask": "kg:1085"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1978"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:7001"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3011"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:2856"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8750"
      },
      {
        "uri": "wd:Q374172",
        "mask": "kg:8455"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:2813"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0765"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:2533"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0181"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:5954"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:3979"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:8170"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:5719"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:4195"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:6480"
      }
    ],
    "masked": "Translate the question “Did a director and editor of The Kid , The Floorwalker , A Woman , and Modern Times marry Lita Grey and Mildred Harris and marry Oona O'Neill” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1085 is Q2449461\nkg:1503 is P57\nkg:7001 is Q45602\nkg:1503 is P57\nkg:2856 is Q166739\nkg:1503 is P57\nkg:8455 is Q374172\nkg:1503 is P57\nkg:1085 is Q2449461\nkg:2813 is P1040\nkg:7001 is Q45602\nkg:2813 is P1040\nkg:2856 is Q166739\nkg:2813 is P1040\nkg:8455 is Q374172\nkg:2813 is P1040\nkg:3979 is P26\nkg:5719 is Q32337\nkg:3979 is P26\nkg:4195 is Q137808\nkg:3979 is P26\nkg:6480 is Q241019\nkg:5719 is Q32337\nkg:4195 is Q137808\nkg:6480 is Q241019"
  },
  {
    "CFQquestionIdx": 49945,
    "expectedResponse": false,
    "questionPatternModEntities": "Was M0 a male person that M2 , M3 , and M4 were written by , edited by , and directed by",
    "questionPatternModEntities_he": "האם M0 היה אדם זכר ש-M2 , M3 ו-M4 נכתבו על ידי , נערך על ידי ובוימו על ידי",
    "questionPatternModEntities_kn": "M2 , M3 , ಮತ್ತು M4 ಅವರು ಬರೆದ, ಸಂಪಾದಿಸಿದ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ M0 ಪುರುಷ ವ್ಯಕ್ತಿಯೇ",
    "questionPatternModEntities_zh": "M0 是 M2、M3 和 M4 由 编写、编辑和导演的男性吗？",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by",
    "questionWithBrackets": "Was [Charlie Chaplin] a male person that [Charlie Chaplin] , [Charlie Chaplin] , and [Charlie Chaplin] were written by , edited by , and directed by",
    "questionWithBrackets_he": "האם [צ&#39;רלי צ&#39;פלין] היה אדם זכר ש[צ&#39;רלי צ&#39;פלין] , [צ&#39;רלי צ&#39;פלין] ו[צ&#39;רלי צ&#39;פלין] נכתבו על ידי , נערכו על ידי ובוימו על ידי",
    "questionWithBrackets_kn": "[ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಒಬ್ಬ ಪುರುಷ ವ್ಯಕ್ತಿಯೇ [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] , [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಮತ್ತು [ಚಾರ್ಲಿ ಚಾಪ್ಲಿನ್] ಅವರು ಬರೆದಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[查理卓别林]是[查理卓别林]、[查理卓别林]和[查理卓别林]的编剧、编辑和导演的男性吗？",
    "recursionDepth": 47,
    "sparql": "ASK WHERE { wd:Q882 wdt:P31 wd:Q5 . wd:Q1070468 wdt:P57 wd:Q882 . wd:Q166739 wdt:P57 wd:Q882 . wd:Q214723 wdt:P57 wd:Q882 . wd:Q1070468 wdt:P1040 wd:Q882 . wd:Q166739 wdt:P1040 wd:Q882 . wd:Q214723 wdt:P1040 wd:Q882 . wd:Q1070468 wdt:P58 wd:Q882 . wd:Q166739 wdt:P58 wd:Q882 . wd:Q214723 wdt:P58 wd:Q882 . wd:Q882 wdt:P21 wd:Q6581097 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM0 wdt:P31 wd:Q5 .\nM2 wdt:P57 M0 .\nM3 wdt:P57 M0 .\nM4 wdt:P57 M0 .\nM2 wdt:P1040 M0 .\nM3 wdt:P1040 M0 .\nM4 wdt:P1040 M0 .\nM2 wdt:P58 M0 .\nM3 wdt:P58 M0 .\nM4 wdt:P58 M0 .\nM0 wdt:P21 wd:Q6581097\n}",
    "id": 49945,
    "split": "gold_test",
    "en": "Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by",
    "results": [
      true
    ],
    "direct": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q882 is Q882\nwdt:P31 is P31\nwd:Q5 is Q5\nwd:Q1070468 is Q1070468\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P57 is P57\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q882 is Q882\nwd:Q1070468 is Q1070468\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q166739 is Q166739\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q214723 is Q214723\nwdt:P58 is P58\nwd:Q882 is Q882\nwd:Q882 is Q882\nwdt:P21 is P21\nwd:Q6581097 is Q6581097",
    "masks": [
      {
        "uri": "wd:Q882",
        "mask": "kg:8969"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:9816"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:1774"
      },
      {
        "uri": "wd:Q1070468",
        "mask": "kg:1659"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7180"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:6173"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:3019"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5825"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:4890"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:4727"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8011"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:7017"
      },
      {
        "uri": "wd:Q1070468",
        "mask": "kg:9204"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:7711"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:8778"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:4280"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8489"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:8139"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:6752"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3311"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:8961"
      },
      {
        "uri": "wd:Q1070468",
        "mask": "kg:4785"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0333"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:5183"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:3688"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7582"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:7778"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:0411"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2155"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:8449"
      },
      {
        "uri": "wd:Q882",
        "mask": "kg:0701"
      },
      {
        "uri": "wdt:P21",
        "mask": "kg:8680"
      },
      {
        "uri": "wd:Q6581097",
        "mask": "kg:2393"
      }
    ],
    "masked": "Translate the question “Was Charlie Chaplin a male person that Charlie Chaplin , Charlie Chaplin , and Charlie Chaplin were written by , edited by , and directed by” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0701 is Q882\nkg:9816 is P31\nkg:1774 is Q5\nkg:4785 is Q1070468\nkg:8011 is P57\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:8011 is P57\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:8011 is P57\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:3311 is P1040\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:3311 is P1040\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:3311 is P1040\nkg:0701 is Q882\nkg:4785 is Q1070468\nkg:2155 is P58\nkg:0701 is Q882\nkg:3688 is Q166739\nkg:2155 is P58\nkg:0701 is Q882\nkg:0411 is Q214723\nkg:2155 is P58\nkg:0701 is Q882\nkg:0701 is Q882\nkg:8680 is P21\nkg:2393 is Q6581097"
  },
  {
    "CFQquestionIdx": 152345,
    "expectedResponse": [
      "The Walt Disney Company"
    ],
    "questionPatternModEntities": "What distributor and producer of M6 was acquired by M0 and M1 and acquired by M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M6 נרכש על ידי M0 ו-M1 ונרכש על ידי M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು M0 ಮತ್ತು M1 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು ಮತ್ತು M2, M3, M4 ಮತ್ತು M5 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆ",
    "questionPatternModEntities_zh": "M0 和 M1 收购了 M6 的哪个分销商和生产商，并被 M2、M3、M4 和 M5 收购？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What distributor and producer of [Grand Canyon] was acquired by [Laurene Powell Jobs] and [Fidelity Investments] and acquired by [BlackRock] , [State Street Global Advisors] , [T. Rowe Price] , and [Capital Group Companies]",
    "questionWithBrackets_he": "המפיץ והמפיק של [גרנד קניון] נרכש על ידי [לורן פאוול ג&#39;ובס] ו-[Fidelity Investments] ונרכש על ידי [BlackRock], [State Street Global Advisors], [T. רו פרייס] , ו[חברות קבוצת קפיטל]",
    "questionWithBrackets_kn": "[ಗ್ರ್ಯಾಂಡ್ ಕ್ಯಾನ್ಯನ್] ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು [ಲಾರೆನ್ ಪೊವೆಲ್ ಜಾಬ್ಸ್] ಮತ್ತು [ಫಿಡೆಲಿಟಿ ಇನ್ವೆಸ್ಟ್‌ಮೆಂಟ್ಸ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡರು ಮತ್ತು [ಬ್ಲ್ಯಾಕ್‌ರಾಕ್] , [ಸ್ಟೇಟ್ ಸ್ಟ್ರೀಟ್ ಗ್ಲೋಬಲ್ ಅಡ್ವೈಸರ್ಸ್] , [ಟಿ. ರೋವ್ ಪ್ರೈಸ್] , ಮತ್ತು [ಕ್ಯಾಪಿಟಲ್ ಗ್ರೂಪ್ ಕಂಪನಿಗಳು]",
    "questionWithBrackets_zh": "[Grand Canyon] 的分销商和生产商被 [Laurene Powell Jobs] 和 [Fidelity Investments] 收购并被 [BlackRock]、[State Street Global Advisors]、[T.罗价格]，和[资本集团公司]？",
    "recursionDepth": 47,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2062523 wdt:P750 ?x0 . wd:Q2062523 wdt:P272 ?x0 . ?x0 wdt:P127 wd:Q3511946 . ?x0 wdt:P127 wd:Q7603552 . ?x0 wdt:P127 wd:Q1411292 . ?x0 wdt:P127 wd:Q3133593 . ?x0 wdt:P127 wd:Q219635 . ?x0 wdt:P127 wd:Q505275 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM6 wdt:P750 ?x0 .\nM6 wdt:P272 ?x0 .\n?x0 wdt:P127 M0 .\n?x0 wdt:P127 M1 .\n?x0 wdt:P127 M2 .\n?x0 wdt:P127 M3 .\n?x0 wdt:P127 M4 .\n?x0 wdt:P127 M5\n}",
    "id": 152345,
    "split": "gold_test",
    "en": "What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies",
    "results": [],
    "direct": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q1411292 is Q1411292\nwdt:P127 is P127\nwd:Q3133593 is Q3133593\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275",
    "masks": [
      {
        "uri": "wd:Q2062523",
        "mask": "kg:4652"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:2576"
      },
      {
        "uri": "wd:Q2062523",
        "mask": "kg:5133"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:7572"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:2667"
      },
      {
        "uri": "wd:Q3511946",
        "mask": "kg:8244"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:2856"
      },
      {
        "uri": "wd:Q7603552",
        "mask": "kg:8940"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:0580"
      },
      {
        "uri": "wd:Q1411292",
        "mask": "kg:6539"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1659"
      },
      {
        "uri": "wd:Q3133593",
        "mask": "kg:6221"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:4557"
      },
      {
        "uri": "wd:Q219635",
        "mask": "kg:8972"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:3466"
      },
      {
        "uri": "wd:Q505275",
        "mask": "kg:5809"
      }
    ],
    "masked": "Translate the question “What distributor and producer of Grand Canyon was acquired by Laurene Powell Jobs and Fidelity Investments and acquired by BlackRock , State Street Global Advisors , T. Rowe Price , and Capital Group Companies” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5133 is Q2062523\nkg:2576 is P750\nkg:5133 is Q2062523\nkg:7572 is P272\nkg:3466 is P127\nkg:8244 is Q3511946\nkg:3466 is P127\nkg:8940 is Q7603552\nkg:3466 is P127\nkg:6539 is Q1411292\nkg:3466 is P127\nkg:6221 is Q3133593\nkg:3466 is P127\nkg:8972 is Q219635\nkg:3466 is P127\nkg:5809 is Q505275"
  },
  {
    "CFQquestionIdx": 137957,
    "expectedResponse": [
      "Charlie Chaplin"
    ],
    "questionPatternModEntities": "What composer , editor , and director of M3 and M4 directed M5 and edited M0 , M1 , and M2",
    "questionPatternModEntities_he": "איזה מלחין, עורך ובמאי של M3 ו-M4 ביים את M5 וערך את M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M3 ಮತ್ತು M4 ರ ಯಾವ ಸಂಯೋಜಕರು, ಸಂಪಾದಕರು ಮತ್ತು ನಿರ್ದೇಶಕರು M5 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು M0, M1 ಮತ್ತು M2 ಅನ್ನು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M3和M4的作曲家、编辑和导演是什么导演M5和剪辑M0、M1和M2的？",
    "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What composer , editor , and director of [City Lights] and [Modern Times] directed [The Floorwalker] and edited [His Musical Career] , [The Kid] , and [The Gold Rush]",
    "questionWithBrackets_he": "איזה מלחין, עורך ובמאי של [City Lights] ו-[Modern Times] ביים את [The Floorwalker] וערך את [הקריירה המוזיקלית שלו], [הילד] ו[הבהלה לזהב]",
    "questionWithBrackets_kn": "[ಸಿಟಿ ಲೈಟ್ಸ್] ಮತ್ತು [ಮಾಡರ್ನ್ ಟೈಮ್ಸ್] ನ ಯಾವ ಸಂಯೋಜಕರು, ಸಂಪಾದಕರು ಮತ್ತು ನಿರ್ದೇಶಕರು [ದಿ ಫ್ಲೋರ್‌ವಾಕರ್] ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ ಮತ್ತು [ಅವರ ಸಂಗೀತ ವೃತ್ತಿಜೀವನ], [ದಿ ಕಿಡ್] ಮತ್ತು [ದಿ ಗೋಲ್ಡ್ ರಶ್] ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[City Lights] 和 [Modern Times] 的作曲家、编辑和导演是什么导演 [The Floorwalker] 并编辑了 [他的音乐生涯]、[The Kid] 和 [The Gold Rush]？",
    "recursionDepth": 47,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q45602 wdt:P57 ?x0 . wd:Q166739 wdt:P57 ?x0 . wd:Q238211 wdt:P57 ?x0 . wd:Q2345349 wdt:P1040 ?x0 . wd:Q45602 wdt:P1040 ?x0 . wd:Q214723 wdt:P1040 ?x0 . wd:Q238211 wdt:P1040 ?x0 . wd:Q374172 wdt:P1040 ?x0 . wd:Q45602 wdt:P86 ?x0 . wd:Q238211 wdt:P86 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM3 wdt:P57 ?x0 .\nM4 wdt:P57 ?x0 .\nM5 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM4 wdt:P1040 ?x0 .\nM3 wdt:P86 ?x0 .\nM4 wdt:P86 ?x0\n}",
    "id": 137957,
    "split": "gold_test",
    "en": "What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush",
    "results": [
      [
        "wd:Q882"
      ]
    ],
    "direct": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q45602 is Q45602\nwdt:P57 is P57\nwd:Q166739 is Q166739\nwdt:P57 is P57\nwd:Q238211 is Q238211\nwdt:P57 is P57\nwd:Q2345349 is Q2345349\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P1040 is P1040\nwd:Q214723 is Q214723\nwdt:P1040 is P1040\nwd:Q238211 is Q238211\nwdt:P1040 is P1040\nwd:Q374172 is Q374172\nwdt:P1040 is P1040\nwd:Q45602 is Q45602\nwdt:P86 is P86\nwd:Q238211 is Q238211\nwdt:P86 is P86",
    "masks": [
      {
        "uri": "wd:Q45602",
        "mask": "kg:7040"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4620"
      },
      {
        "uri": "wd:Q166739",
        "mask": "kg:1841"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2980"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:4246"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2333"
      },
      {
        "uri": "wd:Q2345349",
        "mask": "kg:9627"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:8926"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:9259"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5742"
      },
      {
        "uri": "wd:Q214723",
        "mask": "kg:8503"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9294"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:1081"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6039"
      },
      {
        "uri": "wd:Q374172",
        "mask": "kg:3515"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:9546"
      },
      {
        "uri": "wd:Q45602",
        "mask": "kg:5517"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:1813"
      },
      {
        "uri": "wd:Q238211",
        "mask": "kg:0094"
      },
      {
        "uri": "wdt:P86",
        "mask": "kg:2003"
      }
    ],
    "masked": "Translate the question “What composer , editor , and director of City Lights and Modern Times directed The Floorwalker and edited His Musical Career , The Kid , and The Gold Rush” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:5517 is Q45602\nkg:2333 is P57\nkg:1841 is Q166739\nkg:2333 is P57\nkg:0094 is Q238211\nkg:2333 is P57\nkg:9627 is Q2345349\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:9546 is P1040\nkg:8503 is Q214723\nkg:9546 is P1040\nkg:0094 is Q238211\nkg:9546 is P1040\nkg:3515 is Q374172\nkg:9546 is P1040\nkg:5517 is Q45602\nkg:2003 is P86\nkg:0094 is Q238211\nkg:2003 is P86"
  },
  {
    "CFQquestionIdx": 33041,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film director that M2 and M3 were directed by and starred influence M0 and influence M1",
    "questionPatternModEntities_he": "האם במאי קולנוע ש-M2 ו-M3 בוימו על ידי וכיכבו השפיע על M0 והשפיע על M1",
    "questionPatternModEntities_kn": "M2 ಮತ್ತು M3 ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ನಟಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು M0 ಮತ್ತು ಪ್ರಭಾವ M1 ಅನ್ನು ಪ್ರಭಾವಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M2和M3导演和主演的电影导演对M0和M1有影响吗？",
    "questionTemplate": "Did a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [VP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a film director that [There Will Be No Leave Today] and [The Killers] were directed by and starred influence [Lars von Trier] and influence [Aran Cosentino]",
    "questionWithBrackets_he": "האם במאי קולנוע ש[לא יהיה חופש היום] ו[הרוצחים] בוימו על ידי וכיכבו השפיע על [לארס פון טרייר] והשפיע על [ארן קוסנטינו]",
    "questionWithBrackets_kn": "[ದೇರ್ ವಿಲ್ ಬಿ ನೋ ಲೀವ್ ಟುಡೇ] ಮತ್ತು [ದಿ ಕಿಲ್ಲರ್ಸ್] ನಿರ್ದೇಶಿಸಿದ ಮತ್ತು ನಟಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು [ಲಾರ್ಸ್ ವಾನ್ ಟ್ರೈಯರ್] ಮತ್ತು ಪ್ರಭಾವವನ್ನು [ಅರಾನ್ ಕೊಸೆಂಟಿನೊ] ಮಾಡಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "《今日无休》和《杀手锏》的导演和主演影响了[拉尔斯·冯·提尔]并影响了[阿兰·科森蒂诺]？",
    "recursionDepth": 48,
    "sparql": "ASK WHERE { wd:Q1970252 wdt:P161 ?x0 . wd:Q3017093 wdt:P161 ?x0 . wd:Q1970252 wdt:P57 ?x0 . wd:Q3017093 wdt:P57 ?x0 . wd:Q88965291 wdt:P737 ?x0 . wd:Q133730 wdt:P737 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM0 wdt:P737 ?x0 .\nM1 wdt:P737 ?x0\n}",
    "id": 33041,
    "split": "gold_test",
    "en": "Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino",
    "results": [
      false
    ],
    "direct": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1970252 is Q1970252\nwdt:P161 is P161\nwd:Q3017093 is Q3017093\nwdt:P161 is P161\nwd:Q1970252 is Q1970252\nwdt:P57 is P57\nwd:Q3017093 is Q3017093\nwdt:P57 is P57\nwd:Q88965291 is Q88965291\nwdt:P737 is P737\nwd:Q133730 is Q133730\nwdt:P737 is P737",
    "masks": [
      {
        "uri": "wd:Q1970252",
        "mask": "kg:5722"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7116"
      },
      {
        "uri": "wd:Q3017093",
        "mask": "kg:5124"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9852"
      },
      {
        "uri": "wd:Q1970252",
        "mask": "kg:9388"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:1164"
      },
      {
        "uri": "wd:Q3017093",
        "mask": "kg:7353"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7838"
      },
      {
        "uri": "wd:Q88965291",
        "mask": "kg:1056"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:6574"
      },
      {
        "uri": "wd:Q133730",
        "mask": "kg:3435"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:4919"
      }
    ],
    "masked": "Translate the question “Did a film director that There Will Be No Leave Today and The Killers were directed by and starred influence Lars von Trier and influence Aran Cosentino” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9388 is Q1970252\nkg:9852 is P161\nkg:7353 is Q3017093\nkg:9852 is P161\nkg:9388 is Q1970252\nkg:7838 is P57\nkg:7353 is Q3017093\nkg:7838 is P57\nkg:1056 is Q88965291\nkg:4919 is P737\nkg:3435 is Q133730\nkg:4919 is P737"
  },
  {
    "CFQquestionIdx": 34166,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film editor that married M5 , M6 , and M7 and influenced M1 , M2 , and M3 found M4",
    "questionPatternModEntities_he": "האם עורך סרטים שהתחתן עם M5, M6 ו-M7 והשפיע על M1, M2 ו-M3 מצא את M4",
    "questionPatternModEntities_kn": "M5 , M6 , ಮತ್ತು M7 ಅನ್ನು ವಿವಾಹವಾದ ಮತ್ತು M1 , M2 , ಮತ್ತು M3 ಅನ್ನು ಪ್ರಭಾವಿಸಿದ ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು M4 ಅನ್ನು ಕಂಡುಕೊಂಡಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "一个娶了M5、M6、M7，影响了M1、M2、M3的剪辑师找到了M4吗？",
    "questionTemplate": "Did a [NP_SIMPLE] that [VP_SIMPLE] [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity] [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a film editor that married [Oona O'Neill] , [Lita Grey] , and [Mildred Harris] and influenced [Federico Fellini] , [Marcel Marceau] , and [Harold Lloyd] found [United Artists Corporation]",
    "questionWithBrackets_he": "האם עורך סרטים שהתחתן עם [אונה אוניל], [ליטה גריי] ו[מילדרד האריס] והשפיע על [פדריקו פליני], [מרסל מרסו] ו[הרולד לויד] מצא את [United Artists Corporation]",
    "questionWithBrackets_kn": "[ಊನಾ ಓ&#39;ನೀಲ್] , [ಲಿಟಾ ಗ್ರೇ] ಮತ್ತು [ಮಿಲ್ಡ್ರೆಡ್ ಹ್ಯಾರಿಸ್] ಅವರನ್ನು ವಿವಾಹವಾದ ಮತ್ತು [ಫೆಡೆರಿಕೊ ಫೆಲಿನಿ] , [ಮಾರ್ಸೆಲ್ ಮಾರ್ಸಿಯು] ಮತ್ತು [ಹೆರಾಲ್ಡ್ ಲಾಯ್ಡ್] [ಯುನೈಟೆಡ್ ಆರ್ಟಿಸ್ಟ್ಸ್ ಕಾರ್ಪೊರೇಷನ್] ಅನ್ನು ಪ್ರಭಾವಿಸಿದ ಚಲನಚಿತ್ರ ಸಂಪಾದಕರು ಕಂಡುಕೊಂಡಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "与[乌娜·奥尼尔]、[丽塔·格雷]和[米尔德里德·哈里斯]结婚并影响[费德里科·费里尼]、[马塞尔·马索]和[哈罗德·劳埃德]的电影剪辑师找到了[联合艺术家公司]吗？",
    "recursionDepth": 48,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q7042855 . wd:Q7371 wdt:P737 ?x0 . wd:Q104340 wdt:P737 ?x0 . wd:Q157191 wdt:P737 ?x0 . wd:Q219400 wdt:P112 ?x0 . ?x0 wdt:P26 wd:Q241019 . ?x0 wdt:P26 wd:Q32337 . ?x0 wdt:P26 wd:Q137808 . FILTER ( ?x0 != wd:Q241019 ) . FILTER ( ?x0 != wd:Q32337 ) . FILTER ( ?x0 != wd:Q137808 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q7042855 .\nM1 wdt:P737 ?x0 .\nM2 wdt:P737 ?x0 .\nM3 wdt:P737 ?x0 .\nM4 wdt:P112 ?x0 .\n?x0 wdt:P26 M5 .\n?x0 wdt:P26 M6 .\n?x0 wdt:P26 M7 .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 ) .\nFILTER ( ?x0 != M7 )\n}",
    "id": 34166,
    "split": "gold_test",
    "en": "Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q7042855 is Q7042855\nwd:Q7371 is Q7371\nwdt:P737 is P737\nwd:Q104340 is Q104340\nwdt:P737 is P737\nwd:Q157191 is Q157191\nwdt:P737 is P737\nwd:Q219400 is Q219400\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q241019 is Q241019\nwdt:P26 is P26\nwd:Q32337 is Q32337\nwdt:P26 is P26\nwd:Q137808 is Q137808\nwd:Q241019 is Q241019\nwd:Q32337 is Q32337\nwd:Q137808 is Q137808",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0887"
      },
      {
        "uri": "wd:Q7042855",
        "mask": "kg:3790"
      },
      {
        "uri": "wd:Q7371",
        "mask": "kg:2780"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:3842"
      },
      {
        "uri": "wd:Q104340",
        "mask": "kg:5797"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:6624"
      },
      {
        "uri": "wd:Q157191",
        "mask": "kg:8926"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:0599"
      },
      {
        "uri": "wd:Q219400",
        "mask": "kg:0897"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:4096"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:7728"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:2340"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0474"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:1739"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:9515"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:5727"
      },
      {
        "uri": "wd:Q241019",
        "mask": "kg:5107"
      },
      {
        "uri": "wd:Q32337",
        "mask": "kg:2787"
      },
      {
        "uri": "wd:Q137808",
        "mask": "kg:6495"
      }
    ],
    "masked": "Translate the question “Did a film editor that married Oona O'Neill , Lita Grey , and Mildred Harris and influenced Federico Fellini , Marcel Marceau , and Harold Lloyd found United Artists Corporation” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0887 is P106\nkg:3790 is Q7042855\nkg:2780 is Q7371\nkg:0599 is P737\nkg:5797 is Q104340\nkg:0599 is P737\nkg:8926 is Q157191\nkg:0599 is P737\nkg:0897 is Q219400\nkg:4096 is P112\nkg:9515 is P26\nkg:5107 is Q241019\nkg:9515 is P26\nkg:2787 is Q32337\nkg:9515 is P26\nkg:6495 is Q137808\nkg:5107 is Q241019\nkg:2787 is Q32337\nkg:6495 is Q137808"
  },
  {
    "CFQquestionIdx": 198521,
    "expectedResponse": [
      "Agnès Varda"
    ],
    "questionPatternModEntities": "Which director , star , and writer of M0 , M1 , and M2 married , influenced , and was influenced by M3",
    "questionPatternModEntities_he": "איזה במאי, כוכב וכותב של M0, M1 ו-M2 התחתן, השפיע והושפע מ-M3",
    "questionPatternModEntities_kn": "M0 , M1 , ಮತ್ತು M2 ನ ಯಾವ ನಿರ್ದೇಶಕ, ತಾರೆ ಮತ್ತು ಬರಹಗಾರ M3 ನಿಂದ ವಿವಾಹವಾದರು, ಪ್ರಭಾವಿತರಾದರು ಮತ್ತು ಪ್ರಭಾವಿತರಾದರು",
    "questionPatternModEntities_zh": "M0、M1、M2的哪位导演、明星、编剧结婚、影响、受M3影响？",
    "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
    "questionWithBrackets": "Which director , star , and writer of [Jane B. par Agnès V.] , [The Beaches of Agnès] , and [The World of Jacques Demy] married , influenced , and was influenced by [Jacques Demy]",
    "questionWithBrackets_he": "איזה במאי, כוכב וכותב של [Jane B. Par Agnès V.], [The Beaches of Agnès] ו-[The World of Jacques Demy] התחתן, השפיע והושפע מ[Jacques Demy]",
    "questionWithBrackets_kn": "[ಜೇನ್ ಬಿ. ಪಾರ್ ಆಗ್ನೆಸ್ ವಿ.] , [ದಿ ಬೀಚ್ ಆಫ್ ಆಗ್ನೆಸ್] ಮತ್ತು [ದಿ ವರ್ಲ್ಡ್ ಆಫ್ ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ಯಾವ ನಿರ್ದೇಶಕ, ತಾರೆ ಮತ್ತು ಬರಹಗಾರ [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ವಿವಾಹವಾದರು, ಪ್ರಭಾವಿತರು ಮತ್ತು ಪ್ರಭಾವಿತರಾದರು",
    "questionWithBrackets_zh": "[Jane B. par Agnès V.]、[阿涅斯的海滩]和[雅克·德米的世界]的哪位导演、明星和作家与[雅克·德米]结婚、影响并受[雅克·德米]影响？",
    "recursionDepth": 48,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2709504 wdt:P161 ?x0 . wd:Q3204825 wdt:P161 ?x0 . wd:Q3161846 wdt:P161 ?x0 . wd:Q2709504 wdt:P57 ?x0 . wd:Q3204825 wdt:P57 ?x0 . wd:Q3161846 wdt:P57 ?x0 . wd:Q2709504 wdt:P58 ?x0 . wd:Q3204825 wdt:P58 ?x0 . wd:Q3161846 wdt:P58 ?x0 . wd:Q312258 wdt:P737 ?x0 . ?x0 wdt:P737 wd:Q312258 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P161 ?x0 .\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P737 ?x0 .\n?x0 wdt:P737 M3 .\n?x0 wdt:P26 M3 .\nFILTER ( ?x0 != M3 )\n}",
    "id": 198521,
    "split": "gold_test",
    "en": "Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy",
    "results": [
      [
        "wd:Q229990"
      ]
    ],
    "direct": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2709504 is Q2709504\nwdt:P161 is P161\nwd:Q3204825 is Q3204825\nwdt:P161 is P161\nwd:Q3161846 is Q3161846\nwdt:P161 is P161\nwd:Q2709504 is Q2709504\nwdt:P57 is P57\nwd:Q3204825 is Q3204825\nwdt:P57 is P57\nwd:Q3161846 is Q3161846\nwdt:P57 is P57\nwd:Q2709504 is Q2709504\nwdt:P58 is P58\nwd:Q3204825 is Q3204825\nwdt:P58 is P58\nwd:Q3161846 is Q3161846\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P737 is P737\nwd:Q312258 is Q312258\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258",
    "masks": [
      {
        "uri": "wd:Q2709504",
        "mask": "kg:4553"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:3908"
      },
      {
        "uri": "wd:Q3204825",
        "mask": "kg:4170"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6484"
      },
      {
        "uri": "wd:Q3161846",
        "mask": "kg:3206"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:8954"
      },
      {
        "uri": "wd:Q2709504",
        "mask": "kg:9791"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6438"
      },
      {
        "uri": "wd:Q3204825",
        "mask": "kg:6475"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6413"
      },
      {
        "uri": "wd:Q3161846",
        "mask": "kg:3387"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:5044"
      },
      {
        "uri": "wd:Q2709504",
        "mask": "kg:7352"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3357"
      },
      {
        "uri": "wd:Q3204825",
        "mask": "kg:9335"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5429"
      },
      {
        "uri": "wd:Q3161846",
        "mask": "kg:0549"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3768"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:8311"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:5772"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:1253"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:8002"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:1025"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:9179"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:0156"
      }
    ],
    "masked": "Translate the question “Which director , star , and writer of Jane B. par Agnès V. , The Beaches of Agnès , and The World of Jacques Demy married , influenced , and was influenced by Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:7352 is Q2709504\nkg:8954 is P161\nkg:9335 is Q3204825\nkg:8954 is P161\nkg:0549 is Q3161846\nkg:8954 is P161\nkg:7352 is Q2709504\nkg:5044 is P57\nkg:9335 is Q3204825\nkg:5044 is P57\nkg:0549 is Q3161846\nkg:5044 is P57\nkg:7352 is Q2709504\nkg:3768 is P58\nkg:9335 is Q3204825\nkg:3768 is P58\nkg:0549 is Q3161846\nkg:3768 is P58\nkg:0156 is Q312258\nkg:1253 is P737\nkg:1253 is P737\nkg:0156 is Q312258\nkg:1025 is P26\nkg:0156 is Q312258\nkg:0156 is Q312258"
  },
  {
    "CFQquestionIdx": 152325,
    "expectedResponse": [
      "Amazon"
    ],
    "questionPatternModEntities": "What distributor and producer of M6 was acquired by M0 and M1 and acquired M2 , M3 , M4 , and M5",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M6 נרכש על ידי M0 ו-M1 ורכש את M2 , M3 , M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು M0 ಮತ್ತು M1 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು ಮತ್ತು M2 , M3 , M4 ಮತ್ತು M5 ಅನ್ನು ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು",
    "questionPatternModEntities_zh": "M0 和 M1 收购了 M6 的哪个经销商和生产商，并收购了 M2、M3、M4 和 M5？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
    "questionWithBrackets": "What distributor and producer of [Mozart in the Jungle] was acquired by [The Vanguard Group] and [BlackRock] and acquired [Amazon CloudFront] , [.amazon] , [Amazon Kindle] , and [AbeBooks]",
    "questionWithBrackets_he": "איזה מפיץ ומפיק של [מוצרט בג&#39;ונגל] נרכש על ידי [קבוצת ואנגארד] ו-[BlackRock] ורכש את [Amazon CloudFront], [.amazon], [Amazon Kindle] ו-[AbeBooks]",
    "questionWithBrackets_kn": "[ಮೊಜಾರ್ಟ್ ಇನ್ ದಿ ಜಂಗಲ್] ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು [ದಿ ವ್ಯಾನ್‌ಗಾರ್ಡ್ ಗ್ರೂಪ್] ಮತ್ತು [ಬ್ಲ್ಯಾಕ್‌ರಾಕ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆ ಮತ್ತು [ಅಮೆಜಾನ್ ಕ್ಲೌಡ್‌ಫ್ರಂಟ್] , [.ಅಮೆಜಾನ್] , [ಅಮೆಜಾನ್ ಕಿಂಡಲ್] ಮತ್ತು [ಅಬೆಬುಕ್ಸ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆ",
    "questionWithBrackets_zh": "[The Vanguard Group] 和 [BlackRock] 收购了 [The Vanguard Group] 和 [BlackRock] 并收购了 [Amazon CloudFront]、[.amazon]、[Amazon Kindle] 和 [AbeBooks] 的哪家经销商和制作人？",
    "recursionDepth": 48,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q17070012 wdt:P750 ?x0 . wd:Q17070012 wdt:P272 ?x0 . ?x0 wdt:P127 wd:Q849363 . ?x0 wdt:P127 wd:Q219635 . wd:Q65073147 wdt:P127 ?x0 . wd:Q318128 wdt:P127 ?x0 . wd:Q136469 wdt:P127 ?x0 . wd:Q1628791 wdt:P127 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM6 wdt:P750 ?x0 .\nM6 wdt:P272 ?x0 .\n?x0 wdt:P127 M0 .\n?x0 wdt:P127 M1 .\nM2 wdt:P127 ?x0 .\nM3 wdt:P127 ?x0 .\nM4 wdt:P127 ?x0 .\nM5 wdt:P127 ?x0\n}",
    "id": 152325,
    "split": "gold_test",
    "en": "What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks",
    "results": [],
    "direct": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q17070012 is Q17070012\nwdt:P750 is P750\nwd:Q17070012 is Q17070012\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q849363 is Q849363\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwd:Q65073147 is Q65073147\nwdt:P127 is P127\nwd:Q318128 is Q318128\nwdt:P127 is P127\nwd:Q136469 is Q136469\nwdt:P127 is P127\nwd:Q1628791 is Q1628791\nwdt:P127 is P127",
    "masks": [
      {
        "uri": "wd:Q17070012",
        "mask": "kg:7767"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:7869"
      },
      {
        "uri": "wd:Q17070012",
        "mask": "kg:9760"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9429"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:7370"
      },
      {
        "uri": "wd:Q849363",
        "mask": "kg:1153"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:4318"
      },
      {
        "uri": "wd:Q219635",
        "mask": "kg:5185"
      },
      {
        "uri": "wd:Q65073147",
        "mask": "kg:4799"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:7631"
      },
      {
        "uri": "wd:Q318128",
        "mask": "kg:0370"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:6083"
      },
      {
        "uri": "wd:Q136469",
        "mask": "kg:8446"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:8920"
      },
      {
        "uri": "wd:Q1628791",
        "mask": "kg:5147"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:6391"
      }
    ],
    "masked": "Translate the question “What distributor and producer of Mozart in the Jungle was acquired by The Vanguard Group and BlackRock and acquired Amazon CloudFront , .amazon , Amazon Kindle , and AbeBooks” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9760 is Q17070012\nkg:7869 is P750\nkg:9760 is Q17070012\nkg:9429 is P272\nkg:6391 is P127\nkg:1153 is Q849363\nkg:6391 is P127\nkg:5185 is Q219635\nkg:4799 is Q65073147\nkg:6391 is P127\nkg:0370 is Q318128\nkg:6391 is P127\nkg:8446 is Q136469\nkg:6391 is P127\nkg:5147 is Q1628791\nkg:6391 is P127"
  },
  {
    "CFQquestionIdx": 106868,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a star , editor , and cinematographer of M4 and M5 a Spanish writer and director of M0 , M1 , and M2",
    "questionPatternModEntities_he": "האם כוכב, עורך וצלם של M4 ו-M5 היה סופר ובמאי ספרדי של M0, M1 ו-M2",
    "questionPatternModEntities_kn": "M4 ಮತ್ತು M5 ನ ಸ್ಟಾರ್, ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ ಸ್ಪ್ಯಾನಿಷ್ ಬರಹಗಾರ ಮತ್ತು M0, M1 ಮತ್ತು M2 ನಿರ್ದೇಶಕರಾಗಿದ್ದರೇ",
    "questionPatternModEntities_zh": "M4 和 M5 的明星、剪辑师和摄影师是 M0、M1 和 M2 的西班牙作家和导演吗？",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
    "questionWithBrackets": "Was a star , editor , and cinematographer of [Female Vampire] and [No label defined] a Spanish writer and director of [99 Women] , [No label defined] , and [The Blood of Fu Manchu]",
    "questionWithBrackets_he": "האם כוכבת, עורכת וצלמת קולנוע של [ערפדית נשית] ו[אין תווית מוגדרת] סופרת ובמאית ספרדית של [99 נשים], [ללא תווית מוגדרת] ו[הדם של פו מנצ&#39;ו]",
    "questionWithBrackets_kn": "[ಸ್ತ್ರೀ ರಕ್ತಪಿಶಾಚಿ] ನ ನಕ್ಷತ್ರ, ಸಂಪಾದಕ ಮತ್ತು ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು [ಯಾವುದೇ ಲೇಬಲ್ ಅನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿಲ್ಲ] [99 ಮಹಿಳೆಯರು] , [ಯಾವುದೇ ಲೇಬಲ್ ಅನ್ನು ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿಲ್ಲ] , ಮತ್ತು [ದಿ ಬ್ಲಡ್ ಆಫ್ ಫೂ ಮಂಚು] ನ ಸ್ಪ್ಯಾನಿಷ್ ಬರಹಗಾರ ಮತ್ತು ನಿರ್ದೇಶಕರಾಗಿದ್ದರು",
    "questionWithBrackets_zh": "[女吸血鬼]和[未定义标签]的明星、编辑和摄影师是[99个女人]、[未定义标签]和[傅满洲之血]的西班牙作家和导演吗？",
    "recursionDepth": 49,
    "sparql": "ASK WHERE { wd:Q4004365 wdt:P161 ?x0 . wd:Q3207690 wdt:P161 ?x0 . wd:Q4004365 wdt:P344 ?x0 . wd:Q3207690 wdt:P344 ?x0 . wd:Q3633009 wdt:P57 ?x0 . wd:Q289021 wdt:P57 ?x0 . wd:Q463946 wdt:P57 ?x0 . wd:Q4004365 wdt:P1040 ?x0 . wd:Q3207690 wdt:P1040 ?x0 . wd:Q3633009 wdt:P58 ?x0 . wd:Q289021 wdt:P58 ?x0 . wd:Q463946 wdt:P58 ?x0 . ?x0 wdt:P27 wd:Q29 }",
    "sparqlPatternModEntities": "ASK WHERE {\nM4 wdt:P161 ?x0 .\nM5 wdt:P161 ?x0 .\nM4 wdt:P344 ?x0 .\nM5 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM4 wdt:P1040 ?x0 .\nM5 wdt:P1040 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\n?x0 wdt:P27 wd:Q29\n}",
    "id": 106868,
    "split": "gold_test",
    "en": "Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q4004365 is Q4004365\nwdt:P161 is P161\nwd:Q3207690 is Q3207690\nwdt:P161 is P161\nwd:Q4004365 is Q4004365\nwdt:P344 is P344\nwd:Q3207690 is Q3207690\nwdt:P344 is P344\nwd:Q3633009 is Q3633009\nwdt:P57 is P57\nwd:Q289021 is Q289021\nwdt:P57 is P57\nwd:Q463946 is Q463946\nwdt:P57 is P57\nwd:Q4004365 is Q4004365\nwdt:P1040 is P1040\nwd:Q3207690 is Q3207690\nwdt:P1040 is P1040\nwd:Q3633009 is Q3633009\nwdt:P58 is P58\nwd:Q289021 is Q289021\nwdt:P58 is P58\nwd:Q463946 is Q463946\nwdt:P58 is P58\nwdt:P27 is P27\nwd:Q29 is Q29",
    "masks": [
      {
        "uri": "wd:Q4004365",
        "mask": "kg:8646"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:5058"
      },
      {
        "uri": "wd:Q3207690",
        "mask": "kg:0219"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9178"
      },
      {
        "uri": "wd:Q4004365",
        "mask": "kg:6550"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:4165"
      },
      {
        "uri": "wd:Q3207690",
        "mask": "kg:8773"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:0078"
      },
      {
        "uri": "wd:Q3633009",
        "mask": "kg:6997"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8909"
      },
      {
        "uri": "wd:Q289021",
        "mask": "kg:9876"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2333"
      },
      {
        "uri": "wd:Q463946",
        "mask": "kg:9098"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8940"
      },
      {
        "uri": "wd:Q4004365",
        "mask": "kg:1976"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1654"
      },
      {
        "uri": "wd:Q3207690",
        "mask": "kg:9187"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3229"
      },
      {
        "uri": "wd:Q3633009",
        "mask": "kg:6030"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7148"
      },
      {
        "uri": "wd:Q289021",
        "mask": "kg:0939"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7034"
      },
      {
        "uri": "wd:Q463946",
        "mask": "kg:0652"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3045"
      },
      {
        "uri": "wdt:P27",
        "mask": "kg:1754"
      },
      {
        "uri": "wd:Q29",
        "mask": "kg:0418"
      }
    ],
    "masked": "Translate the question “Was a star , editor , and cinematographer of Female Vampire and No label defined a Spanish writer and director of 99 Women , No label defined , and The Blood of Fu Manchu” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:1976 is Q4004365\nkg:9178 is P161\nkg:9187 is Q3207690\nkg:9178 is P161\nkg:1976 is Q4004365\nkg:0078 is P344\nkg:9187 is Q3207690\nkg:0078 is P344\nkg:6030 is Q3633009\nkg:8940 is P57\nkg:0939 is Q289021\nkg:8940 is P57\nkg:0652 is Q463946\nkg:8940 is P57\nkg:1976 is Q4004365\nkg:3229 is P1040\nkg:9187 is Q3207690\nkg:3229 is P1040\nkg:6030 is Q3633009\nkg:3045 is P58\nkg:0939 is Q289021\nkg:3045 is P58\nkg:0652 is Q463946\nkg:3045 is P58\nkg:1754 is P27\nkg:0418 is Q29"
  },
  {
    "CFQquestionIdx": 92810,
    "expectedResponse": false,
    "questionPatternModEntities": "Was a cinematographer that M1 and M2 were founded by and M3 , M4 , and M5 were founded by M6 's spouse",
    "questionPatternModEntities_he": "האם צלם קולנוע ש-M1 ו-M2 נוסדו על ידי ו-M3, M4 ו-M5 הוקמו על ידי בן הזוג של M6",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಅನ್ನು ಸ್ಥಾಪಿಸಿದ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು M3, M4 ಮತ್ತು M5 ಅನ್ನು M6 ಅವರ ಸಂಗಾತಿಯಿಂದ ಸ್ಥಾಪಿಸಲಾಗಿದೆಯೇ",
    "questionPatternModEntities_zh": "M1和M2是由M6的配偶创立的电影摄影师吗？M3，M4和M5是由M6的配偶创立的吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [entity] , [entity] , and [entity] were [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer that [Industrial Light & Magic] and [THX] were founded by and [Jediism] , [Lucasfilm] , and [LucasArts] were founded by [Mellody Hobson] 's spouse",
    "questionWithBrackets_he": "האם צלם קולנוע ש[Industrial Light &amp; Magic] ו-[THX] נוסדו על ידי ו-[Jediism], [Lucasfilm] ו-[LucasArts] הוקמו על ידי בן זוגה של [מלודי הובסון]",
    "questionWithBrackets_kn": "[ಇಂಡಸ್ಟ್ರಿಯಲ್ ಲೈಟ್ &amp; ಮ್ಯಾಜಿಕ್] ಮತ್ತು [THX] ಅನ್ನು ಸ್ಥಾಪಿಸಿದ ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಮತ್ತು [ಜೇಡಿಸಮ್] , [ಲುಕಾಸ್‌ಫಿಲ್ಮ್] ಮತ್ತು [ಲುಕಾಸ್ ಆರ್ಟ್ಸ್] [ಮೆಲೋಡಿ ಹಾಬ್ಸನ್] ಅವರ ಸಂಗಾತಿಯಿಂದ ಸ್ಥಾಪಿಸಲಾಗಿದೆಯೇ",
    "questionWithBrackets_zh": "[工业光魔]和[THX]是由[Jediism]、[Lucasfilm]和[LucasArts]创立的电影摄影师，[Melody Hobson]的配偶创立？",
    "recursionDepth": 49,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . wd:Q216611 wdt:P112 ?x0 . wd:Q242446 wdt:P112 ?x0 . wd:Q258945 wdt:P112 ?x0 . wd:Q746676 wdt:P112 ?x0 . wd:Q1044630 wdt:P112 ?x0 . ?x0 wdt:P26 wd:Q6813152 . FILTER ( ?x0 != wd:Q6813152 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\nM1 wdt:P112 ?x0 .\nM2 wdt:P112 ?x0 .\nM3 wdt:P112 ?x0 .\nM4 wdt:P112 ?x0 .\nM5 wdt:P112 ?x0 .\n?x0 wdt:P26 M6 .\nFILTER ( ?x0 != M6 )\n}",
    "id": 92810,
    "split": "gold_test",
    "en": "Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse",
    "results": [
      false
    ],
    "direct": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q216611 is Q216611\nwdt:P112 is P112\nwd:Q242446 is Q242446\nwdt:P112 is P112\nwd:Q258945 is Q258945\nwdt:P112 is P112\nwd:Q746676 is Q746676\nwdt:P112 is P112\nwd:Q1044630 is Q1044630\nwdt:P112 is P112\nwdt:P26 is P26\nwd:Q6813152 is Q6813152\nwd:Q6813152 is Q6813152",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:2039"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:2511"
      },
      {
        "uri": "wd:Q216611",
        "mask": "kg:0403"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:5975"
      },
      {
        "uri": "wd:Q242446",
        "mask": "kg:5448"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:4421"
      },
      {
        "uri": "wd:Q258945",
        "mask": "kg:7772"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:3631"
      },
      {
        "uri": "wd:Q746676",
        "mask": "kg:3386"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:8322"
      },
      {
        "uri": "wd:Q1044630",
        "mask": "kg:1255"
      },
      {
        "uri": "wdt:P112",
        "mask": "kg:4287"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:2681"
      },
      {
        "uri": "wd:Q6813152",
        "mask": "kg:0550"
      },
      {
        "uri": "wd:Q6813152",
        "mask": "kg:5134"
      }
    ],
    "masked": "Translate the question “Was a cinematographer that Industrial Light & Magic and THX were founded by and Jediism , Lucasfilm , and LucasArts were founded by Mellody Hobson 's spouse” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:2039 is P106\nkg:2511 is Q222344\nkg:0403 is Q216611\nkg:4287 is P112\nkg:5448 is Q242446\nkg:4287 is P112\nkg:7772 is Q258945\nkg:4287 is P112\nkg:3386 is Q746676\nkg:4287 is P112\nkg:1255 is Q1044630\nkg:4287 is P112\nkg:2681 is P26\nkg:5134 is Q6813152\nkg:5134 is Q6813152"
  },
  {
    "CFQquestionIdx": 195687,
    "expectedResponse": [
      "Danial Hajibarat"
    ],
    "questionPatternModEntities": "Which cinematographer and star of M1 , M2 , and M3 wrote , directed , executive produced , and edited M0",
    "questionPatternModEntities_he": "איזה צלם וכוכב של M1, M2 ו-M3 כתב, ביים, הפיק וערך את M0",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆ M0 ಅನ್ನು ಬರೆದು, ನಿರ್ದೇಶಿಸಿದ, ಕಾರ್ಯನಿರ್ವಾಹಕ ನಿರ್ಮಿಸಿದ ಮತ್ತು ಸಂಪಾದಿಸಿದ",
    "questionPatternModEntities_zh": "M1、M2和M3的哪位电影摄影师和明星编写、导演、执行制作和剪辑M0？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Which cinematographer and star of [Inception] , [Game Over] , and [Liberation] wrote , directed , executive produced , and edited [The Madness]",
    "questionWithBrackets_he": "איזה צלם וכוכב של [Inception], [Game Over] ו-[Liberation] כתב, ביים, הפיק וערך את [The Madness]",
    "questionWithBrackets_kn": "[ಇನ್ಸೆಪ್ಶನ್] , [ಗೇಮ್ ಓವರ್] ಮತ್ತು [ಲಿಬರೇಶನ್] ನ ಯಾವ ಛಾಯಾಗ್ರಾಹಕ ಮತ್ತು ತಾರೆ ಬರೆದಿದ್ದಾರೆ, ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ಕಾರ್ಯನಿರ್ವಾಹಕರು [ದಿ ಮ್ಯಾಡ್ನೆಸ್] ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆ",
    "questionWithBrackets_zh": "[盗梦空间]、[游戏结束]和[解放]的哪位摄影师和明星编剧、导演、执行制作和剪辑了[疯狂]？",
    "recursionDepth": 49,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q85520081 wdt:P161 ?x0 . wd:Q96054985 wdt:P161 ?x0 . wd:Q85532437 wdt:P161 ?x0 . wd:Q85520081 wdt:P344 ?x0 . wd:Q96054985 wdt:P344 ?x0 . wd:Q85532437 wdt:P344 ?x0 . wd:Q87778273 wdt:P57 ?x0 . wd:Q87778273 wdt:P1040 ?x0 . wd:Q87778273 wdt:P1431 ?x0 . wd:Q87778273 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM1 wdt:P161 ?x0 .\nM2 wdt:P161 ?x0 .\nM3 wdt:P161 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P57 ?x0 .\nM0 wdt:P1040 ?x0 .\nM0 wdt:P1431 ?x0 .\nM0 wdt:P58 ?x0\n}",
    "id": 195687,
    "split": "gold_test",
    "en": "Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness",
    "results": [
      [
        "wd:Q84701006"
      ]
    ],
    "direct": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q85520081 is Q85520081\nwdt:P161 is P161\nwd:Q96054985 is Q96054985\nwdt:P161 is P161\nwd:Q85532437 is Q85532437\nwdt:P161 is P161\nwd:Q85520081 is Q85520081\nwdt:P344 is P344\nwd:Q96054985 is Q96054985\nwdt:P344 is P344\nwd:Q85532437 is Q85532437\nwdt:P344 is P344\nwd:Q87778273 is Q87778273\nwdt:P57 is P57\nwd:Q87778273 is Q87778273\nwdt:P1040 is P1040\nwd:Q87778273 is Q87778273\nwdt:P1431 is P1431\nwd:Q87778273 is Q87778273\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wd:Q85520081",
        "mask": "kg:6825"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:4877"
      },
      {
        "uri": "wd:Q96054985",
        "mask": "kg:0847"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:7308"
      },
      {
        "uri": "wd:Q85532437",
        "mask": "kg:6386"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:9445"
      },
      {
        "uri": "wd:Q85520081",
        "mask": "kg:3761"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6307"
      },
      {
        "uri": "wd:Q96054985",
        "mask": "kg:4775"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:9490"
      },
      {
        "uri": "wd:Q85532437",
        "mask": "kg:3942"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8425"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:7202"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:8621"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:4596"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:6722"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:1929"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:0779"
      },
      {
        "uri": "wd:Q87778273",
        "mask": "kg:1857"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0856"
      }
    ],
    "masked": "Translate the question “Which cinematographer and star of Inception , Game Over , and Liberation wrote , directed , executive produced , and edited The Madness” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3761 is Q85520081\nkg:9445 is P161\nkg:4775 is Q96054985\nkg:9445 is P161\nkg:3942 is Q85532437\nkg:9445 is P161\nkg:3761 is Q85520081\nkg:8425 is P344\nkg:4775 is Q96054985\nkg:8425 is P344\nkg:3942 is Q85532437\nkg:8425 is P344\nkg:1857 is Q87778273\nkg:8621 is P57\nkg:1857 is Q87778273\nkg:6722 is P1040\nkg:1857 is Q87778273\nkg:0779 is P1431\nkg:1857 is Q87778273\nkg:0856 is P58"
  },
  {
    "CFQquestionIdx": 213228,
    "expectedResponse": [
      "George Lucas"
    ],
    "questionPatternModEntities": "Which writer and cinematographer of M0 , M1 , M2 , and M3 married a person and influenced M4 and M5",
    "questionPatternModEntities_he": "איזה סופר וצלם קולנוע של M0, M1, M2 ו-M3 התחתן עם אדם והשפיע על M4 ו-M5",
    "questionPatternModEntities_kn": "M0 , M1 , M2 , ಮತ್ತು M3 ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಿನಿಮಾಟೋಗ್ರಾಫರ್ ಒಬ್ಬ ವ್ಯಕ್ತಿಯನ್ನು ವಿವಾಹವಾದರು ಮತ್ತು M4 ಮತ್ತು M5 ಅನ್ನು ಪ್ರಭಾವಿಸಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M0、M1、M2、M3的哪位作家和摄影师嫁给了一个人并影响了M4和M5？",
    "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "Which writer and cinematographer of [The Emperor] , [Anyone Lived in a Pretty How Town] , [1:42.08] , and [Herbie] married a person and influenced [Marcus Orelias] and [Lorne Lanning]",
    "questionWithBrackets_he": "איזה סופר וצלם קולנוע של [הקיסר], [כל אחד גר בעיר יפה] , [1:42.08] ו[הרבי] התחתנו עם אדם והשפיעו על [מרקוס אורליאס] ו[לורן לאנינג]",
    "questionWithBrackets_kn": "[ದಿ ಎಂಪರರ್] ನ ಯಾವ ಬರಹಗಾರ ಮತ್ತು ಸಿನೆಮ್ಯಾಟೋಗ್ರಾಫರ್ , [ಯಾರೂ ಲಿವ್ಡ್ ಇನ್ ಎ ಪ್ರೆಟಿ ಹೌ ಟೌನ್] , [1:42.08] , ಮತ್ತು [ಹರ್ಬಿ] ಒಬ್ಬ ವ್ಯಕ್ತಿಯನ್ನು ವಿವಾಹವಾದರು ಮತ್ತು [ಮಾರ್ಕಸ್ ಒರೆಲಿಯಾಸ್] ಮತ್ತು [ಲೋರ್ನ್ ಲ್ಯಾನಿಂಗ್] ಪ್ರಭಾವ ಬೀರಿದರು",
    "questionWithBrackets_zh": "[皇帝]、[任何人住在漂亮小镇]、[1:42.08] 和[赫比] 的哪位作家和摄影师嫁给了一个人并影响了[马库斯·奥雷利亚斯] 和[洛恩·兰宁]？",
    "recursionDepth": 49,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q1609393 wdt:P344 ?x0 . wd:Q2411065 wdt:P344 ?x0 . wd:Q208910 wdt:P344 ?x0 . wd:Q613974 wdt:P344 ?x0 . wd:Q1609393 wdt:P58 ?x0 . wd:Q2411065 wdt:P58 ?x0 . wd:Q208910 wdt:P58 ?x0 . wd:Q613974 wdt:P58 ?x0 . wd:Q52306598 wdt:P737 ?x0 . wd:Q717378 wdt:P737 ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P31 wd:Q5 . FILTER ( ?x0 != ?x1 ) }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM0 wdt:P344 ?x0 .\nM1 wdt:P344 ?x0 .\nM2 wdt:P344 ?x0 .\nM3 wdt:P344 ?x0 .\nM0 wdt:P58 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P737 ?x0 .\nM5 wdt:P737 ?x0 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P31 wd:Q5 .\nFILTER ( ?x0 != ?x1 )\n}",
    "id": 213228,
    "split": "gold_test",
    "en": "Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning",
    "results": [
      [
        "wd:Q38222"
      ]
    ],
    "direct": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q1609393 is Q1609393\nwdt:P344 is P344\nwd:Q2411065 is Q2411065\nwdt:P344 is P344\nwd:Q208910 is Q208910\nwdt:P344 is P344\nwd:Q613974 is Q613974\nwdt:P344 is P344\nwd:Q1609393 is Q1609393\nwdt:P58 is P58\nwd:Q2411065 is Q2411065\nwdt:P58 is P58\nwd:Q208910 is Q208910\nwdt:P58 is P58\nwd:Q613974 is Q613974\nwdt:P58 is P58\nwd:Q52306598 is Q52306598\nwdt:P737 is P737\nwd:Q717378 is Q717378\nwdt:P737 is P737\nwdt:P26 is P26\nwdt:P31 is P31\nwd:Q5 is Q5",
    "masks": [
      {
        "uri": "wd:Q1609393",
        "mask": "kg:8355"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:2204"
      },
      {
        "uri": "wd:Q2411065",
        "mask": "kg:7892"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8425"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:4112"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:6756"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:2787"
      },
      {
        "uri": "wdt:P344",
        "mask": "kg:8427"
      },
      {
        "uri": "wd:Q1609393",
        "mask": "kg:9012"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:3136"
      },
      {
        "uri": "wd:Q2411065",
        "mask": "kg:0352"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2707"
      },
      {
        "uri": "wd:Q208910",
        "mask": "kg:3655"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:1958"
      },
      {
        "uri": "wd:Q613974",
        "mask": "kg:8850"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0611"
      },
      {
        "uri": "wd:Q52306598",
        "mask": "kg:3218"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:3888"
      },
      {
        "uri": "wd:Q717378",
        "mask": "kg:6555"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:7578"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:7316"
      },
      {
        "uri": "wdt:P31",
        "mask": "kg:6397"
      },
      {
        "uri": "wd:Q5",
        "mask": "kg:8216"
      }
    ],
    "masked": "Translate the question “Which writer and cinematographer of The Emperor , Anyone Lived in a Pretty How Town , 1:42.08 , and Herbie married a person and influenced Marcus Orelias and Lorne Lanning” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:9012 is Q1609393\nkg:8427 is P344\nkg:0352 is Q2411065\nkg:8427 is P344\nkg:3655 is Q208910\nkg:8427 is P344\nkg:8850 is Q613974\nkg:8427 is P344\nkg:9012 is Q1609393\nkg:0611 is P58\nkg:0352 is Q2411065\nkg:0611 is P58\nkg:3655 is Q208910\nkg:0611 is P58\nkg:8850 is Q613974\nkg:0611 is P58\nkg:3218 is Q52306598\nkg:7578 is P737\nkg:6555 is Q717378\nkg:7578 is P737\nkg:7316 is P26\nkg:6397 is P31\nkg:8216 is Q5"
  },
  {
    "CFQquestionIdx": 92908,
    "expectedResponse": true,
    "questionPatternModEntities": "Was a cinematographer that M1 and M2 were directed by , executive produced by , edited by , and written by M3 's director",
    "questionPatternModEntities_he": "האם צלם קולנוע ש-M1 ו-M2 בוימו על ידי , הופק על ידי , נערך על ידי , ונכתב על ידי הבמאי של M3",
    "questionPatternModEntities_kn": "M1 ಮತ್ತು M2 ಅನ್ನು ನಿರ್ದೇಶಿಸಿದ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಅವರು ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು M3 ನ ನಿರ್ದೇಶಕರು ಬರೆದಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1 和 M2 是由 M3 的导演导演、执行制片、编辑和编剧的电影摄影师吗？",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "questionWithBrackets": "Was a cinematographer that [Uzak] and [Clouds of May] were directed by , executive produced by , edited by , and written by [Nuri Bilge Ceylan trilogy] 's director",
    "questionWithBrackets_he": "האם צלם קולנוע ש[עוזק] ו[ענני מאי] בוימו על ידי , הופק על ידי , נערך על ידי , ונכתב על ידי הבמאי של [טרילוגיית נורי בילגה ציילן ]",
    "questionWithBrackets_kn": "[ಉಜಾಕ್] ಮತ್ತು [ಕ್ಲೌಡ್ಸ್ ಆಫ್ ಮೇ] ನಿರ್ದೇಶಿಸಿದ ಛಾಯಾಗ್ರಾಹಕ, ನಿರ್ವಾಹಕರು ನಿರ್ಮಿಸಿದ್ದಾರೆ, ಸಂಪಾದಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ [ನುರಿ ಬಿಲ್ಜ್ ಸೆಲಾನ್ ಟ್ರೈಲಾಜಿ] ನಿರ್ದೇಶಕರೇ",
    "questionWithBrackets_zh": "[乌扎克] 和 [五月的云] 是由 [努里·比尔格·锡兰 (Nuri Bilge Ceylan) 三部曲] 的导演导演、执行制片、编辑和编剧的电影摄影师吗？",
    "recursionDepth": 50,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q222344 . wd:Q18609037 wdt:P57 ?x0 . wd:Q1361018 wdt:P57 ?x0 . wd:Q2086445 wdt:P57 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2086445 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1431 ?x0 . wd:Q2086445 wdt:P1431 ?x0 . wd:Q1361018 wdt:P58 ?x0 . wd:Q2086445 wdt:P58 ?x0 }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q222344 .\nM1 wdt:P57 ?x0 .\nM2 wdt:P57 ?x0 .\nM3 wdt:P57 ?x0 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM1 wdt:P1431 ?x0 .\nM2 wdt:P1431 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0\n}",
    "id": 92908,
    "split": "gold_test",
    "en": "Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director",
    "results": [
      true
    ],
    "direct": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q222344 is Q222344\nwd:Q18609037 is Q18609037\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P57 is P57\nwd:Q2086445 is Q2086445\nwdt:P57 is P57\nwd:Q1361018 is Q1361018\nwdt:P1040 is P1040\nwd:Q2086445 is Q2086445\nwdt:P1040 is P1040\nwd:Q1361018 is Q1361018\nwdt:P1431 is P1431\nwd:Q2086445 is Q2086445\nwdt:P1431 is P1431\nwd:Q1361018 is Q1361018\nwdt:P58 is P58\nwd:Q2086445 is Q2086445\nwdt:P58 is P58",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:0722"
      },
      {
        "uri": "wd:Q222344",
        "mask": "kg:7860"
      },
      {
        "uri": "wd:Q18609037",
        "mask": "kg:4939"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:6236"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:0184"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0056"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:4842"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:4444"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:3117"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4204"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:9362"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:5926"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:8772"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:8782"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:5765"
      },
      {
        "uri": "wdt:P1431",
        "mask": "kg:2405"
      },
      {
        "uri": "wd:Q1361018",
        "mask": "kg:3690"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5186"
      },
      {
        "uri": "wd:Q2086445",
        "mask": "kg:0265"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5354"
      }
    ],
    "masked": "Translate the question “Was a cinematographer that Uzak and Clouds of May were directed by , executive produced by , edited by , and written by Nuri Bilge Ceylan trilogy 's director” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0722 is P106\nkg:7860 is Q222344\nkg:4939 is Q18609037\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:4444 is P57\nkg:0265 is Q2086445\nkg:4444 is P57\nkg:3690 is Q1361018\nkg:5926 is P1040\nkg:0265 is Q2086445\nkg:5926 is P1040\nkg:3690 is Q1361018\nkg:2405 is P1431\nkg:0265 is Q2086445\nkg:2405 is P1431\nkg:3690 is Q1361018\nkg:5354 is P58\nkg:0265 is Q2086445\nkg:5354 is P58"
  },
  {
    "CFQquestionIdx": 33075,
    "expectedResponse": false,
    "questionPatternModEntities": "Did a film director that M1 , M2 , and M3 were written by and were edited by marry and influence M4",
    "questionPatternModEntities_he": "האם במאי סרטים ש-M1, M2 ו-M3 נכתבו על ידי ונערכו על ידי התחתן והשפיע על M4",
    "questionPatternModEntities_kn": "M1 , M2 , ಮತ್ತು M3 ಅನ್ನು ಬರೆದಿರುವ ಮತ್ತು ಸಂಪಾದಿಸಿದ ಚಲನಚಿತ್ರ ನಿರ್ದೇಶಕರು M4 ಅನ್ನು ಮದುವೆಯಾಗಿ ಪ್ರಭಾವಿಸಿದ್ದಾರೆಯೇ",
    "questionPatternModEntities_zh": "M1、M2、M3的编剧和剪辑的电影导演结婚影响了M4吗？",
    "questionTemplate": "Did a [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by and were [VP_SIMPLE] by [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "questionWithBrackets": "Did a film director that [Vagabond] , [The Gleaners and I] , and [Varda by Agnès] were written by and were edited by marry and influence [Jacques Demy]",
    "questionWithBrackets_he": "האם במאי קולנוע ש[וגאבונד], [המלקטים ואני] ו[ורדה מאת אגנס] נכתבו על ידי ונערך על ידי נישואין והשפעה [ז&#39;אק דמי]",
    "questionWithBrackets_kn": "[ವ್ಯಾಗಾಬಾಂಡ್] , [ದಿ ಗ್ಲೀನರ್ಸ್ ಮತ್ತು ನಾನು] ಮತ್ತು [ಆಗ್ನೆಸ್ ಅವರ ವಾರ್ದಾ] ಅನ್ನು ಮದುವೆಯಾಗಿ ಮತ್ತು ಪ್ರಭಾವದಿಂದ [ಜಾಕ್ವೆಸ್ ಡೆಮಿ] ಅವರು ಬರೆದಿದ್ದಾರೆ ಮತ್ತು ಸಂಪಾದಿಸಿದ್ದಾರೆಯೇ",
    "questionWithBrackets_zh": "有没有[流浪者]、[拾穗者和我]和[阿涅斯的瓦尔达]的电影导演是由[雅克·德米][雅克·德米]编写和编辑的？",
    "recursionDepth": 50,
    "sparql": "ASK WHERE { ?x0 wdt:P106 wd:Q2526255 . wd:Q63993096 wdt:P1040 ?x0 . wd:Q2298257 wdt:P1040 ?x0 . wd:Q2493884 wdt:P1040 ?x0 . wd:Q63993096 wdt:P58 ?x0 . wd:Q2298257 wdt:P58 ?x0 . wd:Q2493884 wdt:P58 ?x0 . wd:Q312258 wdt:P737 ?x0 . ?x0 wdt:P26 wd:Q312258 . FILTER ( ?x0 != wd:Q312258 ) }",
    "sparqlPatternModEntities": "ASK WHERE {\n?x0 wdt:P106 wd:Q2526255 .\nM1 wdt:P1040 ?x0 .\nM2 wdt:P1040 ?x0 .\nM3 wdt:P1040 ?x0 .\nM1 wdt:P58 ?x0 .\nM2 wdt:P58 ?x0 .\nM3 wdt:P58 ?x0 .\nM4 wdt:P737 ?x0 .\n?x0 wdt:P26 M4 .\nFILTER ( ?x0 != M4 )\n}",
    "id": 33075,
    "split": "gold_test",
    "en": "Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy",
    "results": [
      true
    ],
    "direct": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P106 is P106\nwd:Q2526255 is Q2526255\nwd:Q63993096 is Q63993096\nwdt:P1040 is P1040\nwd:Q2298257 is Q2298257\nwdt:P1040 is P1040\nwd:Q2493884 is Q2493884\nwdt:P1040 is P1040\nwd:Q63993096 is Q63993096\nwdt:P58 is P58\nwd:Q2298257 is Q2298257\nwdt:P58 is P58\nwd:Q2493884 is Q2493884\nwdt:P58 is P58\nwd:Q312258 is Q312258\nwdt:P737 is P737\nwdt:P26 is P26\nwd:Q312258 is Q312258\nwd:Q312258 is Q312258",
    "masks": [
      {
        "uri": "wdt:P106",
        "mask": "kg:3350"
      },
      {
        "uri": "wd:Q2526255",
        "mask": "kg:6269"
      },
      {
        "uri": "wd:Q63993096",
        "mask": "kg:2478"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:3869"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:9368"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:1020"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:2498"
      },
      {
        "uri": "wdt:P1040",
        "mask": "kg:4129"
      },
      {
        "uri": "wd:Q63993096",
        "mask": "kg:9798"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9524"
      },
      {
        "uri": "wd:Q2298257",
        "mask": "kg:2133"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:7832"
      },
      {
        "uri": "wd:Q2493884",
        "mask": "kg:1567"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:5639"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:9278"
      },
      {
        "uri": "wdt:P737",
        "mask": "kg:8697"
      },
      {
        "uri": "wdt:P26",
        "mask": "kg:0316"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:6744"
      },
      {
        "uri": "wd:Q312258",
        "mask": "kg:1795"
      }
    ],
    "masked": "Translate the question “Did a film director that Vagabond , The Gleaners and I , and Varda by Agnès were written by and were edited by marry and influence Jacques Demy” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:3350 is P106\nkg:6269 is Q2526255\nkg:9798 is Q63993096\nkg:4129 is P1040\nkg:2133 is Q2298257\nkg:4129 is P1040\nkg:1567 is Q2493884\nkg:4129 is P1040\nkg:9798 is Q63993096\nkg:5639 is P58\nkg:2133 is Q2298257\nkg:5639 is P58\nkg:1567 is Q2493884\nkg:5639 is P58\nkg:1795 is Q312258\nkg:8697 is P737\nkg:0316 is P26\nkg:1795 is Q312258\nkg:1795 is Q312258"
  },
  {
    "CFQquestionIdx": 152321,
    "expectedResponse": [
      "The Walt Disney Company"
    ],
    "questionPatternModEntities": "What distributor and producer of M6 was acquired by M0 , M1 , M2 , and M3 and was acquired by M4 and M5",
    "questionPatternModEntities_he": "איזה מפיץ ומפיק של M6 נרכש על ידי M0 , M1 , M2 ו-M3 ונרכש על ידי M4 ו-M5",
    "questionPatternModEntities_kn": "M6 ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು M0, M1, M2 ಮತ್ತು M3 ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು ಮತ್ತು M4 ಮತ್ತು M5 ನಿಂದ ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿತು",
    "questionPatternModEntities_zh": "M0、M1、M2、M3收购M6，M4、M5收购哪个分销商和生产商？",
    "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity] and [entity]",
    "questionWithBrackets": "What distributor and producer of [Grand Canyon] was acquired by [State Street Global Advisors] , [BlackRock] , [T. Rowe Price] , and [Capital Group Companies] and was acquired by [State Farm Insurance] and [The Vanguard Group]",
    "questionWithBrackets_he": "המפיץ והמפיק של [גרנד קניון] נרכש על ידי [State Street Global Advisors], [BlackRock], [T. רו פרייס] , ו[חברות קבוצת קפיטל] ונרכשה על ידי [מדינת משק ביטוח] ו[קבוצת ואנגארד]",
    "questionWithBrackets_kn": "[ಗ್ರ್ಯಾಂಡ್ ಕ್ಯಾನ್ಯನ್] ನ ಯಾವ ವಿತರಕರು ಮತ್ತು ನಿರ್ಮಾಪಕರನ್ನು [ಸ್ಟೇಟ್ ಸ್ಟ್ರೀಟ್ ಗ್ಲೋಬಲ್ ಅಡ್ವೈಸರ್ಸ್] , [ಬ್ಲ್ಯಾಕ್‌ರಾಕ್] , [ಟಿ. ರೋವ್ ಪ್ರೈಸ್] , ಮತ್ತು [ಕ್ಯಾಪಿಟಲ್ ಗ್ರೂಪ್ ಕಂಪನಿಗಳು] ಮತ್ತು [ಸ್ಟೇಟ್ ಫಾರ್ಮ್ ಇನ್ಶುರೆನ್ಸ್] ಮತ್ತು [ದಿ ವ್ಯಾನ್‌ಗಾರ್ಡ್ ಗ್ರೂಪ್] ಸ್ವಾಧೀನಪಡಿಸಿಕೊಂಡಿದೆಯೇ",
    "questionWithBrackets_zh": "[Grand Canyon] 的分销商和生产商被 [State Street Global Advisors]、[BlackRock]、[T. Rowe Price] 和 [Capital Group Companies] 被 [State Farm Insurance] 和 [The Vanguard Group] 收购？",
    "recursionDepth": 50,
    "sparql": "SELECT DISTINCT ?x0 WHERE { wd:Q2062523 wdt:P750 ?x0 . wd:Q2062523 wdt:P272 ?x0 . ?x0 wdt:P127 wd:Q3511946 . ?x0 wdt:P127 wd:Q7603552 . ?x0 wdt:P127 wd:Q2007336 . ?x0 wdt:P127 wd:Q219635 . ?x0 wdt:P127 wd:Q505275 . ?x0 wdt:P127 wd:Q849363 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\nM6 wdt:P750 ?x0 .\nM6 wdt:P272 ?x0 .\n?x0 wdt:P127 M0 .\n?x0 wdt:P127 M1 .\n?x0 wdt:P127 M2 .\n?x0 wdt:P127 M3 .\n?x0 wdt:P127 M4 .\n?x0 wdt:P127 M5\n}",
    "id": 152321,
    "split": "gold_test",
    "en": "What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group",
    "results": [],
    "direct": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwd:Q2062523 is Q2062523\nwdt:P750 is P750\nwd:Q2062523 is Q2062523\nwdt:P272 is P272\nwdt:P127 is P127\nwd:Q3511946 is Q3511946\nwdt:P127 is P127\nwd:Q7603552 is Q7603552\nwdt:P127 is P127\nwd:Q2007336 is Q2007336\nwdt:P127 is P127\nwd:Q219635 is Q219635\nwdt:P127 is P127\nwd:Q505275 is Q505275\nwdt:P127 is P127\nwd:Q849363 is Q849363",
    "masks": [
      {
        "uri": "wd:Q2062523",
        "mask": "kg:0258"
      },
      {
        "uri": "wdt:P750",
        "mask": "kg:9566"
      },
      {
        "uri": "wd:Q2062523",
        "mask": "kg:0968"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2147"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:4660"
      },
      {
        "uri": "wd:Q3511946",
        "mask": "kg:3261"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:7471"
      },
      {
        "uri": "wd:Q7603552",
        "mask": "kg:3199"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:6871"
      },
      {
        "uri": "wd:Q2007336",
        "mask": "kg:4291"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:3889"
      },
      {
        "uri": "wd:Q219635",
        "mask": "kg:1622"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:1216"
      },
      {
        "uri": "wd:Q505275",
        "mask": "kg:6334"
      },
      {
        "uri": "wdt:P127",
        "mask": "kg:3944"
      },
      {
        "uri": "wd:Q849363",
        "mask": "kg:4156"
      }
    ],
    "masked": "Translate the question “What distributor and producer of Grand Canyon was acquired by State Street Global Advisors , BlackRock , T. Rowe Price , and Capital Group Companies and was acquired by State Farm Insurance and The Vanguard Group” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:0968 is Q2062523\nkg:9566 is P750\nkg:0968 is Q2062523\nkg:2147 is P272\nkg:3944 is P127\nkg:3261 is Q3511946\nkg:3944 is P127\nkg:3199 is Q7603552\nkg:3944 is P127\nkg:4291 is Q2007336\nkg:3944 is P127\nkg:1622 is Q219635\nkg:3944 is P127\nkg:6334 is Q505275\nkg:3944 is P127\nkg:4156 is Q849363"
  },
  {
    "CFQquestionIdx": 155236,
    "expectedResponse": [
      "Virginia City"
    ],
    "questionPatternModEntities": "What film directed by , produced by , and written by M3 , M4 , M5 , and M6 starred M1 and M2",
    "questionPatternModEntities_he": "איזה סרט בבימוי, הפיק ונכתב על ידי M3, M4, M5 ו-M6 בכיכובם של M1 ו-M2",
    "questionPatternModEntities_kn": "M3 , M4 , M5 , ಮತ್ತು M6 ಅವರು M1 ಮತ್ತು M2 ನಟಿಸಿದ ಯಾವ ಚಲನಚಿತ್ರವನ್ನು ನಿರ್ದೇಶಿಸಿದ್ದಾರೆ, ನಿರ್ಮಿಸಿದ್ದಾರೆ ಮತ್ತು ಬರೆದಿದ್ದಾರೆ",
    "questionPatternModEntities_zh": "M1和M2由M3、M4、M5和M6导演、制片和编剧的哪部电影？",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity]",
    "questionWithBrackets": "What film directed by , produced by , and written by [Randolph Scott] , [Miriam Hopkins] , [Humphrey Bogart] , and [Robert Buckner] starred [Errol Flynn] and [Paul Fix]",
    "questionWithBrackets_he": "איזה סרט בימוי, הפיק ונכתב על ידי [רנדולף סקוט], [מרים הופקינס], [האמפרי בוגרט] ו[רוברט באקנר] כיכבו [ארול פלין] ו[פול פיקס]",
    "questionWithBrackets_kn": "[ರಾಂಡೋಲ್ಫ್ ಸ್ಕಾಟ್] , [ಮಿರಿಯಮ್ ಹಾಪ್ಕಿನ್ಸ್] , [ಹಂಫ್ರೆ ಬೊಗಾರ್ಟ್] ಮತ್ತು [ರಾಬರ್ಟ್ ಬಕ್ನರ್] ಅವರು [ಎರೋಲ್ ಫ್ಲಿನ್] ಮತ್ತು [ಪಾಲ್ ಫಿಕ್ಸ್] ನಟಿಸಿರುವವರು ನಿರ್ದೇಶಿಸಿದ, ನಿರ್ಮಿಸಿದ ಮತ್ತು ಬರೆದ ಚಲನಚಿತ್ರ ಯಾವುದು",
    "questionWithBrackets_zh": "[伦道夫·斯科特]、[米里亚姆·霍普金斯]、[汉弗莱·鲍嘉]和[罗伯特·巴克纳]执导、制作和编剧的哪部电影由[埃罗尔·弗林]和[保罗·菲克斯]主演？",
    "recursionDepth": 50,
    "sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q16390 . ?x0 wdt:P57 wd:Q295984 . ?x0 wdt:P57 wd:Q4420093 . ?x0 wdt:P57 wd:Q242477 . ?x0 wdt:P162|wdt:P272 wd:Q16390 . ?x0 wdt:P162|wdt:P272 wd:Q295984 . ?x0 wdt:P162|wdt:P272 wd:Q4420093 . ?x0 wdt:P162|wdt:P272 wd:Q242477 . ?x0 wdt:P161 wd:Q93188 . ?x0 wdt:P161 wd:Q744357 . ?x0 wdt:P58 wd:Q16390 . ?x0 wdt:P58 wd:Q295984 . ?x0 wdt:P58 wd:Q4420093 . ?x0 wdt:P58 wd:Q242477 }",
    "sparqlPatternModEntities": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P31 wd:Q11424 .\n?x0 wdt:P57 M3 .\n?x0 wdt:P57 M4 .\n?x0 wdt:P57 M5 .\n?x0 wdt:P57 M6 .\n?x0 wdt:P162|wdt:P272 M3 .\n?x0 wdt:P162|wdt:P272 M4 .\n?x0 wdt:P162|wdt:P272 M5 .\n?x0 wdt:P162|wdt:P272 M6 .\n?x0 wdt:P161 M1 .\n?x0 wdt:P161 M2 .\n?x0 wdt:P58 M3 .\n?x0 wdt:P58 M4 .\n?x0 wdt:P58 M5 .\n?x0 wdt:P58 M6\n}",
    "id": 155236,
    "split": "gold_test",
    "en": "What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix",
    "results": [],
    "direct": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query.",
    "NER": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using the Wikidata Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nwdt:P31 is P31\nwd:Q11424 is Q11424\nwdt:P57 is P57\nwd:Q16390 is Q16390\nwdt:P57 is P57\nwd:Q295984 is Q295984\nwdt:P57 is P57\nwd:Q4420093 is Q4420093\nwdt:P57 is P57\nwd:Q242477 is Q242477\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q16390 is Q16390\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q295984 is Q295984\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q4420093 is Q4420093\nwdt:P162 is P162\nwdt:P272 is P272\nwd:Q242477 is Q242477\nwdt:P161 is P161\nwd:Q93188 is Q93188\nwdt:P161 is P161\nwd:Q744357 is Q744357\nwdt:P58 is P58\nwd:Q16390 is Q16390\nwdt:P58 is P58\nwd:Q295984 is Q295984\nwdt:P58 is P58\nwd:Q4420093 is Q4420093\nwdt:P58 is P58\nwd:Q242477 is Q242477",
    "masks": [
      {
        "uri": "wdt:P31",
        "mask": "kg:4532"
      },
      {
        "uri": "wd:Q11424",
        "mask": "kg:7320"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:7193"
      },
      {
        "uri": "wd:Q16390",
        "mask": "kg:9152"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:3471"
      },
      {
        "uri": "wd:Q295984",
        "mask": "kg:5551"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:2442"
      },
      {
        "uri": "wd:Q4420093",
        "mask": "kg:1455"
      },
      {
        "uri": "wdt:P57",
        "mask": "kg:0291"
      },
      {
        "uri": "wd:Q242477",
        "mask": "kg:2382"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1570"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:9960"
      },
      {
        "uri": "wd:Q16390",
        "mask": "kg:1433"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:0025"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:0658"
      },
      {
        "uri": "wd:Q295984",
        "mask": "kg:3456"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:1379"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:2287"
      },
      {
        "uri": "wd:Q4420093",
        "mask": "kg:6850"
      },
      {
        "uri": "wdt:P162",
        "mask": "kg:7895"
      },
      {
        "uri": "wdt:P272",
        "mask": "kg:5442"
      },
      {
        "uri": "wd:Q242477",
        "mask": "kg:2478"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:6460"
      },
      {
        "uri": "wd:Q93188",
        "mask": "kg:2669"
      },
      {
        "uri": "wdt:P161",
        "mask": "kg:1933"
      },
      {
        "uri": "wd:Q744357",
        "mask": "kg:1907"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:8823"
      },
      {
        "uri": "wd:Q16390",
        "mask": "kg:5032"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:2130"
      },
      {
        "uri": "wd:Q295984",
        "mask": "kg:7648"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:9579"
      },
      {
        "uri": "wd:Q4420093",
        "mask": "kg:6011"
      },
      {
        "uri": "wdt:P58",
        "mask": "kg:0334"
      },
      {
        "uri": "wd:Q242477",
        "mask": "kg:1716"
      }
    ],
    "masked": "Translate the question “What film directed by , produced by , and written by Randolph Scott , Miriam Hopkins , Humphrey Bogart , and Robert Buckner starred Errol Flynn and Paul Fix” into a SPARQL query using a Knowledge Graph. Have the query return only resources. Provide only the generated SPARQL query. The possible entities and properties are: \nkg:4532 is P31\nkg:7320 is Q11424\nkg:0291 is P57\nkg:5032 is Q16390\nkg:0291 is P57\nkg:7648 is Q295984\nkg:0291 is P57\nkg:6011 is Q4420093\nkg:0291 is P57\nkg:1716 is Q242477\nkg:7895 is P162\nkg:5442 is P272\nkg:5032 is Q16390\nkg:7895 is P162\nkg:5442 is P272\nkg:7648 is Q295984\nkg:7895 is P162\nkg:5442 is P272\nkg:6011 is Q4420093\nkg:7895 is P162\nkg:5442 is P272\nkg:1716 is Q242477\nkg:1933 is P161\nkg:2669 is Q93188\nkg:1933 is P161\nkg:1907 is Q744357\nkg:0334 is P58\nkg:5032 is Q16390\nkg:0334 is P58\nkg:7648 is Q295984\nkg:0334 is P58\nkg:6011 is Q4420093\nkg:0334 is P58\nkg:1716 is Q242477"
  }
]